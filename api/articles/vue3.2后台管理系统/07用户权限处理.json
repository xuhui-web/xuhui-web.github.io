{"title":"07用户权限处理","uid":"569348560a15d3e35abb58031a3aedf4","slug":"vue3.2后台管理系统/07用户权限处理","date":"2022-08-22T17:02:44.000Z","updated":"2022-08-23T02:02:47.063Z","comments":true,"path":"api/articles/vue3.2后台管理系统/07用户权限处理.json","keywords":null,"cover":"/img/photo-1511287381215-8c58b84f8896.jpg","content":"<h1 id=\"第七章：用户权限处理\"><a href=\"#第七章：用户权限处理\" class=\"headerlink\" title=\"第七章：用户权限处理\"></a>第七章：用户权限处理</h1><h2 id=\"7-01：开篇\"><a href=\"#7-01：开篇\" class=\"headerlink\" title=\"7-01：开篇\"></a>7-01：开篇</h2><p>在处理完成了 <strong>个人中心</strong>之后， 那么接下来我们就需要来处理 <strong>用户</strong> 相关的模块了</p>\n<p>整个用户相关的模块分为三部分：</p>\n<ol>\n<li>员工管理</li>\n<li>角色列表</li>\n<li>权限列表</li>\n</ol>\n<p>这三部分的内容我们会分成两个大章来进行处理。</p>\n<p>那么这一大章我们要来处理的就是 <strong>员工管理</strong> 模块的内容，整个 <strong>员工管理</strong> 模块可以分为以下功能：</p>\n<ol>\n<li>用户列表分页展示</li>\n<li><code>excel</code> 导入用户</li>\n<li>用户列表导出为 <code>excel</code></li>\n<li>用户详情的表格展示</li>\n<li>用户详情表格打印</li>\n<li>用户删除</li>\n<li>用户角色分配（需要在完成角色列表之后处理）</li>\n</ol>\n<p>那么明确好了这样的内容之后，接下来我们就进入到  <strong>员工管理</strong> 模块的开发之中</p>\n<h2 id=\"7-02：用户列表分页展示\"><a href=\"#7-02：用户列表分页展示\" class=\"headerlink\" title=\"7-02：用户列表分页展示\"></a>7-02：用户列表分页展示</h2><p>首先我们先来处理最基础的 <strong>用户列表分页展示</strong> 功能，整个功能大体可以分为两步：</p>\n<ol>\n<li>获取分页数据</li>\n<li>利用 <a href=\"https://element-plus.org/zh-CN/component/table.html\">el-table</a> 和 <a href=\"https://element-plus.org/zh-CN/component/pagination.html\">el-pagination</a> 渲染数据</li>\n</ol>\n<p>那么下面我们就根据这个步骤进行一个实现即可：</p>\n<ol>\n<li><p>创建 <code>api/user-manage</code> 文件，用于定义接口</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import request from &#39;@&#x2F;utils&#x2F;request&#39;\n\n&#x2F;**\n * 获取用户列表数据\n *&#x2F;\nexport const getUserManageList &#x3D; data &#x3D;&gt; &#123;\n  return request(&#123;\n    url: &#39;&#x2F;user-manage&#x2F;list&#39;,\n    params: data\n  &#125;)\n&#125;\n</code></pre>\n</li>\n<li><p>在 <code>user-manage</code> 中获取对应数据</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport &#123; ref &#125; from &#39;vue&#39;\nimport &#123; getUserManageList &#125; from &#39;@&#x2F;api&#x2F;user-manage&#39;\nimport &#123; watchSwitchLang &#125; from &#39;@&#x2F;utils&#x2F;i18n&#39;\n\n&#x2F;&#x2F; 数据相关\nconst tableData &#x3D; ref([])\nconst total &#x3D; ref(0)\nconst page &#x3D; ref(1)\nconst size &#x3D; ref(2)\n&#x2F;&#x2F; 获取数据的方法\nconst getListData &#x3D; async () &#x3D;&gt; &#123;\n  const result &#x3D; await getUserManageList(&#123;\n    page: page.value,\n    size: size.value\n  &#125;)\n  tableData.value &#x3D; result.list\n  total.value &#x3D; result.total\n&#125;\ngetListData()\n&#x2F;&#x2F; 监听语言切换\nwatchSwitchLang(getListData)\n&lt;&#x2F;script&gt;</code></pre>\n</li>\n<li><p>根据数据利用 <a href=\"https://element-plus.org/zh-CN/component/table.html\">el-table</a> 和 <a href=\"https://element-plus.org/zh-CN/component/pagination.html\">el-pagination</a> 渲染视图</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;user-manage-container&quot;&gt;\n    &lt;el-card class&#x3D;&quot;header&quot;&gt;\n      &lt;div&gt;\n        &lt;el-button type&#x3D;&quot;primary&quot;&gt; &#123;&#123; $t(&#39;msg.excel.importExcel&#39;) &#125;&#125;&lt;&#x2F;el-button&gt;\n        &lt;el-button type&#x3D;&quot;success&quot;&gt;\n          &#123;&#123; $t(&#39;msg.excel.exportExcel&#39;) &#125;&#125;\n        &lt;&#x2F;el-button&gt;\n      &lt;&#x2F;div&gt;\n    &lt;&#x2F;el-card&gt;\n    &lt;el-card&gt;\n      &lt;el-table :data&#x3D;&quot;tableData&quot; border style&#x3D;&quot;width: 100%&quot;&gt;\n        &lt;el-table-column label&#x3D;&quot;#&quot; type&#x3D;&quot;index&quot; &#x2F;&gt;\n        &lt;el-table-column prop&#x3D;&quot;username&quot; :label&#x3D;&quot;$t(&#39;msg.excel.name&#39;)&quot;&gt;\n        &lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column prop&#x3D;&quot;mobile&quot; :label&#x3D;&quot;$t(&#39;msg.excel.mobile&#39;)&quot;&gt;\n        &lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column :label&#x3D;&quot;$t(&#39;msg.excel.avatar&#39;)&quot; align&#x3D;&quot;center&quot;&gt;\n          &lt;template v-slot&#x3D;&quot;&#123; row &#125;&quot;&gt;\n            &lt;el-image\n              class&#x3D;&quot;avatar&quot;\n              :src&#x3D;&quot;row.avatar&quot;\n              :preview-src-list&#x3D;&quot;[row.avatar]&quot;\n            &gt;&lt;&#x2F;el-image&gt;\n          &lt;&#x2F;template&gt;\n        &lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column :label&#x3D;&quot;$t(&#39;msg.excel.role&#39;)&quot;&gt;\n          &lt;template #default&#x3D;&quot;&#123; row &#125;&quot;&gt;\n            &lt;div v-if&#x3D;&quot;row.role &amp;&amp; row.role.length &gt; 0&quot;&gt;\n              &lt;el-tag v-for&#x3D;&quot;item in row.role&quot; :key&#x3D;&quot;item.id&quot; size&#x3D;&quot;mini&quot;&gt;&#123;&#123;\n                item.title\n              &#125;&#125;&lt;&#x2F;el-tag&gt;\n            &lt;&#x2F;div&gt;\n            &lt;div v-else&gt;\n              &lt;el-tag size&#x3D;&quot;mini&quot;&gt;&#123;&#123; $t(&#39;msg.excel.defaultRole&#39;) &#125;&#125;&lt;&#x2F;el-tag&gt;\n            &lt;&#x2F;div&gt;\n          &lt;&#x2F;template&gt;\n        &lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column prop&#x3D;&quot;openTime&quot; :label&#x3D;&quot;$t(&#39;msg.excel.openTime&#39;)&quot;&gt;\n        &lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column\n          :label&#x3D;&quot;$t(&#39;msg.excel.action&#39;)&quot;\n          fixed&#x3D;&quot;right&quot;\n          width&#x3D;&quot;260&quot;\n        &gt;\n          &lt;template #default&gt;\n            &lt;el-button type&#x3D;&quot;primary&quot; size&#x3D;&quot;mini&quot;&gt;&#123;&#123;\n              $t(&#39;msg.excel.show&#39;)\n            &#125;&#125;&lt;&#x2F;el-button&gt;\n            &lt;el-button type&#x3D;&quot;info&quot; size&#x3D;&quot;mini&quot;&gt;&#123;&#123;\n              $t(&#39;msg.excel.showRole&#39;)\n            &#125;&#125;&lt;&#x2F;el-button&gt;\n            &lt;el-button type&#x3D;&quot;danger&quot; size&#x3D;&quot;mini&quot;&gt;&#123;&#123;\n              $t(&#39;msg.excel.remove&#39;)\n            &#125;&#125;&lt;&#x2F;el-button&gt;\n          &lt;&#x2F;template&gt;\n        &lt;&#x2F;el-table-column&gt;\n      &lt;&#x2F;el-table&gt;\n\n      &lt;el-pagination\n        class&#x3D;&quot;pagination&quot;\n        @size-change&#x3D;&quot;handleSizeChange&quot;\n        @current-change&#x3D;&quot;handleCurrentChange&quot;\n        :current-page&#x3D;&quot;page&quot;\n        :page-sizes&#x3D;&quot;[2, 5, 10, 20]&quot;\n        :page-size&#x3D;&quot;size&quot;\n        layout&#x3D;&quot;total, sizes, prev, pager, next, jumper&quot;\n        :total&#x3D;&quot;total&quot;\n      &gt;\n      &lt;&#x2F;el-pagination&gt;\n    &lt;&#x2F;el-card&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport &#123; ref &#125; from &#39;vue&#39;\nimport &#123; getUserManageList &#125; from &#39;@&#x2F;api&#x2F;user-manage&#39;\nimport &#123; watchSwitchLang &#125; from &#39;@&#x2F;utils&#x2F;i18n&#39;\n\n&#x2F;&#x2F; 数据相关\nconst tableData &#x3D; ref([])\nconst total &#x3D; ref(0)\nconst page &#x3D; ref(1)\nconst size &#x3D; ref(2)\n&#x2F;&#x2F; 获取数据的方法\nconst getListData &#x3D; async () &#x3D;&gt; &#123;\n  const result &#x3D; await getUserManageList(&#123;\n    page: page.value,\n    size: size.value\n  &#125;)\n  tableData.value &#x3D; result.list\n  total.value &#x3D; result.total\n&#125;\ngetListData()\n&#x2F;&#x2F; 监听语言切换\nwatchSwitchLang(getListData)\n\n&#x2F;&#x2F; 分页相关\n&#x2F;**\n * size 改变触发\n *&#x2F;\nconst handleSizeChange &#x3D; currentSize &#x3D;&gt; &#123;\n  size.value &#x3D; currentSize\n  getListData()\n&#125;\n\n&#x2F;**\n * 页码改变触发\n *&#x2F;\nconst handleCurrentChange &#x3D; currentPage &#x3D;&gt; &#123;\n  page.value &#x3D; currentPage\n  getListData()\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n.user-manage-container &#123;\n  .header &#123;\n    margin-bottom: 22px;\n    text-align: right;\n  &#125;\n  ::v-deep .avatar &#123;\n    width: 60px;\n    height: 60px;\n    border-radius: 50%;\n  &#125;\n\n  ::v-deep .el-tag &#123;\n    margin-right: 6px;\n  &#125;\n\n  .pagination &#123;\n    margin-top: 20px;\n    text-align: center;\n  &#125;\n&#125;\n&lt;&#x2F;style&gt;\n</code></pre></li>\n</ol>\n<h2 id=\"7-03：全局属性处理时间展示问题\"><a href=\"#7-03：全局属性处理时间展示问题\" class=\"headerlink\" title=\"7-03：全局属性处理时间展示问题\"></a>7-03：全局属性处理时间展示问题</h2><p>在 <code>Vue3</code>中取消了 <a href=\"https://v3.cn.vuejs.org/guide/migration/filters.html\">过滤器的概念</a>，其中：</p>\n<ol>\n<li>局部过滤器被完全删除</li>\n<li>全局过滤器虽然被移除，但是可以使用 <a href=\"https://v3.cn.vuejs.org/api/application-config.html#globalproperties\">全局属性</a> 进行替代</li>\n</ol>\n<p>那么在列表中的时间处理部分，在 <code>vue2</code> 时代通常我们都是通过 <strong>全局过滤器</strong> 来进行实现的，所以在 <code>vue3</code> 中我们就顺理成章的通过  <a href=\"https://v3.cn.vuejs.org/api/application-config.html#globalproperties\">全局属性</a> 替代实现</p>\n<ol>\n<li><p>时间处理部分我们通过 <a href=\"https://day.js.org/\">Day.js</a> 进行处理</p>\n</li>\n<li><p>下载 <a href=\"https://day.js.org/\">Day.js</a> </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm i dayjs@1.10.6</code></pre>\n</li>\n<li><p>创建 <code>src/filter</code> 文件夹，用于定义 <a href=\"https://v3.cn.vuejs.org/api/application-config.html#globalproperties\">全局属性</a> </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import dayjs from &#39;dayjs&#39;\n\nconst dateFilter &#x3D; (val, format &#x3D; &#39;YYYY-MM-DD&#39;) &#x3D;&gt; &#123;\n  if (!isNaN(val)) &#123;\n    val &#x3D; parseInt(val)\n  &#125;\n\n  return dayjs(val).format(format)\n&#125;\n\nexport default app &#x3D;&gt; &#123;\n  app.config.globalProperties.$filters &#x3D; &#123;\n    dateFilter\n  &#125;\n&#125;</code></pre>\n</li>\n<li><p>在 <code>main.js</code> 中导入</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; filter\nimport installFilter from &#39;@&#x2F;filters&#39;\n\ninstallFilter(app)</code></pre>\n</li>\n<li><p>在 <code>user-manage</code> 中使用全局属性处理时间解析</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;el-table-column :label&#x3D;&quot;$t(&#39;msg.excel.openTime&#39;)&quot;&gt;\n          &lt;template #default&#x3D;&quot;&#123; row &#125;&quot;&gt;\n            &#123;&#123; $filters.dateFilter(row.openTime) &#125;&#125;\n          &lt;&#x2F;template&gt;\n        &lt;&#x2F;el-table-column&gt;</code></pre></li>\n</ol>\n<h2 id=\"7-04：excel-导入原理与实现分析\"><a href=\"#7-04：excel-导入原理与实现分析\" class=\"headerlink\" title=\"7-04：excel 导入原理与实现分析\"></a>7-04：excel 导入原理与实现分析</h2><p>在处理完成这些基础的内容展示之后，接下来我们来看 <strong>excel 导入</strong> 功能</p>\n<p>对于 <strong>excel 导入</strong> 首先我们先来明确一下它的业务流程：</p>\n<ol>\n<li>点击  <strong>excel 导入</strong> 按钮进入  <strong>excel 导入页面</strong></li>\n<li>页面提供了两种导入形式<ol>\n<li>点击按钮上传 <code>excel</code> </li>\n<li>把 <code>excel</code> 拖入指定区域</li>\n</ol>\n</li>\n<li>选中文件，进行两步操作<ol>\n<li>解析 <code>excel</code> 数据</li>\n<li>上传解析之后的数据</li>\n</ol>\n</li>\n<li>上传成功之后，返回 <strong>员工管理（用户列表）</strong> 页面，进行数据展示</li>\n</ol>\n<p>所以根据这个业务我们可以看出，整个 <code>excel</code> 导入核心的原理部分在于 <strong>选中文件之后，上传成功之前</strong> 的操作，即：</p>\n<ol>\n<li>解析 <code>excel</code> 数据（<strong>最重要</strong>）</li>\n<li>上传解析之后的数据</li>\n</ol>\n<p>对于解析部分，我们回头再去详细说明，在这里我们只需要明确大的实现流程即可。</p>\n<p>根据上面所说，整个的实现流程我们也可以很轻松得出：</p>\n<ol>\n<li>创建 <code>excel</code> 导入页面</li>\n<li>点击 <code>excel</code> 导入按钮，进入该页面</li>\n<li>该页面提供两种文件导入形式</li>\n<li>选中文件之后，解析 <code>excel</code> 数据（核心）</li>\n<li>上传解析之后的数据</li>\n<li>返回 员工管理（用户列表） 页面</li>\n</ol>\n<p>那么明确好了这样的流程之后，接下来我们就可以实现对应的代码了。</p>\n<h2 id=\"7-05：业务落地：提供两种文件导入形式\"><a href=\"#7-05：业务落地：提供两种文件导入形式\" class=\"headerlink\" title=\"7-05：业务落地：提供两种文件导入形式\"></a>7-05：业务落地：提供两种文件导入形式</h2><p> <code>excel</code> 页面我们在之前已经创建过了，就是 <code>views/import/index</code> 。</p>\n<p>所以此处，我们只需要在按钮处完成页面跳转即可，在 <code>user-manage</code> 中：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;onImportExcelClick&quot;&gt;\n          &#123;&#123; $t(&#39;msg.excel.importExcel&#39;) &#125;&#125;&lt;&#x2F;el-button\n        &gt;\n\nconst router &#x3D; useRouter()\n&#x2F;**\n * excel 导入点击事件\n *&#x2F;\nconst onImportExcelClick &#x3D; () &#x3D;&gt; &#123;\n  router.push(&#39;&#x2F;user&#x2F;import&#39;)\n&#125;</code></pre>\n\n<p>这样我们就已经完成了前面两步，那么接下来我们就来实现 <strong>提供两种文件导入形式</strong></p>\n<ol>\n<li><p>创建 <code>components/UploadExcel</code> 组件，用于处理上传 <code>excel</code> 相关的问题</p>\n</li>\n<li><p>在 <code>import</code> 中导入该组件</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;upload-excel&gt;&lt;&#x2F;upload-excel&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport UploadExcel from &#39;@&#x2F;components&#x2F;UploadExcel&#39;\n&lt;&#x2F;script&gt;</code></pre>\n</li>\n<li><p>整个 <code>UploadExcel</code> 组件的内容可以分成两部分：</p>\n<ol>\n<li>样式</li>\n<li>逻辑</li>\n</ol>\n</li>\n<li><p>那么首先我们先处理样式内容</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;upload-excel&quot;&gt;\n    &lt;div class&#x3D;&quot;btn-upload&quot;&gt;\n      &lt;el-button :loading&#x3D;&quot;loading&quot; type&#x3D;&quot;primary&quot; @click&#x3D;&quot;handleUpload&quot;&gt;\n        &#123;&#123; $t(&#39;msg.uploadExcel.upload&#39;) &#125;&#125;\n      &lt;&#x2F;el-button&gt;\n    &lt;&#x2F;div&gt;\n\n    &lt;input\n      ref&#x3D;&quot;excelUploadInput&quot;\n      class&#x3D;&quot;excel-upload-input&quot;\n      type&#x3D;&quot;file&quot;\n      accept&#x3D;&quot;.xlsx, .xls&quot;\n      @change&#x3D;&quot;handleChange&quot;\n    &#x2F;&gt;\n    &lt;!-- https:&#x2F;&#x2F;developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;Web&#x2F;API&#x2F;HTML_Drag_and_Drop_API --&gt;\n    &lt;div\n      class&#x3D;&quot;drop&quot;\n      @drop.stop.prevent&#x3D;&quot;handleDrop&quot;\n      @dragover.stop.prevent&#x3D;&quot;handleDragover&quot;\n      @dragenter.stop.prevent&#x3D;&quot;handleDragover&quot;\n    &gt;\n      &lt;i class&#x3D;&quot;el-icon-upload&quot; &#x2F;&gt;\n      &lt;span&gt;&#123;&#123; $t(&#39;msg.uploadExcel.drop&#39;) &#125;&#125;&lt;&#x2F;span&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport &#123;&#125; from &#39;vue&#39;\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n.upload-excel &#123;\n  display: flex;\n  justify-content: center;\n  margin-top: 100px;\n  .excel-upload-input &#123;\n    display: none;\n    z-index: -9999;\n  &#125;\n  .btn-upload,\n  .drop &#123;\n    border: 1px dashed #bbb;\n    width: 350px;\n    height: 160px;\n    text-align: center;\n    line-height: 160px;\n  &#125;\n  .drop &#123;\n    line-height: 60px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    color: #bbb;\n    i &#123;\n      font-size: 60px;\n      display: block;\n    &#125;\n  &#125;\n&#125;\n&lt;&#x2F;style&gt;\n</code></pre></li>\n</ol>\n<h2 id=\"7-06：业务落地：文件选择之后的数据解析处理\"><a href=\"#7-06：业务落地：文件选择之后的数据解析处理\" class=\"headerlink\" title=\"7-06：业务落地：文件选择之后的数据解析处理\"></a>7-06：业务落地：文件选择之后的数据解析处理</h2><p>那么接下来我们来处理整个业务中最核心的一块内容 <strong>选中文件之后，解析 <code>excel</code> 数据</strong> </p>\n<p>解析的方式根据我们的导入形式的不同也可以分为两种：</p>\n<ol>\n<li>文件选择（选择隐藏域）导入</li>\n<li>文件拖拽导入</li>\n</ol>\n<p>那么这一小节，我们先来处理第一种。</p>\n<p>处理之前我们需要先来做一件事情：</p>\n<ol>\n<li><p>解析 <code>excel</code> 数据我们需要使用 <a href=\"https://www.npmjs.com/package/xlsx\">xlsx</a> ，所以我们需要先下载它</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm i xlsx@0.17.0</code></pre></li>\n</ol>\n<p> <a href=\"https://www.npmjs.com/package/xlsx\">xlsx</a> 安装完成之后，接下来我们就可以来去实现对应代码了：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport XLSX from &#39;xlsx&#39;\nimport &#123; defineProps, ref &#125; from &#39;vue&#39;\nimport &#123; getHeaderRow &#125; from &#39;.&#x2F;utils&#39;\n\nconst props &#x3D; defineProps(&#123;\n  &#x2F;&#x2F; 上传前回调\n  beforeUpload: Function,\n  &#x2F;&#x2F; 成功回调\n  onSuccess: Function\n&#125;)\n\n&#x2F;**\n * 点击上传触发\n *&#x2F;\nconst loading &#x3D; ref(false)\nconst excelUploadInput &#x3D; ref(null)\nconst handleUpload &#x3D; () &#x3D;&gt; &#123;\n  excelUploadInput.value.click()\n&#125;\nconst handleChange &#x3D; e &#x3D;&gt; &#123;\n  const files &#x3D; e.target.files\n  const rawFile &#x3D; files[0] &#x2F;&#x2F; only use files[0]\n  if (!rawFile) return\n  upload(rawFile)\n&#125;\n\n&#x2F;**\n * 触发上传事件\n *&#x2F;\nconst upload &#x3D; rawFile &#x3D;&gt; &#123;\n  excelUploadInput.value.value &#x3D; null\n  &#x2F;&#x2F; 如果没有指定上传前回调的话\n  if (!props.beforeUpload) &#123;\n    readerData(rawFile)\n    return\n  &#125;\n  &#x2F;&#x2F; 如果指定了上传前回调，那么只有返回 true 才会执行后续操作\n  const before &#x3D; props.beforeUpload(rawFile)\n  if (before) &#123;\n    readerData(rawFile)\n  &#125;\n&#125;\n\n&#x2F;**\n * 读取数据（异步）\n *&#x2F;\nconst readerData &#x3D; rawFile &#x3D;&gt; &#123;\n  loading.value &#x3D; true\n  return new Promise((resolve, reject) &#x3D;&gt; &#123;\n    &#x2F;&#x2F; https:&#x2F;&#x2F;developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;Web&#x2F;API&#x2F;FileReader\n    const reader &#x3D; new FileReader()\n    &#x2F;&#x2F; 该事件在读取操作完成时触发\n    &#x2F;&#x2F; https:&#x2F;&#x2F;developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;Web&#x2F;API&#x2F;FileReader&#x2F;onload\n    reader.onload &#x3D; e &#x3D;&gt; &#123;\n      &#x2F;&#x2F; 1. 获取解析到的数据\n      const data &#x3D; e.target.result\n      &#x2F;&#x2F; 2. 利用 XLSX 对数据进行解析\n      const workbook &#x3D; XLSX.read(data, &#123; type: &#39;array&#39; &#125;)\n      &#x2F;&#x2F; 3. 获取第一张表格(工作簿)名称\n      const firstSheetName &#x3D; workbook.SheetNames[0]\n      &#x2F;&#x2F; 4. 只读取 Sheet1（第一张表格）的数据\n      const worksheet &#x3D; workbook.Sheets[firstSheetName]\n      &#x2F;&#x2F; 5. 解析数据表头\n      const header &#x3D; getHeaderRow(worksheet)\n      &#x2F;&#x2F; 6. 解析数据体\n      const results &#x3D; XLSX.utils.sheet_to_json(worksheet)\n      &#x2F;&#x2F; 7. 传入解析之后的数据\n      generateData(&#123; header, results &#125;)\n      &#x2F;&#x2F; 8. loading 处理\n      loading.value &#x3D; false\n      &#x2F;&#x2F; 9. 异步完成\n      resolve()\n    &#125;\n    &#x2F;&#x2F; 启动读取指定的 Blob 或 File 内容\n    reader.readAsArrayBuffer(rawFile)\n  &#125;)\n&#125;\n\n&#x2F;**\n * 根据导入内容，生成数据\n *&#x2F;\nconst generateData &#x3D; excelData &#x3D;&gt; &#123;\n  props.onSuccess &amp;&amp; props.onSuccess(excelData)\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n\n\n<p><code>getHeaderRow</code> 为 <code>xlsx</code> 解析表头数据的通用方法，直接使用即可</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import XLSX from &#39;xlsx&#39;\n&#x2F;**\n * 获取表头（通用方式）\n *&#x2F;\nexport const getHeaderRow &#x3D; sheet &#x3D;&gt; &#123;\n  const headers &#x3D; []\n  const range &#x3D; XLSX.utils.decode_range(sheet[&#39;!ref&#39;])\n  let C\n  const R &#x3D; range.s.r\n  &#x2F;* start in the first row *&#x2F;\n  for (C &#x3D; range.s.c; C &lt;&#x3D; range.e.c; ++C) &#123;\n    &#x2F;* walk every column in the range *&#x2F;\n    const cell &#x3D; sheet[XLSX.utils.encode_cell(&#123; c: C, r: R &#125;)]\n    &#x2F;* find the cell in the first row *&#x2F;\n    let hdr &#x3D; &#39;UNKNOWN &#39; + C &#x2F;&#x2F; &lt;-- replace with your desired default\n    if (cell &amp;&amp; cell.t) hdr &#x3D; XLSX.utils.format_cell(cell)\n    headers.push(hdr)\n  &#125;\n  return headers\n&#125;\n</code></pre>\n\n<p>在 <code>import</code> 组件中传入 <code>onSuccess</code> 事件，获取解析成功之后的 <code>excel</code> 数据</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;upload-excel :onSuccess&#x3D;&quot;onSuccess&quot;&gt;&lt;&#x2F;upload-excel&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport UploadExcel from &#39;@&#x2F;components&#x2F;UploadExcel&#39;\n\n&#x2F;**\n * 数据解析成功之后的回调\n *&#x2F;\nconst onSuccess &#x3D; excelData &#x3D;&gt; &#123;\n  console.log(excelData)\n&#125;\n&lt;&#x2F;script&gt;、\n</code></pre>\n\n\n\n<h2 id=\"7-07：业务落地：文件拖入之后的数据解析处理\"><a href=\"#7-07：业务落地：文件拖入之后的数据解析处理\" class=\"headerlink\" title=\"7-07：业务落地：文件拖入之后的数据解析处理\"></a>7-07：业务落地：文件拖入之后的数据解析处理</h2><p>想要了解 <strong>文件拖入</strong>，那么我们就必须要先能够了解 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_Drag_and_Drop_API\">HTML_Drag_and_Drop（HTML 拖放 API）</a> 事件，我们这里主要使用到其中三个事件：</p>\n<ol>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/drop_event\">drop (en-US)</a>：当元素或选中的文本在可释放目标上被释放时触发</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/dragover_event\">dragover (en-US)</a>：当元素或选中的文本被拖到一个可释放目标上时触发</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/dragenter_event\">dragenter (en-US)</a>：当拖拽元素或选中的文本到一个可释放目标时触发</li>\n</ol>\n<p>那么明确好了这三个事件之后，我们就可以实现对应的拖入代码逻辑了</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;script setup&gt;\n...\nimport &#123; getHeaderRow, isExcel &#125; from &#39;.&#x2F;utils&#39;\nimport &#123; ElMessage &#125; from &#39;element-plus&#39;\n\n...\n&#x2F;**\n * 拖拽文本释放时触发\n *&#x2F;\nconst handleDrop &#x3D; e &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 上传中跳过\n  if (loading.value) return\n  const files &#x3D; e.dataTransfer.files\n  if (files.length !&#x3D;&#x3D; 1) &#123;\n    ElMessage.error(&#39;必须要有一个文件&#39;)\n    return\n  &#125;\n  const rawFile &#x3D; files[0]\n  if (!isExcel(rawFile)) &#123;\n    ElMessage.error(&#39;文件必须是 .xlsx, .xls, .csv 格式&#39;)\n    return false\n  &#125;\n  &#x2F;&#x2F; 触发上传事件\n  upload(rawFile)\n&#125;\n\n&#x2F;**\n * 拖拽悬停时触发\n *&#x2F;\nconst handleDragover &#x3D; e &#x3D;&gt; &#123;\n  &#x2F;&#x2F; https:&#x2F;&#x2F;developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;Web&#x2F;API&#x2F;DataTransfer&#x2F;dropEffect\n  &#x2F;&#x2F; 在新位置生成源项的副本\n  e.dataTransfer.dropEffect &#x3D; &#39;copy&#39;\n&#125;\n\n。。。\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>在 <code>utils</code> 中生成 <code>isExcel</code> 方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export const isExcel &#x3D; file &#x3D;&gt; &#123;\n  return &#x2F;\\.(xlsx|xls|csv)$&#x2F;.test(file.name)\n&#125;</code></pre>\n\n\n\n<h2 id=\"7-08：业务落地：传递解析后的-excel-数据\"><a href=\"#7-08：业务落地：传递解析后的-excel-数据\" class=\"headerlink\" title=\"7-08：业务落地：传递解析后的 excel 数据\"></a>7-08：业务落地：传递解析后的 excel 数据</h2><p>那么到现在我们已经处理好了 <code>excel</code> 的数据解析操作。</p>\n<p>接下来就可以实现对应的数据上传，完成 <code>excel</code> 导入功能了</p>\n<ol>\n<li><p>定义 <code>api/user-manage</code> 上传接口</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 批量导入\n *&#x2F;\nexport const userBatchImport &#x3D; (data) &#x3D;&gt; &#123;\n  return request(&#123;\n    url: &#39;&#x2F;user-manage&#x2F;batch&#x2F;import&#39;,\n    method: &#39;POST&#39;,\n    data\n  &#125;)\n&#125;</code></pre>\n</li>\n<li><p>在 <code>onSuccess</code> 中调用接口上传数据，但是此处大家要注意两点内容：</p>\n<ol>\n<li><code>header</code> 头不需要上传</li>\n<li><code>results</code> 中 <code>key</code> 为中文，我们必须要按照接口要求进行上传</li>\n</ol>\n</li>\n<li><p>所以我们需要处理 <code>results</code> 中的数据结构</p>\n</li>\n<li><p>创建 <code>import/utils</code> 文件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 导入数据对应表\n *&#x2F;\nexport const USER_RELATIONS &#x3D; &#123;\n  姓名: &#39;username&#39;,\n  联系方式: &#39;mobile&#39;,\n  角色: &#39;role&#39;,\n  开通时间: &#39;openTime&#39;\n&#125;\n</code></pre>\n</li>\n<li><p>创建数据解析方法，生成新数组</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 筛选数据\n *&#x2F;\nconst generateData &#x3D; results &#x3D;&gt; &#123;\n  const arr &#x3D; []\n  results.forEach(item &#x3D;&gt; &#123;\n    const userInfo &#x3D; &#123;&#125;\n    Object.keys(item).forEach(key &#x3D;&gt; &#123;\n      userInfo[USER_RELATIONS[key]] &#x3D; item[key]\n    &#125;)\n    arr.push(userInfo)\n  &#125;)\n  return arr\n&#125;</code></pre>\n</li>\n<li><p>完成数据上传即可</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 数据解析成功之后的回调\n *&#x2F;\nconst onSuccess &#x3D; async (&#123; header, results &#125;) &#x3D;&gt; &#123;\n  const updateData &#x3D; generateData(results)\n  await userBatchImport(updateData)\n  ElMessage.success(&#123;\n    message: results.length + i18n.t(&#39;msg.excel.importSuccess&#39;),\n    type: &#39;success&#39;\n  &#125;)\n  router.push(&#39;&#x2F;user&#x2F;manage&#39;)\n&#125;</code></pre></li>\n</ol>\n<h2 id=\"7-09：业务落地：处理剩余-bug\"><a href=\"#7-09：业务落地：处理剩余-bug\" class=\"headerlink\" title=\"7-09：业务落地：处理剩余 bug\"></a>7-09：业务落地：处理剩余 bug</h2><p>截止到目前整个 <code>excel</code> 上传我们就已经处理完成了，只不过目前还存在两个小 bug 需要处理：</p>\n<ol>\n<li>上传之后的时间解析错误</li>\n<li>返回用户列表之后，数据不会自动刷新</li>\n</ol>\n<p>那么这一小节我们就针对这两个问题进行分别处理</p>\n<p><strong>上传之后的时间解析错误：</strong></p>\n<p>导致该问题出现的原因是因为 <strong>excel 导入解析时间会出现错误，</strong> 处理的方案也很简单，是一个固定方案，我们只需要进行固定的时间解析处理即可：</p>\n<ol>\n<li><p>在 <code>import/utils</code> 中新增事件处理方法（固定方式直接使用即可）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 解析 excel 导入的时间格式\n *&#x2F;\nexport const formatDate &#x3D; (numb) &#x3D;&gt; &#123;\n  const time &#x3D; new Date((numb - 1) * 24 * 3600000 + 1)\n  time.setYear(time.getFullYear() - 70)\n  const year &#x3D; time.getFullYear() + &#39;&#39;\n  const month &#x3D; time.getMonth() + 1 + &#39;&#39;\n  const date &#x3D; time.getDate() - 1 + &#39;&#39;\n  return (\n    year +\n    &#39;-&#39; +\n    (month &lt; 10 ? &#39;0&#39; + month : month) +\n    &#39;-&#39; +\n    (date &lt; 10 ? &#39;0&#39; + date : date)\n  )\n&#125;\n</code></pre>\n</li>\n<li><p>在 <code>generateData</code> 中针对 <code>openTime</code> 进行单独处理</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 筛选数据\n *&#x2F;\nconst generateData &#x3D; results &#x3D;&gt; &#123;\n  ...\n    Object.keys(item).forEach(key &#x3D;&gt; &#123;\n      if (USER_RELATIONS[key] &#x3D;&#x3D;&#x3D; &#39;openTime&#39;) &#123;\n        userInfo[USER_RELATIONS[key]] &#x3D; formatDate(item[key])\n        return\n      &#125;\n      userInfo[USER_RELATIONS[key]] &#x3D; item[key]\n    &#125;)\n    ...\n  &#125;)\n  return arr\n&#125;</code></pre></li>\n</ol>\n<p><strong>返回用户列表之后，数据不会自动刷新：</strong></p>\n<p>出现该问题的原因是因为：**<code>appmain</code> 中使用 <code>keepAlive</code> 进行了组件缓存**。</p>\n<p>解决的方案也很简单，只需要：<strong>监听 <a href=\"https://v3.cn.vuejs.org/api/options-lifecycle-hooks.html#activated\">onActivated</a> 事件，重新获取数据即可</strong> </p>\n<p>在 <code>user-manage</code> 中：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; ref, onActivated &#125; from &#39;vue&#39;\n\n&#x2F;&#x2F; 处理导入用户后数据不重新加载的问题\nonActivated(getListData)</code></pre>\n\n\n\n<h2 id=\"7-10：excel-导入功能总结\"><a href=\"#7-10：excel-导入功能总结\" class=\"headerlink\" title=\"7-10：excel 导入功能总结\"></a>7-10：excel 导入功能总结</h2><p>那么到这里我们的 <code>excel</code> 导入功能我们就已经实现完成了，再来回顾一下我们整体的流程：</p>\n<ol>\n<li>创建 <code>excel</code> 导入页面</li>\n<li>点击 <code>excel</code> 导入按钮，进入该页面</li>\n<li>该页面提供两种文件导入形式</li>\n<li>选中文件之后，解析 <code>excel</code> 数据（核心）</li>\n<li>上传解析之后的数据</li>\n<li>返回 员工管理（用户列表） 页面</li>\n</ol>\n<p>游离于这些流程之外的，还包括额外的两个小 bug 的处理，特别是 <strong><code>excel</code> 的时间格式问题，</strong> 大家要格外注意，因为这是一个必然会出现的错误，当然处理方案也是固定的。</p>\n<h2 id=\"7-11：辅助业务之用户删除\"><a href=\"#7-11：辅助业务之用户删除\" class=\"headerlink\" title=\"7-11：辅助业务之用户删除\"></a>7-11：辅助业务之用户删除</h2><p>完成了 <code>excel</code> 的用户导入之后，那么我们肯定会产生很多的无用数据，所以说接下来我们来完成一个辅助功能：<strong>删除用户（希望大家都可以在完成 <code>excel</code> 导入功能之后，删除掉无用数据，以方便其他的同学进行功能测试）</strong></p>\n<p>删除用户的功能比较简单，我们只需要 <strong>调用对应的接口即可</strong></p>\n<ol>\n<li><p>在 <code>api/user-manage</code> 中指定删除接口</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 删除指定数据\n *&#x2F;\nexport const deleteUser &#x3D; (id) &#x3D;&gt; &#123;\n  return request(&#123;\n    url: &#96;&#x2F;user-manage&#x2F;detele&#x2F;$&#123;id&#125;&#96;\n  &#125;)\n&#125;</code></pre>\n</li>\n<li><p>在 <code>views/user-manage</code> 中调用删除接口接口</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;el-button type&#x3D;&quot;danger&quot; size&#x3D;&quot;mini&quot; @click&#x3D;&quot;onRemoveClick(row)&quot;&gt;&#123;&#123;\n              $t(&#39;msg.excel.remove&#39;)\n            &#125;&#125;&lt;&#x2F;el-button&gt;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 删除按钮点击事件\n *&#x2F;\nconst i18n &#x3D; useI18n()\nconst onRemoveClick &#x3D; row &#x3D;&gt; &#123;\n  ElMessageBox.confirm(\n    i18n.t(&#39;msg.excel.dialogTitle1&#39;) +\n      row.username +\n      i18n.t(&#39;msg.excel.dialogTitle2&#39;),\n    &#123;\n      type: &#39;warning&#39;\n    &#125;\n  ).then(async () &#x3D;&gt; &#123;\n    await deleteUser(row._id)\n    ElMessage.success(i18n.t(&#39;msg.excel.removeSuccess&#39;))\n    &#x2F;&#x2F; 重新渲染数据\n    getListData()\n  &#125;)\n&#125;</code></pre></li>\n</ol>\n<h2 id=\"7-12：excel-导出原理与实现分析\"><a href=\"#7-12：excel-导出原理与实现分析\" class=\"headerlink\" title=\"7-12：excel 导出原理与实现分析\"></a>7-12：excel 导出原理与实现分析</h2><p>对于 <code>excel</code> 导出而言我们还是先来分析一下它的业务逻辑：</p>\n<ol>\n<li>点击 <code>excel</code> 导出按钮</li>\n<li>展示 <code>dialog</code> 弹出层</li>\n<li>确定导出的 <code>excel</code> 文件名称</li>\n<li>点击导出按钮</li>\n<li>获取 <strong>所有用户列表数据</strong></li>\n<li>将 <code>json</code> 结构数据转化为 <code>excel</code> 数据，并下载</li>\n</ol>\n<p>有了 <code>excel</code> 导入的经验之后，再来看这样的一套业务逻辑，相信大家应该可以直接根据这样的一套业务逻辑得出 <code>excel</code> 导出的核心原理了：<strong>将 <code>json</code> 结构数据转化为 <code>excel</code> 数据，并下载</strong></p>\n<p>那么我们对应的实现方案也可以直接得出了：</p>\n<ol>\n<li>创建 <code>excel</code> 导出弹出层</li>\n<li>处理弹出层相关的业务</li>\n<li>点击导出按钮，将 <code>json</code> 结构数据转化为 <code>excel</code> 数据，并下载（核心）</li>\n</ol>\n<h2 id=\"7-13：业务落地：Export2Excel-组件\"><a href=\"#7-13：业务落地：Export2Excel-组件\" class=\"headerlink\" title=\"7-13：业务落地：Export2Excel 组件\"></a>7-13：业务落地：Export2Excel 组件</h2><p>那么首先我们先去创建 <code>excel</code> 弹出层组件 <code>Export2Excel </code></p>\n<ol>\n<li><p>创建 <code>views/user-manage/components/Export2Excel </code></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;el-dialog\n    :title&#x3D;&quot;$t(&#39;msg.excel.title&#39;)&quot;\n    :model-value&#x3D;&quot;modelValue&quot;\n    @close&#x3D;&quot;closed&quot;\n    width&#x3D;&quot;30%&quot;\n  &gt;\n    &lt;el-input\n      :placeholder&#x3D;&quot;$t(&#39;msg.excel.placeholder&#39;)&quot;\n    &gt;&lt;&#x2F;el-input&gt;\n    &lt;template #footer&gt;\n      &lt;span class&#x3D;&quot;dialog-footer&quot;&gt;\n        &lt;el-button @click&#x3D;&quot;closed&quot;&gt;&#123;&#123; $t(&#39;msg.excel.close&#39;) &#125;&#125;&lt;&#x2F;el-button&gt;\n        &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;onConfirm&quot;&gt;&#123;&#123;\n          $t(&#39;msg.excel.confirm&#39;)\n        &#125;&#125;&lt;&#x2F;el-button&gt;\n      &lt;&#x2F;span&gt;\n    &lt;&#x2F;template&gt;\n  &lt;&#x2F;el-dialog&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport &#123; defineProps, defineEmits &#125; from &#39;vue&#39;\n\ndefineProps(&#123;\n  modelValue: &#123;\n    type: Boolean,\n    required: true\n  &#125;\n&#125;)\nconst emits &#x3D; defineEmits([&#39;update:modelValue&#39;])\n\n&#x2F;**\n * 导出按钮点击事件\n *&#x2F;\nconst onConfirm &#x3D; async () &#x3D;&gt; &#123;\n  closed()\n&#125;\n\n&#x2F;**\n * 关闭\n *&#x2F;\nconst closed &#x3D; () &#x3D;&gt; &#123;\n  emits(&#39;update:modelValue&#39;, false)\n&#125;\n&lt;&#x2F;script&gt;\n</code></pre>\n</li>\n<li><p>在 <code>user-manage</code> 中进行导入 <code>dialog</code> 组件</p>\n<ol>\n<li><p>指定 <code>excel</code>按钮 点击事件</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;el-button type&#x3D;&quot;success&quot; @click&#x3D;&quot;onToExcelClick&quot;&gt;\n\t&#123;&#123; $t(&#39;msg.excel.exportExcel&#39;) &#125;&#125;\n&lt;&#x2F;el-button&gt;</code></pre>\n</li>\n<li><p>导入 <code>ExportToExcel</code> 组件</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;export-to-excel v-model&#x3D;&quot;exportToExcelVisible&quot;&gt;&lt;&#x2F;export-to-excel&gt;\nimport ExportToExcel from &#39;.&#x2F;components&#x2F;Export2Excel.vue&#39;</code></pre>\n</li>\n<li><p>点击事件处理函数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * excel 导出点击事件\n *&#x2F;\nconst exportToExcelVisible &#x3D; ref(false)\nconst onToExcelClick &#x3D; () &#x3D;&gt; &#123;\n  exportToExcelVisible.value &#x3D; true\n&#125;</code></pre></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"7-14：业务落地：导出前置业务处理\"><a href=\"#7-14：业务落地：导出前置业务处理\" class=\"headerlink\" title=\"7-14：业务落地：导出前置业务处理\"></a>7-14：业务落地：导出前置业务处理</h2><p>那么这一小节我们来处理一些实现 <code>excel</code> 导出时的前置任务，具体有：</p>\n<ol>\n<li>指定 <code>input</code> 默认导出文件名称</li>\n<li>定义 <strong>获取全部用户</strong> 列表接口，并调用</li>\n</ol>\n<p>那么下面我们先来处理第一步：<strong>指定 <code>input</code> 默认导出文件名称</strong></p>\n<ol>\n<li><p>指定 <code>input</code> 的双向绑定</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;el-input\n      v-model&#x3D;&quot;excelName&quot;\n      :placeholder&#x3D;&quot;$t(&#39;msg.excel.placeholder&#39;)&quot;\n    &gt;&lt;&#x2F;el-input&gt;</code></pre>\n</li>\n<li><p>指定默认文件名</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const i18n &#x3D; useI18n()\nlet exportDefaultName &#x3D; i18n.t(&#39;msg.excel.defaultName&#39;)\nconst excelName &#x3D; ref(&#39;&#39;)\nexcelName.value &#x3D; exportDefaultName\nwatchSwitchLang(() &#x3D;&gt; &#123;\n  exportDefaultName &#x3D; i18n.t(&#39;msg.excel.defaultName&#39;)\n  excelName.value &#x3D; exportDefaultName\n&#125;)</code></pre></li>\n</ol>\n<p><strong>定义获取全部用户列表接口，并调用：</strong></p>\n<ol>\n<li><p>在 <code>user-manage</code> 中定义获取全部数据接口</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 获取所有用户列表数据\n *&#x2F;\nexport const getUserManageAllList &#x3D; () &#x3D;&gt; &#123;\n  return request(&#123;\n    url: &#39;&#x2F;user-manage&#x2F;all-list&#39;\n  &#125;)\n&#125;</code></pre>\n</li>\n<li><p>调用接口数据，并指定 <code>loading</code></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;onConfirm&quot; :loading&#x3D;&quot;loading&quot;&gt;&#123;&#123;\n\t$t(&#39;msg.excel.confirm&#39;)\n&#125;&#125;&lt;&#x2F;el-button&gt;</code></pre>\n\n\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; getUserManageAllList &#125; from &#39;@&#x2F;api&#x2F;user-manage&#39;\n\n&#x2F;**\n * 导出按钮点击事件\n *&#x2F;\nconst loading &#x3D; ref(false)\nconst onConfirm &#x3D; async () &#x3D;&gt; &#123;\n  loading.value &#x3D; true\n  const allUser &#x3D; (await getUserManageAllList()).list\n\n  closed()\n&#125;\n\n&#x2F;**\n * 关闭\n *&#x2F;\nconst closed &#x3D; () &#x3D;&gt; &#123;\n  loading.value &#x3D; false\n  emits(&#39;update:modelValue&#39;, false)\n&#125;</code></pre></li>\n</ol>\n<h2 id=\"7-15：业务落地：实现-excel-导出逻辑\"><a href=\"#7-15：业务落地：实现-excel-导出逻辑\" class=\"headerlink\" title=\"7-15：业务落地：实现 excel 导出逻辑\"></a>7-15：业务落地：实现 excel 导出逻辑</h2><p>那么万事俱备，到此时我们就可以来实现整个业务逻辑的最后步骤：</p>\n<ol>\n<li>将 <code>json</code> 结构数据转化为 <code>excel</code> 数据</li>\n<li>下载对应的 <code>excel</code> 数据</li>\n</ol>\n<p>对于这两步的逻辑而言，最复杂的莫过于 <strong>将 <code>json</code> 结构数据转化为 <code>excel</code> 数据</strong> 这一步的功能，不过万幸的是对于该操作的逻辑是 <strong>通用处理逻辑</strong>，搜索 <strong>Export2Excel</strong> 我们可以得到巨多的解决方案，所以此处我们 <strong>没有必要</strong> 手写对应的转换逻辑</p>\n<p>该转化逻辑我已经把它放置到 <code>课程资料/Export2Excel.js</code> 文件中，大家可以直接把该代码复制到 <code>utils</code> 文件夹下</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>PS：如果大家想要了解该代码的话，那么对应的业务逻辑我们也已经全部标出，大家可以直接查看</p></blockquote>\n<p>那么有了 <code>Export2Excel.js</code> 的代码之后 ，接下来我们还需要导入两个依赖库：</p>\n<ol>\n<li><a href=\"https://www.npmjs.com/package/xlsx\">xlsx</a> （已下载）：<code>excel</code> 解析器和编译器</li>\n<li><a href=\"https://www.npmjs.com/package/file-saver\">file-saver</a>：文件下载工具，通过 <code>npm i file-saver@2.0.5</code> 下载</li>\n</ol>\n<p>那么一切准备就绪，我们去实现 <code>excel</code> 导出功能：</p>\n<ol>\n<li><p>动态导入 <code>Export2Excel.js</code> </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 导入工具包\n  const excel &#x3D; await import(&#39;@&#x2F;utils&#x2F;Export2Excel&#39;)</code></pre>\n</li>\n<li><p>因为从服务端获取到的为 <code>json 数组对象</code> 结构，但是导出时的数据需要为 <strong>二维数组</strong>，所以我们需要有一个方法来把 <strong><code>json</code> 结构转化为 二维数组</strong></p>\n</li>\n<li><p>创建转化方法</p>\n<ol>\n<li><p>创建 <code>views/user-manage/components/Export2ExcelConstants.js</code> 中英文对照表</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 导入数据对应表\n *&#x2F;\nexport const USER_RELATIONS &#x3D; &#123;\n  姓名: &#39;username&#39;,\n  联系方式: &#39;mobile&#39;,\n  角色: &#39;role&#39;,\n  开通时间: &#39;openTime&#39;\n&#125;</code></pre>\n</li>\n<li><p>创建数据解析方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 该方法负责将数组转化成二维数组\nconst formatJson &#x3D; (headers, rows) &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 首先遍历数组\n  &#x2F;&#x2F; [&#123; username: &#39;张三&#39;&#125;,&#123;&#125;,&#123;&#125;]  &#x3D;&gt; [[’张三&#39;],[],[]]\n  return rows.map(item &#x3D;&gt; &#123;\n    return Object.keys(headers).map(key &#x3D;&gt; &#123;\n      &#x2F;&#x2F; 角色特殊处理\n      if (headers[key] &#x3D;&#x3D;&#x3D; &#39;role&#39;) &#123;\n        const roles &#x3D; item[headers[key]]\n\n        return JSON.stringify(roles.map(role &#x3D;&gt; role.title))\n      &#125;\n      return item[headers[key]]\n    &#125;)\n  &#125;)\n&#125;</code></pre></li>\n</ol>\n</li>\n<li><p>调用该方法，获取导出的二维数组数据</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; USER_RELATIONS &#125; from &#39;.&#x2F;Export2ExcelConstants&#39;\n\nconst data &#x3D; formatJson(USER_RELATIONS, allUser)</code></pre>\n</li>\n<li><p>调用 <code>export_json_to_excel</code> 方法，完成 <code>excel</code> 导出</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">excel.export_json_to_excel(&#123;\n  &#x2F;&#x2F; excel 表头\n  header: Object.keys(USER_RELATIONS),\n  &#x2F;&#x2F; excel 数据（二维数组结构）\n  data,\n  &#x2F;&#x2F; 文件名称\n  filename: excelName.value || exportDefaultName,\n  &#x2F;&#x2F; 是否自动列宽\n  autoWidth: true,\n  &#x2F;&#x2F; 文件类型\n  bookType: &#39;xlsx&#39;\n&#125;)</code></pre></li>\n</ol>\n<h2 id=\"7-16：业务落地：excel-导出时的时间逻辑处理\"><a href=\"#7-16：业务落地：excel-导出时的时间逻辑处理\" class=\"headerlink\" title=\"7-16：业务落地：excel 导出时的时间逻辑处理\"></a>7-16：业务落地：excel 导出时的时间逻辑处理</h2><p>因为服务端返回的 <code>openTime</code> 格式问题，所以我们需要在 <code>excel</code> 导出时对时间格式进行单独处理</p>\n<ol start=\"2\">\n<li><p>导入时间格式处理工具</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; dateFormat &#125; from &#39;@&#x2F;filters&#39;</code></pre>\n</li>\n<li><p>对时间格式进行单独处理</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 时间特殊处理\n      if (headers[key] &#x3D;&#x3D;&#x3D; &#39;openTime&#39;) &#123;\n        return dateFormat(item[headers[key]])\n      &#125;</code></pre></li>\n</ol>\n<h2 id=\"7-17：excel-导出功能总结\"><a href=\"#7-17：excel-导出功能总结\" class=\"headerlink\" title=\"7-17：excel  导出功能总结\"></a>7-17：excel  导出功能总结</h2><p>那么到这里我们的整个 <code>excel</code> 导出就算是实现完成了。</p>\n<p>整个 <code>excel</code> 导出遵循以下业务逻辑：</p>\n<ol>\n<li>创建 <code>excel</code> 导出弹出层</li>\n<li>处理弹出层相关的业务</li>\n<li>点击导出按钮，将 <code>json</code> 结构数据转化为 <code>excel</code> 数据<ol>\n<li><code>json</code> 数据转化为 <strong>二维数组</strong></li>\n<li>时间处理</li>\n<li>角色数组处理</li>\n</ol>\n</li>\n<li>下载 <code>excel</code> 数据</li>\n</ol>\n<p>其中 <strong>将 <code>json</code> 结构数据转化为 <code>excel</code> 数据</strong> 部分因为有通用的实现方式，所以我们没有必要进行手动的代码书写，毕竟 <strong>“程序猿是最懒的群体嘛”</strong></p>\n<p>但是如果大家想要了解一下这个业务逻辑中所进行的事情，我们也对代码进行了完整的备注，大家可以直接进行查看</p>\n<h2 id=\"7-18：局部打印详情原理与实现分析\"><a href=\"#7-18：局部打印详情原理与实现分析\" class=\"headerlink\" title=\"7-18：局部打印详情原理与实现分析\"></a>7-18：局部打印详情原理与实现分析</h2><p>那么接下来就是我们本章中最后一个功能 <strong>员工详情打印</strong></p>\n<p>整个员工详情的打印逻辑分为两部分：</p>\n<ol>\n<li>以表格的形式展示员工详情</li>\n<li>打印详情表格</li>\n</ol>\n<p>其中 <strong>以表格的形式展示员工详情</strong> 部分我们需要使用到 <a href=\"https://element-plus.org/zh-CN/component/descriptions.html\">el-descriptions</a> 组件，并且想要利用该组件实现详情的表格效果还需要一些小的技巧，这个具体的我们到时候再去说</p>\n<p>而 <strong>打印详情表格</strong> 的功能就是建立在展示详情页面之上的</p>\n<p>大家知道，当我们在浏览器右键时，其实可以直接看到对应的 <strong>打印</strong> 选项，但是这个打印选项是直接打印整个页面，不能指定打印页面中的某一部分的。</p>\n<p>所以说 <strong>打印是浏览器本身的功能</strong>，但是这个功能存在一定的小缺陷，那就是 <strong>只能打印整个页面</strong></p>\n<p>而我们想要实现 <strong>详情打印</strong>，那么就需要在这个功能的基础之上做到指定打印具体的某一块视图，而这个功能已经有一个第三方的包 <a href=\"https://github.com/Power-kxLee/vue-print-nb#vue3-version\">vue-print-nb</a> 帮助我们进行了实现，所以我们只需要使用这个包即可完成打印功能</p>\n<p>那么明确好了原理之后，接下来步骤就呼之欲出了：</p>\n<ol>\n<li>获取员工详情数据</li>\n<li>在员工详情页面，渲染详情数据</li>\n<li>利用  <a href=\"https://github.com/Power-kxLee/vue-print-nb#vue3-version\">vue-print-nb</a> 进行局部打印</li>\n</ol>\n<h2 id=\"7-19：业务落地：获取展示数据\"><a href=\"#7-19：业务落地：获取展示数据\" class=\"headerlink\" title=\"7-19：业务落地：获取展示数据\"></a>7-19：业务落地：获取展示数据</h2><p>首先我们来获取对应的展示数据</p>\n<ol>\n<li><p>在 <code>api/user-manage</code> 中定义获取用户详情接口</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 获取用户详情\n *&#x2F;\nexport const userDetail &#x3D; (id) &#x3D;&gt; &#123;\n  return request(&#123;\n    url: &#96;&#x2F;user-manage&#x2F;detail&#x2F;$&#123;id&#125;&#96;\n  &#125;)\n&#125;</code></pre>\n</li>\n<li><p>在 <code>views/user-info</code> 中根据 <code>id</code> 获取接口详情数据，并进行国际化处理</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport &#123; userDetail &#125; from &#39;@&#x2F;api&#x2F;user-manage&#39;\nimport &#123; watchSwitchLang &#125; from &#39;@&#x2F;utils&#x2F;i18n&#39;\nimport &#123; defineProps, ref &#125; from &#39;vue&#39;\n\nconst props &#x3D; defineProps(&#123;\n  id: &#123;\n    type: String,\n    required: true\n  &#125;\n&#125;)\n\n&#x2F;&#x2F; 数据相关\nconst detailData &#x3D; ref(&#123;&#125;)\nconst getUserDetail &#x3D; async () &#x3D;&gt; &#123;\n  detailData.value &#x3D; await userDetail(props.id)\n&#125;\ngetUserDetail()\n&#x2F;&#x2F; 语言切换\nwatchSwitchLang(getUserDetail)\n&lt;&#x2F;script&gt;</code></pre>\n</li>\n<li><p>因为用户详情可以会以组件的形式进行呈现，所以对于此处我们需要得到的 <code>id</code> ，可以通过 <a href=\"https://next.router.vuejs.org/zh/guide/essentials/passing-props.html#%E5%B8%83%E5%B0%94%E6%A8%A1%E5%BC%8F\">vue-router Props 传参</a> 的形式进行</p>\n</li>\n<li><p>指定路由表</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#123;\n        path: &#39;&#x2F;user&#x2F;info&#x2F;:id&#39;,\n        name: &#39;userInfo&#39;,\n        component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;user-info&#x2F;index&#39;),\n        props: true,\n        meta: &#123;\n          title: &#39;userInfo&#39;\n        &#125;\n      &#125;</code></pre>\n</li>\n<li><p>在 <code>views/user-manage</code> 中传递用户 <code>id</code></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;el-button\n    type&#x3D;&quot;primary&quot;\n    size&#x3D;&quot;mini&quot;\n    @click&#x3D;&quot;onShowClick(row._id)&quot;\n&gt;\n\t&#123;&#123; $t(&#39;msg.excel.show&#39;) &#125;&#125;\n&lt;&#x2F;el-button&gt;\n\n&#x2F;**\n * 查看按钮点击事件\n *&#x2F;\nconst onShowClick &#x3D; id &#x3D;&gt; &#123;\n  router.push(&#96;&#x2F;user&#x2F;info&#x2F;$&#123;id&#125;&#96;)\n&#125;</code></pre></li>\n</ol>\n<h2 id=\"7-20：业务落地：渲染详情结构\"><a href=\"#7-20：业务落地：渲染详情结构\" class=\"headerlink\" title=\"7-20：业务落地：渲染详情结构\"></a>7-20：业务落地：渲染详情结构</h2><p>渲染用户详情结构我们需要借助 <a href=\"https://element-plus.org/zh-CN/component/descriptions.html\">el-descriptions</a> 组件，只不过使用该组件时我们需要一些小的技巧</p>\n<p>因为 <a href=\"https://element-plus.org/zh-CN/component/descriptions.html\">el-descriptions</a> 组件作用为：渲染描述列表。但是我们想要的包含头像的用户详情样式，直接利用一个 <a href=\"https://element-plus.org/zh-CN/component/descriptions.html\">el-descriptions</a> 组件并无法进行渲染，所以此时我们需要对多个 <a href=\"https://element-plus.org/zh-CN/component/descriptions.html\">el-descriptions</a> 组件 与 <code>img</code> 标签进行配合使用</p>\n<img src=\"/post/vue3.2%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/07%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E5%A4%84%E7%90%86/image-20210929233418837.png\" class=\"\" title=\"image-20210929233418837\">\n\n<p>如果得出渲染代码</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;user-info-container&quot;&gt;\n    &lt;el-card class&#x3D;&quot;print-box&quot;&gt;\n      &lt;el-button type&#x3D;&quot;primary&quot;&gt;&#123;&#123; $t(&#39;msg.userInfo.print&#39;) &#125;&#125;&lt;&#x2F;el-button&gt;\n    &lt;&#x2F;el-card&gt;\n    &lt;el-card&gt;\n      &lt;div class&#x3D;&quot;user-info-box&quot;&gt;\n        &lt;!-- 标题 --&gt;\n        &lt;h2 class&#x3D;&quot;title&quot;&gt;&#123;&#123; $t(&#39;msg.userInfo.title&#39;) &#125;&#125;&lt;&#x2F;h2&gt;\n\n        &lt;div class&#x3D;&quot;header&quot;&gt;\n          &lt;!-- 头部渲染表格 --&gt;\n          &lt;el-descriptions :column&#x3D;&quot;2&quot; border&gt;\n            &lt;el-descriptions-item :label&#x3D;&quot;$t(&#39;msg.userInfo.name&#39;)&quot;&gt;&#123;&#123;\n              detailData.username\n            &#125;&#125;&lt;&#x2F;el-descriptions-item&gt;\n            &lt;el-descriptions-item :label&#x3D;&quot;$t(&#39;msg.userInfo.sex&#39;)&quot;&gt;&#123;&#123;\n              detailData.gender\n            &#125;&#125;&lt;&#x2F;el-descriptions-item&gt;\n            &lt;el-descriptions-item :label&#x3D;&quot;$t(&#39;msg.userInfo.nation&#39;)&quot;&gt;&#123;&#123;\n              detailData.nationality\n            &#125;&#125;&lt;&#x2F;el-descriptions-item&gt;\n            &lt;el-descriptions-item :label&#x3D;&quot;$t(&#39;msg.userInfo.mobile&#39;)&quot;&gt;&#123;&#123;\n              detailData.mobile\n            &#125;&#125;&lt;&#x2F;el-descriptions-item&gt;\n            &lt;el-descriptions-item :label&#x3D;&quot;$t(&#39;msg.userInfo.province&#39;)&quot;&gt;&#123;&#123;\n              detailData.province\n            &#125;&#125;&lt;&#x2F;el-descriptions-item&gt;\n            &lt;el-descriptions-item :label&#x3D;&quot;$t(&#39;msg.userInfo.date&#39;)&quot;&gt;&#123;&#123;\n              $filters.dateFilter(detailData.openTime)\n            &#125;&#125;&lt;&#x2F;el-descriptions-item&gt;\n            &lt;el-descriptions-item :label&#x3D;&quot;$t(&#39;msg.userInfo.remark&#39;)&quot; :span&#x3D;&quot;2&quot;&gt;\n              &lt;el-tag\n                class&#x3D;&quot;remark&quot;\n                size&#x3D;&quot;small&quot;\n                v-for&#x3D;&quot;(item, index) in detailData.remark&quot;\n                :key&#x3D;&quot;index&quot;\n                &gt;&#123;&#123; item &#125;&#125;&lt;&#x2F;el-tag\n              &gt;\n            &lt;&#x2F;el-descriptions-item&gt;\n            &lt;el-descriptions-item\n              :label&#x3D;&quot;$t(&#39;msg.userInfo.address&#39;)&quot;\n              :span&#x3D;&quot;2&quot;\n              &gt;&#123;&#123; detailData.address &#125;&#125;&lt;&#x2F;el-descriptions-item\n            &gt;\n          &lt;&#x2F;el-descriptions&gt;\n          &lt;!-- 头像渲染 --&gt;\n          &lt;el-image\n            class&#x3D;&quot;avatar&quot;\n            :src&#x3D;&quot;detailData.avatar&quot;\n            :preview-src-list&#x3D;&quot;[detailData.avatar]&quot;\n          &gt;&lt;&#x2F;el-image&gt;\n        &lt;&#x2F;div&gt;\n        &lt;div class&#x3D;&quot;body&quot;&gt;\n          &lt;!-- 内容渲染表格 --&gt;\n          &lt;el-descriptions direction&#x3D;&quot;vertical&quot; :column&#x3D;&quot;1&quot; border&gt;\n            &lt;el-descriptions-item :label&#x3D;&quot;$t(&#39;msg.userInfo.experience&#39;)&quot;&gt;\n              &lt;ul&gt;\n                &lt;li v-for&#x3D;&quot;(item, index) in detailData.experience&quot; :key&#x3D;&quot;index&quot;&gt;\n                  &lt;span&gt;\n                    &#123;&#123; $filters.dateFilter(item.startTime, &#39;YYYY&#x2F;MM&#39;) &#125;&#125;\n                    ----\n                    &#123;&#123; $filters.dateFilter(item.endTime, &#39;YYYY&#x2F;MM&#39;) &#125;&#125;&lt;&#x2F;span\n                  &gt;\n                  &lt;span&gt;&#123;&#123; item.title &#125;&#125;&lt;&#x2F;span&gt;\n                  &lt;span&gt;&#123;&#123; item.desc &#125;&#125;&lt;&#x2F;span&gt;\n                &lt;&#x2F;li&gt;\n              &lt;&#x2F;ul&gt;\n            &lt;&#x2F;el-descriptions-item&gt;\n            &lt;el-descriptions-item :label&#x3D;&quot;$t(&#39;msg.userInfo.major&#39;)&quot;&gt;\n              &#123;&#123; detailData.major &#125;&#125;\n            &lt;&#x2F;el-descriptions-item&gt;\n            &lt;el-descriptions-item :label&#x3D;&quot;$t(&#39;msg.userInfo.glory&#39;)&quot;&gt;\n              &#123;&#123; detailData.glory &#125;&#125;\n            &lt;&#x2F;el-descriptions-item&gt;\n          &lt;&#x2F;el-descriptions&gt;\n        &lt;&#x2F;div&gt;\n        &lt;!-- 尾部签名 --&gt;\n        &lt;div class&#x3D;&quot;foot&quot;&gt;&#123;&#123; $t(&#39;msg.userInfo.foot&#39;) &#125;&#125;&lt;&#x2F;div&gt;\n      &lt;&#x2F;div&gt;\n    &lt;&#x2F;el-card&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n.print-box &#123;\n  margin-bottom: 20px;\n  text-align: right;\n&#125;\n.user-info-box &#123;\n  width: 1024px;\n  margin: 0 auto;\n  .title &#123;\n    text-align: center;\n    margin-bottom: 18px;\n  &#125;\n  .header &#123;\n    display: flex;\n    ::v-deep .el-descriptions &#123;\n      flex-grow: 1;\n    &#125;\n    .avatar &#123;\n      width: 187px;\n      box-sizing: border-box;\n      padding: 30px 20px;\n      border: 1px solid #ebeef5;\n      border-left: none;\n    &#125;\n    .remark &#123;\n      margin-right: 12px;\n    &#125;\n  &#125;\n  .body &#123;\n    ul &#123;\n      list-style: none;\n      li &#123;\n        span &#123;\n          margin-right: 62px;\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n  .foot &#123;\n    margin-top: 42px;\n    text-align: right;\n  &#125;\n&#125;\n&lt;&#x2F;style&gt;\n</code></pre>\n\n\n\n<h2 id=\"7-21：业务落地：局部打印功能实现\"><a href=\"#7-21：业务落地：局部打印功能实现\" class=\"headerlink\" title=\"7-21：业务落地：局部打印功能实现\"></a>7-21：业务落地：局部打印功能实现</h2><p>局部详情打印功能我们需要借助 <a href=\"https://github.com/Power-kxLee/vue-print-nb#vue3-version\">vue-print-nb</a>，所以首先我们需要下载该插件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm i vue3-print-nb@0.1.4</code></pre>\n\n<p>然后利用该工具完成下载功能：</p>\n<ol>\n<li><p>指定 <code>printLoading</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;el-button type&#x3D;&quot;primary&quot; :loading&#x3D;&quot;printLoading&quot;&gt;&#123;&#123;\n        $t(&#39;msg.userInfo.print&#39;)\n      &#125;&#125;&lt;&#x2F;el-button&gt;\n\n&#x2F;&#x2F; 打印相关\nconst printLoading &#x3D; ref(false)</code></pre>\n</li>\n<li><p>创建打印对象</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const printObj &#x3D; &#123;\n  &#x2F;&#x2F; 打印区域\n  id: &#39;userInfoBox&#39;,\n  &#x2F;&#x2F; 打印标题\n  popTitle: &#39;imooc-vue-element-admin&#39;,\n  &#x2F;&#x2F; 打印前\n  beforeOpenCallback(vue) &#123;\n    printLoading.value &#x3D; true\n  &#125;,\n  &#x2F;&#x2F; 执行打印\n  openCallback(vue) &#123;\n    printLoading.value &#x3D; false\n  &#125;\n&#125;</code></pre>\n</li>\n<li><p>指定打印区域 <code>id</code> 匹配</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;div id&#x3D;&quot;userInfoBox&quot; class&#x3D;&quot;user-info-box&quot;&gt;</code></pre>\n</li>\n<li><p><a href=\"https://github.com/Power-kxLee/vue-print-nb#vue3-version\">vue-print-nb</a> 以指令的形式存在，所以我们需要创建对应指令</p>\n</li>\n<li><p>新建 <code>directives</code> 文件夹，创建 <code>index.js</code></p>\n</li>\n<li><p>写入如下代码</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import print from &#39;vue3-print-nb&#39;\n\nexport default app &#x3D;&gt; &#123;\n  app.use(print)\n&#125;\n</code></pre>\n</li>\n<li><p>在 <code>main.js</code> 中导入该指令</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import installDirective from &#39;@&#x2F;directives&#39;\ninstallDirective(app)</code></pre>\n</li>\n<li><p>将打印指令挂载到 <code>el-button</code> 中</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;el-button type&#x3D;&quot;primary&quot; v-print&#x3D;&quot;printObj&quot; :loading&#x3D;&quot;printLoading&quot;&gt;&#123;&#123;\n      $t(&#39;msg.userInfo.print&#39;)\n    &#125;&#125;&lt;&#x2F;el-button&gt;</code></pre></li>\n</ol>\n<h2 id=\"7-22：局部打印功能总结\"><a href=\"#7-22：局部打印功能总结\" class=\"headerlink\" title=\"7-22：局部打印功能总结\"></a>7-22：局部打印功能总结</h2><p>整个局部打印详情功能，整体的核心逻辑就是这么两块：</p>\n<ol>\n<li>以表格的形式展示员工详情</li>\n<li>打印详情表格</li>\n</ol>\n<p>其中第一部分使用  <a href=\"https://element-plus.org/zh-CN/component/descriptions.html\">el-descriptions</a> 组件配合一些小技巧即可实现</p>\n<p>而局部打印功能则需要借助 <a href=\"https://github.com/Power-kxLee/vue-print-nb#vue3-version\">vue-print-nb</a> 这个第三方库进行实现</p>\n<p>所以整个局部打印功能应该并不算复杂，掌握这两部分即可轻松实现</p>\n<h2 id=\"7-23：总结\"><a href=\"#7-23：总结\" class=\"headerlink\" title=\"7-23：总结\"></a>7-23：总结</h2><p>那么到这里我们整个章节就全部完成了，最后的 <strong>为用户分配角色</strong> 功能需要配合 <strong>角色列表</strong> 进行实现，所以我们需要等到后面进行</p>\n<p>那么整个章节所实现的功能有：</p>\n<ol>\n<li>用户列表分页展示</li>\n<li><code>excel</code> 导入用户</li>\n<li>用户列表导出为 <code>excel</code></li>\n<li>用户详情的表格展示</li>\n<li>用户详情表格打印</li>\n<li>用户删除</li>\n</ol>\n<p>这么六个</p>\n<p>其中比较复杂的应该就是 <strong><code>excel</code> 导入 &amp; 导出</strong> 了，所以针对这两个功能我们花费了最多的篇幅进行讲解</p>\n<p>但是这里有一点大家不要忘记，我们在本章开篇的时候说过，<strong>员工管理</strong> 是 <strong>用户权限中的一个前置！</strong> 比如我们的分配角色功能就需要配合其他的业务实现，那么具体的整个用户权限都包含了哪些内容呢？</p>\n<p>想要知道快来看下一章节吧！</p>\n","text":"第七章：用户权限处理7-01：开篇在处理完成了 个人中心之后， 那么接下来我们就需要来处理 用户 相关的模块了 整个用户相关的模块分为三部分： 员工管理 角色列表 权限列表 这三部分的内容我们会分成两个大章来进行处理。 那么这一大章我们要来处理的就是 员工管理 模块的内容，整个 ...","link":"","photos":[],"count_time":{"symbolsCount":"37k","symbolsTime":"33 mins."},"categories":[{"name":"vue3.2后台管理系统","slug":"vue3-2后台管理系统","count":13,"path":"api/categories/vue3-2后台管理系统.json"}],"tags":[{"name":"后台","slug":"后台","count":12,"path":"api/tags/后台.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%83%E7%AB%A0%EF%BC%9A%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E5%A4%84%E7%90%86\"><span class=\"toc-text\">第七章：用户权限处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-01%EF%BC%9A%E5%BC%80%E7%AF%87\"><span class=\"toc-text\">7-01：开篇</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-02%EF%BC%9A%E7%94%A8%E6%88%B7%E5%88%97%E8%A1%A8%E5%88%86%E9%A1%B5%E5%B1%95%E7%A4%BA\"><span class=\"toc-text\">7-02：用户列表分页展示</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-03%EF%BC%9A%E5%85%A8%E5%B1%80%E5%B1%9E%E6%80%A7%E5%A4%84%E7%90%86%E6%97%B6%E9%97%B4%E5%B1%95%E7%A4%BA%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">7-03：全局属性处理时间展示问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-04%EF%BC%9Aexcel-%E5%AF%BC%E5%85%A5%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90\"><span class=\"toc-text\">7-04：excel 导入原理与实现分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-05%EF%BC%9A%E4%B8%9A%E5%8A%A1%E8%90%BD%E5%9C%B0%EF%BC%9A%E6%8F%90%E4%BE%9B%E4%B8%A4%E7%A7%8D%E6%96%87%E4%BB%B6%E5%AF%BC%E5%85%A5%E5%BD%A2%E5%BC%8F\"><span class=\"toc-text\">7-05：业务落地：提供两种文件导入形式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-06%EF%BC%9A%E4%B8%9A%E5%8A%A1%E8%90%BD%E5%9C%B0%EF%BC%9A%E6%96%87%E4%BB%B6%E9%80%89%E6%8B%A9%E4%B9%8B%E5%90%8E%E7%9A%84%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E5%A4%84%E7%90%86\"><span class=\"toc-text\">7-06：业务落地：文件选择之后的数据解析处理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-07%EF%BC%9A%E4%B8%9A%E5%8A%A1%E8%90%BD%E5%9C%B0%EF%BC%9A%E6%96%87%E4%BB%B6%E6%8B%96%E5%85%A5%E4%B9%8B%E5%90%8E%E7%9A%84%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E5%A4%84%E7%90%86\"><span class=\"toc-text\">7-07：业务落地：文件拖入之后的数据解析处理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-08%EF%BC%9A%E4%B8%9A%E5%8A%A1%E8%90%BD%E5%9C%B0%EF%BC%9A%E4%BC%A0%E9%80%92%E8%A7%A3%E6%9E%90%E5%90%8E%E7%9A%84-excel-%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">7-08：业务落地：传递解析后的 excel 数据</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-09%EF%BC%9A%E4%B8%9A%E5%8A%A1%E8%90%BD%E5%9C%B0%EF%BC%9A%E5%A4%84%E7%90%86%E5%89%A9%E4%BD%99-bug\"><span class=\"toc-text\">7-09：业务落地：处理剩余 bug</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-10%EF%BC%9Aexcel-%E5%AF%BC%E5%85%A5%E5%8A%9F%E8%83%BD%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">7-10：excel 导入功能总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-11%EF%BC%9A%E8%BE%85%E5%8A%A9%E4%B8%9A%E5%8A%A1%E4%B9%8B%E7%94%A8%E6%88%B7%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">7-11：辅助业务之用户删除</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-12%EF%BC%9Aexcel-%E5%AF%BC%E5%87%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90\"><span class=\"toc-text\">7-12：excel 导出原理与实现分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-13%EF%BC%9A%E4%B8%9A%E5%8A%A1%E8%90%BD%E5%9C%B0%EF%BC%9AExport2Excel-%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">7-13：业务落地：Export2Excel 组件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-14%EF%BC%9A%E4%B8%9A%E5%8A%A1%E8%90%BD%E5%9C%B0%EF%BC%9A%E5%AF%BC%E5%87%BA%E5%89%8D%E7%BD%AE%E4%B8%9A%E5%8A%A1%E5%A4%84%E7%90%86\"><span class=\"toc-text\">7-14：业务落地：导出前置业务处理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-15%EF%BC%9A%E4%B8%9A%E5%8A%A1%E8%90%BD%E5%9C%B0%EF%BC%9A%E5%AE%9E%E7%8E%B0-excel-%E5%AF%BC%E5%87%BA%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">7-15：业务落地：实现 excel 导出逻辑</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-16%EF%BC%9A%E4%B8%9A%E5%8A%A1%E8%90%BD%E5%9C%B0%EF%BC%9Aexcel-%E5%AF%BC%E5%87%BA%E6%97%B6%E7%9A%84%E6%97%B6%E9%97%B4%E9%80%BB%E8%BE%91%E5%A4%84%E7%90%86\"><span class=\"toc-text\">7-16：业务落地：excel 导出时的时间逻辑处理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-17%EF%BC%9Aexcel-%E5%AF%BC%E5%87%BA%E5%8A%9F%E8%83%BD%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">7-17：excel  导出功能总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-18%EF%BC%9A%E5%B1%80%E9%83%A8%E6%89%93%E5%8D%B0%E8%AF%A6%E6%83%85%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90\"><span class=\"toc-text\">7-18：局部打印详情原理与实现分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-19%EF%BC%9A%E4%B8%9A%E5%8A%A1%E8%90%BD%E5%9C%B0%EF%BC%9A%E8%8E%B7%E5%8F%96%E5%B1%95%E7%A4%BA%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">7-19：业务落地：获取展示数据</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-20%EF%BC%9A%E4%B8%9A%E5%8A%A1%E8%90%BD%E5%9C%B0%EF%BC%9A%E6%B8%B2%E6%9F%93%E8%AF%A6%E6%83%85%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">7-20：业务落地：渲染详情结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-21%EF%BC%9A%E4%B8%9A%E5%8A%A1%E8%90%BD%E5%9C%B0%EF%BC%9A%E5%B1%80%E9%83%A8%E6%89%93%E5%8D%B0%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">7-21：业务落地：局部打印功能实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-22%EF%BC%9A%E5%B1%80%E9%83%A8%E6%89%93%E5%8D%B0%E5%8A%9F%E8%83%BD%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">7-22：局部打印功能总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-23%EF%BC%9A%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">7-23：总结</span></a></li></ol></li></ol>","author":{"name":"西非","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个跑路的设计师","socials":{"github":"https://github.com/xuhui-web","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/a18482157085","juejin":"https://juejin.cn/user/1535369026995422","customs":{}}},"mapped":true,"prev_post":{"title":"08分级分控权限管理","uid":"afeb731b4a15e87120e5289a564db893","slug":"vue3.2后台管理系统/08分级分控权限管理","date":"2022-08-22T18:02:44.000Z","updated":"2022-08-23T02:02:53.000Z","comments":true,"path":"api/articles/vue3.2后台管理系统/08分级分控权限管理.json","keywords":null,"cover":"/img/SplitShire-21-4361.jpg","text":"第八章：分级分控权限管理8-01：开篇那么从这一章开始我们就来解决我们的权限控制问题。 本章以权限控制为主，整个章节会分成三部分来去讲解： 权限理论：明确什么是 RBAC 权限控制体现 辅助业务：完善 用户、角色、权限 三个页面功能 核心功能：落地实现 RBAC 权限控制系统 列...","link":"","photos":[],"count_time":{"symbolsCount":"28k","symbolsTime":"25 mins."},"categories":[{"name":"vue3.2后台管理系统","slug":"vue3-2后台管理系统","count":13,"path":"api/categories/vue3-2后台管理系统.json"}],"tags":[{"name":"后台","slug":"后台","count":12,"path":"api/tags/后台.json"}],"author":{"name":"西非","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个跑路的设计师","socials":{"github":"https://github.com/xuhui-web","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/a18482157085","juejin":"https://juejin.cn/user/1535369026995422","customs":{}}}},"next_post":{"title":"06vue3+ElementPlus综合实现","uid":"7e9c877cd1e65a897a0339a3e374ff44","slug":"vue3.2后台管理系统/06vue3+ElementPlus综合实现","date":"2022-08-22T16:02:44.000Z","updated":"2022-08-23T02:11:41.396Z","comments":true,"path":"api/articles/vue3.2后台管理系统/06vue3+ElementPlus综合实现.json","keywords":null,"cover":"/img/photo-1474903914960-c3f6602ebb5a.jpg","text":"第六章：vue3+ElementPlus综合实现6-1：开篇那么经过前面的学习，我们已经完成了： 编程规范 登录 layout 通用功能 这四个大的模块开发，那么接下来我们就可以进入到项目的业务模块开发之中，结合具体的业务来去分析方案，也是一个非常重要的能力。 那么这一章节，我们...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[{"name":"vue3.2后台管理系统","slug":"vue3-2后台管理系统","count":13,"path":"api/categories/vue3-2后台管理系统.json"}],"tags":[{"name":"后台","slug":"后台","count":12,"path":"api/tags/后台.json"}],"author":{"name":"西非","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个跑路的设计师","socials":{"github":"https://github.com/xuhui-web","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/a18482157085","juejin":"https://juejin.cn/user/1535369026995422","customs":{}}}}}