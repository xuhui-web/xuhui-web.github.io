{"title":"04搭建Layout架构","uid":"ded06061bffb24de88f886e4a5616cce","slug":"vue3.2后台管理系统/04搭建Layout架构","date":"2022-08-22T14:02:44.000Z","updated":"2022-08-23T02:17:03.252Z","comments":true,"path":"api/articles/vue3.2后台管理系统/04搭建Layout架构.json","keywords":null,"cover":"/img/photo-1545659681-6b0aba989615.jpg","content":"<h1 id=\"第四章：搭建Layout架构\"><a href=\"#第四章：搭建Layout架构\" class=\"headerlink\" title=\"第四章：搭建Layout架构\"></a>第四章：搭建Layout架构</h1><h2 id=\"4-01：前言\"><a href=\"#4-01：前言\" class=\"headerlink\" title=\"4-01：前言\"></a>4-01：前言</h2><p>在上一章中我们处理完成登录之后，从这一章开始，我们就需要处理项目的 <code>Layout</code> 架构了。那么什么叫做 <code>Layout</code> 架构呢？</p>\n<p>我们来看这张图：</p>\n<img src=\"04搭建Layout架构/image-20210911095711012.png\" alt=\"image-20210911095711012\" style=\"zoom:50%;\" />\n\n<p>在这张图中，我们把页面分为了三个部分，分别是：</p>\n<ol>\n<li>左侧的 <code>Menu</code> 菜单</li>\n<li>顶部的 <code>NavBar</code></li>\n<li>中间的内容区 <code>Main</code></li>\n</ol>\n<p>可能有人看到这里就说了，你这不就是个基本的页面布局吗？ 还弄个这么洋气的名字干嘛？</p>\n<p>外行看热闹，内行看门道对不对。</p>\n<p>本章中我们将会实现以下的核心解决方案：</p>\n<ol>\n<li>用户退出方案</li>\n<li>动态侧边栏方案</li>\n<li>动态面包屑方案</li>\n</ol>\n<p>除了这些核心内容之外，还有一些其他的小功能，比如：</p>\n<ol>\n<li>退出的通用逻辑封装</li>\n<li>伸缩侧边栏动画</li>\n<li><code>vue3</code> 动画</li>\n<li>组件状态驱动的动态 <code>CSS</code> 值等等</li>\n</ol>\n<p>等等</p>\n<p>换句话而言，掌握了本章中的内容之后，后台项目的通用 <code>Layout</code> 处理，对于来说将变得小菜一碟！</p>\n<h2 id=\"4-02：创建基于-Layout-的基础架构\"><a href=\"#4-02：创建基于-Layout-的基础架构\" class=\"headerlink\" title=\"4-02：创建基于 Layout 的基础架构\"></a>4-02：创建基于 Layout 的基础架构</h2><p>在本小节我们需要创建基于 <code>Layout</code> 的基本架构布局，所以说会涉及到大量的 <code>CSS</code> 内容，这些 <code>CSS</code> 大部分都是比较基础的可复用的 <code>CSS</code> 样式，又因为量比较大，所以说我们不会在视频中把这些所有的 <code>CSS</code> 全部手敲一遍，而是从中间挑出一些比较重要的 <code>Css</code> 内容去进行手写和介绍。这是本小节中一个比较特殊的地方，先和大家进行一下明确。</p>\n<p>那么明确好了之后，我们再来看一下我们 <code>Layout</code> 的基本布局结构：</p>\n<img src=\"04搭建Layout架构/image-20210911095711012.png\" alt=\"image-20210911095711012\" style=\"zoom:50%;\" />\n\n<p>我们知道，当登录完成之后，那么我们会进入到 <code>Layout</code> 页面，这个 <code>Layout</code> 页面组件位于 <code>Layout/index.vue</code> 中，所以说想要实现这样的结构，那么我们就需要到对应的 <code>layout</code> 组件中进行。</p>\n<ol>\n<li><p>整个页面分为三部分，所以我们需要先去创建对应的三个组件：</p>\n<ol>\n<li><code>layout/components/Sidebar/index.vue</code></li>\n<li><code>layout/components/Navbar.vue</code></li>\n<li><code>layout/components/AppMain.vue</code></li>\n</ol>\n</li>\n<li><p>然后在 <code>layout/index.vue</code> 中引入这三个组件</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;script setup&gt;\n    import Navbar from &#39;.&#x2F;components&#x2F;Navbar&#39;\n    import Sidebar from &#39;.&#x2F;components&#x2F;Sidebar&#39;\n    import AppMain from &#39;.&#x2F;components&#x2F;AppMain&#39;\n&lt;&#x2F;script&gt;</code></pre>\n</li>\n<li><p>完成对应的布局结构</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;app-wrapper&quot;&gt;\n    &lt;!-- 左侧 menu --&gt;\n    &lt;sidebar\n      id&#x3D;&quot;guide-sidebar&quot;\n      class&#x3D;&quot;sidebar-container&quot;\n    &#x2F;&gt;\n    &lt;div class&#x3D;&quot;main-container&quot;&gt;\n      &lt;div class&#x3D;&quot;fixed-header&quot;&gt;\n        &lt;!-- 顶部的 navbar --&gt;\n        &lt;navbar &#x2F;&gt;\n      &lt;&#x2F;div&gt;\n      &lt;!-- 内容区 --&gt;\n      &lt;app-main &#x2F;&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;</code></pre>\n</li>\n<li><p>在 <code>styles</code> 中创建如下 <code>css</code> 文件：</p>\n<ol>\n<li><code>variables.scss</code> ： 定义常量</li>\n<li><code>mixin.scss</code> ：定义通用的 <code>css</code></li>\n<li><code>sidebar.scss</code>：处理 <code>menu</code> 菜单的样式</li>\n</ol>\n</li>\n<li><p>为 <code>variables.scss</code> ，定义如下常量并进行导出（ <code>:export</code> 可见 <a href=\"https://www.bluematador.com/blog/how-to-share-variables-between-js-and-sass\">scss 与 js 共享变量</a>）：</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">&#x2F;&#x2F; sidebar\n$menuText: #bfcbd9;\n$menuActiveText: #ffffff;\n$subMenuActiveText: #f4f4f5;\n\n$menuBg: #304156;\n$menuHover: #263445;\n\n$subMenuBg: #1f2d3d;\n$subMenuHover: #001528;\n\n$sideBarWidth: 210px;\n\n&#x2F;&#x2F; https:&#x2F;&#x2F;www.bluematador.com&#x2F;blog&#x2F;how-to-share-variables-between-js-and-sass\n&#x2F;&#x2F; JS 与 scss 共享变量，在 scss 中通过 :export 进行导出，在 js 中可通过 ESM 进行导入\n:export &#123;\n  menuText: $menuText;\n  menuActiveText: $menuActiveText;\n  subMenuActiveText: $subMenuActiveText;\n  menuBg: $menuBg;\n  menuHover: $menuHover;\n  subMenuBg: $subMenuBg;\n  subMenuHover: $subMenuHover;\n  sideBarWidth: $sideBarWidth;\n&#125;\n</code></pre>\n</li>\n<li><p>为 <code>mixin.scss</code> 定义如下样式：</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">@mixin clearfix &#123;\n  &amp;:after &#123;\n    content: &#39;&#39;;\n    display: table;\n    clear: both;\n  &#125;\n&#125;\n\n@mixin scrollBar &#123;\n  &amp;::-webkit-scrollbar-track-piece &#123;\n    background: #d3dce6;\n  &#125;\n\n  &amp;::-webkit-scrollbar &#123;\n    width: 6px;\n  &#125;\n\n  &amp;::-webkit-scrollbar-thumb &#123;\n    background: #99a9bf;\n    border-radius: 20px;\n  &#125;\n&#125;\n\n@mixin relative &#123;\n  position: relative;\n  width: 100%;\n  height: 100%;\n&#125;\n</code></pre>\n</li>\n<li><p>为 <code>sidebar.scss</code> 定义如下样式：</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">#app &#123;\n  .main-container &#123;\n    min-height: 100%;\n    transition: margin-left 0.28s;\n    margin-left: $sideBarWidth;\n    position: relative;\n  &#125;\n\n  .sidebar-container &#123;\n    transition: width 0.28s;\n    width: $sideBarWidth !important;\n    height: 100%;\n    position: fixed;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    z-index: 1001;\n    overflow: hidden;\n\n    &#x2F;&#x2F; 重置 element-plus 的css\n    .horizontal-collapse-transition &#123;\n      transition: 0s width ease-in-out, 0s padding-left ease-in-out,\n        0s padding-right ease-in-out;\n    &#125;\n\n    .scrollbar-wrapper &#123;\n      overflow-x: hidden !important;\n    &#125;\n\n    .el-scrollbar__bar.is-vertical &#123;\n      right: 0px;\n    &#125;\n\n    .el-scrollbar &#123;\n      height: 100%;\n    &#125;\n\n    &amp;.has-logo &#123;\n      .el-scrollbar &#123;\n        height: calc(100% - 50px);\n      &#125;\n    &#125;\n\n    .is-horizontal &#123;\n      display: none;\n    &#125;\n\n    a &#123;\n      display: inline-block;\n      width: 100%;\n      overflow: hidden;\n    &#125;\n\n    .svg-icon &#123;\n      margin-right: 16px;\n    &#125;\n\n    .sub-el-icon &#123;\n      margin-right: 12px;\n      margin-left: -2px;\n    &#125;\n\n    .el-menu &#123;\n      border: none;\n      height: 100%;\n      width: 100% !important;\n    &#125;\n\n    .is-active &gt; .el-submenu__title &#123;\n      color: $subMenuActiveText !important;\n    &#125;\n\n    &amp; .nest-menu .el-submenu &gt; .el-submenu__title,\n    &amp; .el-submenu .el-menu-item &#123;\n      min-width: $sideBarWidth !important;\n    &#125;\n  &#125;\n\n  .hideSidebar &#123;\n    .sidebar-container &#123;\n      width: 54px !important;\n    &#125;\n\n    .main-container &#123;\n      margin-left: 54px;\n    &#125;\n\n    .submenu-title-noDropdown &#123;\n      padding: 0 !important;\n      position: relative;\n\n      .el-tooltip &#123;\n        padding: 0 !important;\n\n        .svg-icon &#123;\n          margin-left: 20px;\n        &#125;\n\n        .sub-el-icon &#123;\n          margin-left: 19px;\n        &#125;\n      &#125;\n    &#125;\n\n    .el-submenu &#123;\n      overflow: hidden;\n\n      &amp; &gt; .el-submenu__title &#123;\n        padding: 0 !important;\n\n        .svg-icon &#123;\n          margin-left: 20px;\n        &#125;\n\n        .sub-el-icon &#123;\n          margin-left: 19px;\n        &#125;\n\n        .el-submenu__icon-arrow &#123;\n          display: none;\n        &#125;\n      &#125;\n    &#125;\n\n    .el-menu--collapse &#123;\n      .el-submenu &#123;\n        &amp; &gt; .el-submenu__title &#123;\n          &amp; &gt; span &#123;\n            height: 0;\n            width: 0;\n            overflow: hidden;\n            visibility: hidden;\n            display: inline-block;\n          &#125;\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n\n  .el-menu--collapse .el-menu .el-submenu &#123;\n    min-width: $sideBarWidth !important;\n  &#125;\n\n  .withoutAnimation &#123;\n    .main-container,\n    .sidebar-container &#123;\n      transition: none;\n    &#125;\n  &#125;\n&#125;\n\n.el-menu--vertical &#123;\n  &amp; &gt; .el-menu &#123;\n    .svg-icon &#123;\n      margin-right: 16px;\n    &#125;\n    .sub-el-icon &#123;\n      margin-right: 12px;\n      margin-left: -2px;\n    &#125;\n  &#125;\n\n  &#x2F;&#x2F; 菜单项过长时\n  &gt; .el-menu--popup &#123;\n    max-height: 100vh;\n    overflow-y: auto;\n\n    &amp;::-webkit-scrollbar-track-piece &#123;\n      background: #d3dce6;\n    &#125;\n\n    &amp;::-webkit-scrollbar &#123;\n      width: 6px;\n    &#125;\n\n    &amp;::-webkit-scrollbar-thumb &#123;\n      background: #99a9bf;\n      border-radius: 20px;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n</li>\n<li><p>在 <code>index.scss</code> 中按照顺序导入以上样式文件</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">@import &#39;.&#x2F;variables.scss&#39;;\n@import &#39;.&#x2F;mixin.scss&#39;;\n@import &#39;.&#x2F;sidebar.scss&#39;;</code></pre>\n</li>\n<li><p>在 <code>layout/index.vue</code> 中写入如下样式</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n@import &#39;~@&#x2F;styles&#x2F;mixin.scss&#39;;\n@import &#39;~@&#x2F;styles&#x2F;variables.scss&#39;;\n\n.app-wrapper &#123;\n  @include clearfix;\n  position: relative;\n  height: 100%;\n  width: 100%;\n&#125;\n\n.fixed-header &#123;\n  position: fixed;\n  top: 0;\n  right: 0;\n  z-index: 9;\n  width: calc(100% - #&#123;$sideBarWidth&#125;);\n&#125;\n&lt;&#x2F;style&gt;</code></pre>\n</li>\n<li><p>因为将来要实现 <strong>主题更换</strong>，所以为 <code>sidebar</code> 赋值动态的背景颜色</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n...\n    &lt;!-- 左侧 menu --&gt;\n    &lt;sidebar\n      class&#x3D;&quot;sidebar-container&quot;\n      :style&#x3D;&quot;&#123; backgroundColor: variables.menuBg &#125;&quot;\n    &#x2F;&gt;\n...\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport variables from &#39;@&#x2F;styles&#x2F;variables.scss&#39;\n&lt;&#x2F;script&gt;</code></pre>\n</li>\n<li><p>为 <code>Navbar</code>、<code>Sidebar</code>、<code>AppMain</code> 组件进行初始化代码</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;&quot;&gt;&#123;组件名&#125;&lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport &#123;&#125; from &#39;vue&#39;\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;&lt;&#x2F;style&gt;\n</code></pre>\n</li>\n<li><p>至此查看效果为</p>\n<img src=\"04搭建Layout架构/image-20210911111525589.png\" alt=\"image-20210911111525589\" style=\"zoom:50%;\" />\n</li>\n<li><p>可见 <code>Navbar</code> 与 <code>AppMain</code> 重叠</p>\n</li>\n<li><p>为 <code>AppMain</code> 进行样式处理</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;app-main&quot;&gt;AppMain&lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport &#123;&#125; from &#39;vue&#39;\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n.app-main &#123;\n  min-height: calc(100vh - 50px);\n  width: 100%;\n  position: relative;\n  overflow: hidden;\n  padding: 61px 20px 20px 20px;\n  box-sizing: border-box;\n&#125;\n&lt;&#x2F;style&gt;\n</code></pre>\n</li>\n<li><p>查看效果</p>\n<img src=\"04搭建Layout架构/image-20210911111716595.png\" alt=\"image-20210911111716595\" style=\"zoom:50%;\" /></li>\n</ol>\n<p>在本章节中，我们写入了大量的代码，其中以 <code>css</code> 代码为主，因为其中的大量 <code>css</code> 都是可服用的，比如 <code>sidebar.scss</code> ，所以我们这里并没有进行手写。那么对于大家来说，这里的 <code>css</code> 代码也没有手写的必要，毕竟这些重复的体力活，是没有必要所有的事情都亲历亲为的。</p>\n<p>那么下一章节中，我们就去实现一下 <code>navbar</code> 中的功能操作。</p>\n<h2 id=\"4-03：获取用户基本信息\"><a href=\"#4-03：获取用户基本信息\" class=\"headerlink\" title=\"4-03：获取用户基本信息\"></a>4-03：获取用户基本信息</h2><p>处理完了基本的 <code>Layout</code> 架构之后，接下来我们实现一下 <code>navbar</code> 中的 <strong>头像菜单</strong> 功能<br><img src=\"04搭建Layout架构/image-20210911112904783.png\" alt=\"image-20210911112904783\" style=\"zoom:67%;\" /></p>\n<p>这样的一个功能主要分为三个部分：</p>\n<ol>\n<li>获取并展示用户信息</li>\n<li><code>element-plus</code> 中的 <code>dropdown</code> 组件使用</li>\n<li>退出登录的方案实现</li>\n</ol>\n<p>那么接下来我们就去实现第一部分的功能 <strong>获取并展示用户信息</strong></p>\n<p><strong>获取并展示用户信息</strong> 我们把它分为三部分进行实现：</p>\n<ol>\n<li>定义接口请求方法</li>\n<li>定义调用接口的动作</li>\n<li>在权限拦截时触发动作</li>\n</ol>\n<p>那么接下来我们就根据这三个步骤，分别来进行实现：</p>\n<p><strong>定义接口请求方法：</strong></p>\n<p>在 <code>api/sys.js</code> 中定义如下方法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 获取用户信息\n *&#x2F;\nexport const getUserInfo &#x3D; () &#x3D;&gt; &#123;\n  return request(&#123;\n    url: &#39;&#x2F;sys&#x2F;profile&#39;\n  &#125;)\n&#125;</code></pre>\n\n<p>因为获取用户信息需要对应的 <code>token</code> ，所以我们可以利用 <code>axios</code> 的 <strong>请求拦截器</strong> 对 <code>token</code> 进行统一注入，在 <code>utils/request.js</code> 中写入如下代码：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import store from &#39;@&#x2F;store&#39;\n&#x2F;&#x2F; 请求拦截器\nservice.interceptors.request.use(\n  config &#x3D;&gt; &#123;\n    &#x2F;&#x2F; 在这个位置需要统一的去注入token\n    if (store.getters.token) &#123;\n      &#x2F;&#x2F; 如果token存在 注入token\n      config.headers.Authorization &#x3D; &#96;Bearer $&#123;store.getters.token&#125;&#96;\n    &#125;\n    return config &#x2F;&#x2F; 必须返回配置\n  &#125;,\n  error &#x3D;&gt; &#123;\n    return Promise.reject(error)\n  &#125;\n)</code></pre>\n\n<p><strong>定义调用接口的动作：</strong></p>\n<p>在 <code>store/modules/user</code> 中写入以下代码：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; login, getUserInfo &#125; from &#39;@&#x2F;api&#x2F;sys&#39;\n...\nexport default &#123;\n  namespaced: true,\n  state: () &#x3D;&gt; (&#123;\n    ...\n    userInfo: &#123;&#125;\n  &#125;),\n  mutations: &#123;\n    ...\n    setUserInfo(state, userInfo) &#123;\n      state.userInfo &#x3D; userInfo\n    &#125;\n  &#125;,\n  actions: &#123;\n    ...\n    async getUserInfo(context) &#123;\n      const res &#x3D; await getUserInfo()\n      this.commit(&#39;user&#x2F;setUserInfo&#39;, res)\n      return res\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n\n<p><strong>在权限拦截时触发动作：</strong></p>\n<p>在 <code>permission.js</code> 中写入以下代码：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">  if (to.path &#x3D;&#x3D;&#x3D; &#39;&#x2F;login&#39;) &#123;\n    ...\n  &#125; else &#123;\n    &#x2F;&#x2F; 判断用户资料是否获取\n    &#x2F;&#x2F; 若不存在用户信息，则需要获取用户信息\n    if (!store.getters.hasUserInfo) &#123;\n      &#x2F;&#x2F; 触发获取用户信息的 action\n      await store.dispatch(&#39;user&#x2F;getUserInfo&#39;)\n    &#125;\n    next()\n  &#125;\n&#125;\n</code></pre>\n\n<p>在 <code>store/getters.js</code> 中写入判断用户信息代码：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const getters &#x3D; &#123;\n  ...\n  userInfo: state &#x3D;&gt; state.user.userInfo,\n  &#x2F;**\n   * @returns true 表示已存在用户信息\n   *&#x2F;\n  hasUserInfo: state &#x3D;&gt; &#123;\n    return JSON.stringify(state.user.userInfo) !&#x3D;&#x3D; &#39;&#123;&#125;&#39;\n  &#125;\n&#125;\n...\n</code></pre>\n\n<p><strong>注意：出现 <code>401</code> 错误表示登录超时：</strong></p>\n<img src=\"04搭建Layout架构/image-20210911144540729.png\" alt=\"image-20210911144540729\" style=\"zoom:80%;\" />\n\n<p>如遇到此错误，可 <strong>手动到控制到 <code>Application</code> 中，删除 <code>LocalStorage</code> 中的 <code>token</code></strong></p>\n<img src=\"04搭建Layout架构/image-20210911144726082.png\" alt=\"image-20210911144726082\" style=\"zoom:67%;\" />\n\n<p>删除后，重新刷新页面，重新进行登录操作（该问题如何解决，会在后续进行讲解）</p>\n<p>至此，即可获取用户信息数据</p>\n<img src=\"04搭建Layout架构/image-20210911144958117.png\" alt=\"image-20210911144958117\" style=\"zoom:67%;\" />\n\n<h2 id=\"4-04：渲染用户头像菜单\"><a href=\"#4-04：渲染用户头像菜单\" class=\"headerlink\" title=\"4-04：渲染用户头像菜单\"></a>4-04：渲染用户头像菜单</h2><p>到现在我们已经拿到了 <strong>用户数据，并且在 <code>getters</code> 中做了对应的快捷访问</strong> ，那么接下来我们就可以根据数据渲染出 <strong>用户头像内容</strong></p>\n<p>渲染用户头像，我们将使用到 <code>element-plus</code> 的两个组件：</p>\n<ol>\n<li><code>avatar</code></li>\n<li><code>Dropdown</code></li>\n</ol>\n<p>在 <code>layout/components/navbar.js</code> 中实现以下代码：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;navbar&quot;&gt;\n    &lt;div class&#x3D;&quot;right-menu&quot;&gt;\n      &lt;!-- 头像 --&gt;\n      &lt;el-dropdown class&#x3D;&quot;avatar-container&quot; trigger&#x3D;&quot;click&quot;&gt;\n        &lt;div class&#x3D;&quot;avatar-wrapper&quot;&gt;\n          &lt;el-avatar\n            shape&#x3D;&quot;square&quot;\n            :size&#x3D;&quot;40&quot;\n            :src&#x3D;&quot;$store.getters.userInfo.avatar&quot;\n          &gt;&lt;&#x2F;el-avatar&gt;\n          &lt;i class&#x3D;&quot;el-icon-s-tools&quot;&gt;&lt;&#x2F;i&gt;\n        &lt;&#x2F;div&gt;\n        &lt;template #dropdown&gt;\n          &lt;el-dropdown-menu class&#x3D;&quot;user-dropdown&quot;&gt;\n            &lt;router-link to&#x3D;&quot;&#x2F;&quot;&gt;\n              &lt;el-dropdown-item&gt; 首页 &lt;&#x2F;el-dropdown-item&gt;\n            &lt;&#x2F;router-link&gt;\n            &lt;a target&#x3D;&quot;_blank&quot; href&#x3D;&quot;&quot;&gt;\n              &lt;el-dropdown-item&gt;项目主页&lt;&#x2F;el-dropdown-item&gt;\n            &lt;&#x2F;a&gt;\n            &lt;el-dropdown-item divided&gt;\n              退出登录\n            &lt;&#x2F;el-dropdown-item&gt;\n          &lt;&#x2F;el-dropdown-menu&gt;\n        &lt;&#x2F;template&gt;\n      &lt;&#x2F;el-dropdown&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport &#123;&#125; from &#39;vue&#39;\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n.navbar &#123;\n  height: 50px;\n  overflow: hidden;\n  position: relative;\n  background: #fff;\n  box-shadow: 0 1px 4px rgba(0, 21, 41, 0.08);\n\n  .right-menu &#123;\n    display: flex;\n    align-items: center;\n    float: right;\n    padding-right: 16px;\n\n    ::v-deep .avatar-container &#123;\n      cursor: pointer;\n      .avatar-wrapper &#123;\n        margin-top: 5px;\n        position: relative;\n        .el-avatar &#123;\n          --el-avatar-background-color: none;\n          margin-right: 12px;\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n&#125;\n&lt;&#x2F;style&gt;\n</code></pre>\n\n<p>那么至此，用户头像和对应的下拉菜单就已经实现完成了，那么下一小节我们就可以在此基础上实现对应的 <strong>退出登录</strong> 功能</p>\n<h2 id=\"4-05：退出登录方案实现\"><a href=\"#4-05：退出登录方案实现\" class=\"headerlink\" title=\"4-05：退出登录方案实现\"></a>4-05：退出登录方案实现</h2><p><strong>退出登录</strong> 一直是一个通用的前端实现方案，对于退出登录而言，它的触发时机一般有两种：</p>\n<ol>\n<li>用户<strong>主动</strong>退出</li>\n<li>用户<strong>被动</strong>退出</li>\n</ol>\n<p>其中：</p>\n<ol>\n<li>主动退出指：用户点击登录按钮之后退出</li>\n<li>被动退出指：<code>token</code> 过期或被  其他人”顶下来“ 时退出</li>\n</ol>\n<p>那么无论是什么退出方式，在用户退出时，所需要执行的操作都是固定的：</p>\n<ol>\n<li>清理掉当前用户缓存数据</li>\n<li>清理掉权限相关配置</li>\n<li>返回到登录页</li>\n</ol>\n<p>那么明确好了对应的方案之后，接下来咱们就先来实现 <strong>用户主动退出的对应策略</strong></p>\n<p>在 <code>store/modules/user.js</code> 中，添加对应 <code>action</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import router from &#39;@&#x2F;router&#39;\n\nlogout() &#123;\n    this.commit(&#39;user&#x2F;setToken&#39;, &#39;&#39;)\n    this.commit(&#39;user&#x2F;setUserInfo&#39;, &#123;&#125;)\n    removeAllItem()\n    router.push(&#39;&#x2F;login&#39;)\n&#125;</code></pre>\n\n<p>为退出登录按钮添加点击事件，触发 <code>logout</code> 的 <code>action</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; useStore &#125; from &#39;vuex&#39;\n\nconst store &#x3D; useStore()\nconst logout &#x3D; () &#x3D;&gt; &#123;\n  store.dispatch(&#39;user&#x2F;logout&#39;)\n&#125;</code></pre>\n\n<p>那么至此，我们就完成了 <strong>用户主动退出</strong> 对应的实现。</p>\n<h2 id=\"4-06：用户被动退出方案解析\"><a href=\"#4-06：用户被动退出方案解析\" class=\"headerlink\" title=\"4-06：用户被动退出方案解析\"></a>4-06：用户被动退出方案解析</h2><p>在上一节我们实现了 <strong>用户主动退出</strong> 场景，同时也提到 <strong>用户被动退出</strong> 的场景主要有两个：</p>\n<ol>\n<li><code>token</code> 失效</li>\n<li>单用户登录：其他人登录该账号被 “顶下来”</li>\n</ol>\n<p>那么这两种场景下，在前端对应的处理方案一共也分为两种，共分为 <strong>主动处理</strong> 、<strong>被动处理</strong> 两种 ：</p>\n<ol>\n<li>主动处理：主要应对 <code>token</code> 失效</li>\n<li>被动处理：同时应对 <code>token</code> 失效 与 <strong>单用户登录</strong></li>\n</ol>\n<p>那么这两种方案基本上就覆盖了用户被动推出时的主要业务场景了</p>\n<p>那么这一小节内容比较少，但是东西还是挺重要的。因为我们主要分析了 <strong>用户被动退出</strong> 的场景，那么从下一小节开始，我们分别来实现这两种处理方案。</p>\n<h2 id=\"4-07：用户被动退出解决方案之主动处理\"><a href=\"#4-07：用户被动退出解决方案之主动处理\" class=\"headerlink\" title=\"4-07：用户被动退出解决方案之主动处理\"></a>4-07：用户被动退出解决方案之主动处理</h2><p>想要搞明白 <strong>主动处理</strong> 方案，那么首先我们得先去搞明白对应的 <strong>背景</strong> 以及 <strong>业务逻辑</strong> 。</p>\n<p>那么首先我们先明确一下对应的 <strong>背景：</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>我们知道 <code>token</code> 表示了一个用户的身份令牌，对 服务端 而言，它是只认令牌不认人的。所以说一旦其他人获取到了你的 <code>token</code> ，那么就可以伪装成你，来获取对应的敏感数据。</p>\n<p>所以为了保证用户的信息安全，那么对于 <code>token</code> 而言就被制定了很多的安全策略，比如：</p>\n<ol>\n<li>动态 <code>token</code>（可变 <code>token</code>）</li>\n<li>刷新 <code>token</code></li>\n<li>时效 <code>token</code></li>\n<li>…</li>\n</ol>\n<p>这些方案各有利弊，没有绝对的完美的策略。</p></blockquote>\n<p>而我们此时所选择的方案就是 <strong>时效 <code>token</code></strong></p>\n<p>对于 <code>token</code> 本身是拥有时效的，这个大家都知道。但是通常情况下，这个时效都是在服务端进行处理。而此时我们要在 <strong>服务端处理 <code>token</code> 时效的同时，在前端主动介入 <code>token</code> 时效的处理中</strong>。 从而保证用户信息的更加安全性。</p>\n<p>那么对应到我们代码中的实现方案为：</p>\n<ol>\n<li>在用户登陆时，记录当前 <strong>登录时间</strong></li>\n<li>制定一个 <strong>失效时长</strong></li>\n<li>在接口调用时，根据 <strong>当前时间</strong> 对比 <strong>登录时间</strong> ，看是否超过了 <strong>时效时长</strong><ol>\n<li>如果未超过，则正常进行后续操作</li>\n<li>如果超过，则进行 <strong>退出登录</strong> 操作</li>\n</ol>\n</li>\n</ol>\n<p>那么明确好了对应的方案之后，接下来我们就去实现对应代码</p>\n<p>创建 <code>utils/auth.js</code> 文件，并写入以下代码：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; TIME_STAMP, TOKEN_TIMEOUT_VALUE &#125; from &#39;@&#x2F;constant&#39;\nimport &#123; setItem, getItem &#125; from &#39;@&#x2F;utils&#x2F;storage&#39;\n&#x2F;**\n * 获取时间戳\n *&#x2F;\nexport function getTimeStamp() &#123;\n  return getItem(TIME_STAMP)\n&#125;\n&#x2F;**\n * 设置时间戳\n *&#x2F;\nexport function setTimeStamp() &#123;\n  setItem(TIME_STAMP, Date.now())\n&#125;\n&#x2F;**\n * 是否超时\n *&#x2F;\nexport function isCheckTimeout() &#123;\n  &#x2F;&#x2F; 当前时间戳\n  var currentTime &#x3D; Date.now()\n  &#x2F;&#x2F; 缓存时间戳\n  var timeStamp &#x3D; getTimeStamp()\n  return currentTime - timeStamp &gt; TOKEN_TIMEOUT_VALUE\n&#125;</code></pre>\n\n<p>在 <code>constant</code> 中声明对应常量：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; token 时间戳\nexport const TIME_STAMP &#x3D; &#39;timeStamp&#39;\n&#x2F;&#x2F; 超时时长(毫秒) 两小时\nexport const TOKEN_TIMEOUT_VALUE &#x3D; 2 * 3600 * 1000</code></pre>\n\n<p>在用户登录成功之后去设置时间，到 <code>store/user.js</code> 的 <code>login</code> 中：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; setTimeStamp &#125; from &#39;@&#x2F;utils&#x2F;auth&#39;\n\nlogin(context, userInfo) &#123;\n      ...\n      return new Promise((resolve, reject) &#x3D;&gt; &#123;\n        ...\n          .then(data &#x3D;&gt; &#123;\n            ...\n            &#x2F;&#x2F; 保存登录时间\n            setTimeStamp()\n            resolve()\n          &#125;)\n      &#125;)\n    &#125;,</code></pre>\n\n<p> 在 <code>utils/request</code> 对应的请求拦截器中进行 <strong>主动介入</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; isCheckTimeout &#125; from &#39;@&#x2F;utils&#x2F;auth&#39;\n\nif (store.getters.token) &#123;\n      if (isCheckTimeout()) &#123;\n        &#x2F;&#x2F; 登出操作\n        store.dispatch(&#39;user&#x2F;logout&#39;)\n        return Promise.reject(new Error(&#39;token 失效&#39;))\n      &#125;\n      ...\n    &#125;</code></pre>\n\n<p>那么至此我们就完成了 <strong>主动处理</strong> 对应的业务逻辑</p>\n<h2 id=\"4-08：用户被动退出解决方案之被动处理\"><a href=\"#4-08：用户被动退出解决方案之被动处理\" class=\"headerlink\" title=\"4-08：用户被动退出解决方案之被动处理\"></a>4-08：用户被动退出解决方案之被动处理</h2><p>上一节我们处理了 <strong>用户被动退出时的主动处理</strong> ，那么在这一小节我们去处理 <strong>用户被动退出时的被动处理</strong> 。</p>\n<p>还是和上一小节一样，我们还是先明确背景，然后再来明确业务逻辑。</p>\n<p><strong>背景：</strong></p>\n<p>首先我们需要先明确 <strong>被动处理</strong> 需要应对两种业务场景：</p>\n<ol>\n<li><code>token</code> 过期</li>\n<li>单用户登录</li>\n</ol>\n<p>然后我们一个一个来去看，首先是 <code>token</code> 过期</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>我们知道对于 <code>token</code> 而言，本身就是具备时效的，这个是在服务端生成 <code>token</code> 时就已经确定的。</p>\n<p>而此时我们所谓的 <code>token</code> 过期指的就是：</p>\n<p><strong>服务端生成的 <code>token</code> 超过 服务端指定时效</strong> 的过程</p></blockquote>\n<p>而对于 单用户登录 而言，指的是： </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>当用户 A 登录之后，<code>token</code> 过期之前。</p>\n<p> 用户 A 的账号在其他的设备中进行了二次登录，导致第一次登录的 A 账号被 “顶下来” 的过程。</p>\n<p>即：<strong>同一账户仅可以在一个设备中保持在线状态</strong></p></blockquote>\n<p>那么明确好了对应的背景之后，接下来我们来看对应的业务处理场景：</p>\n<p>从背景中我们知道，以上的两种情况，都是在 <strong>服务端进行判断的</strong>，而对于前端而言其实是 <strong>服务端通知前端的一个过程。</strong></p>\n<p>所以说对于其业务处理，将遵循以下逻辑：</p>\n<ol>\n<li>服务端返回数据时，会通过特定的状态码通知前端</li>\n<li>当前端接收到特定状态码时，表示遇到了特定状态：**<code>token</code> 时效** 或 <strong>单用户登录</strong></li>\n<li>此时进行 <strong>退出登录</strong> 处理</li>\n</ol>\n<p>但是这里大家需要注意，因为咱们项目的特性，<strong>同一个账号需要在多个设备中使用</strong>，所以说此时将不会指定 <strong>单用户登录</strong> 的状态码，仅有 <strong><code>token</code> 失效</strong> 状态码。之后当大家需要到 <strong>单用户登录</strong> 时，只需要增加一个状态码判断即可。</p>\n<p>那么明确好了业务之后，接下来我们来实现对应代码：</p>\n<p>在 <code>utils/request</code> 的响应拦截器中，增加以下逻辑：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 响应拦截器\nservice.interceptors.response.use(\n  response &#x3D;&gt; &#123;\n    ...\n  &#125;,\n  error &#x3D;&gt; &#123;\n    &#x2F;&#x2F; 处理 token 超时问题\n    if (\n      error.response &amp;&amp;\n      error.response.data &amp;&amp;\n      error.response.data.code &#x3D;&#x3D;&#x3D; 401\n    ) &#123;\n      &#x2F;&#x2F; token超时\n      store.dispatch(&#39;user&#x2F;logout&#39;)\n    &#125;\n    ElMessage.error(error.message) &#x2F;&#x2F; 提示错误信息\n    return Promise.reject(error)\n  &#125;\n)</code></pre>\n\n<p>那么至此，我们就已经完成了 <strong>整个用户退出</strong> 方案。</p>\n<h2 id=\"4-09：创建页面组件，使用临时-menu-菜单\"><a href=\"#4-09：创建页面组件，使用临时-menu-菜单\" class=\"headerlink\" title=\"4-09：创建页面组件，使用临时 menu 菜单\"></a>4-09：创建页面组件，使用临时 menu 菜单</h2><p>处理完了 <strong>退出登录</strong> 之后，接下来我们来处理 <strong>动态<code>menu</code>菜单</strong>。</p>\n<p>只不过为了方便大家理解，这里我们先不去直接处理动态菜单，我们先生成一个临时的 <code>menu</code> 菜单。</p>\n<p>创建 <code>layout/Sidebar/SidebarMenu</code> 文件</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 一级 menu 菜单 --&gt;\n  &lt;el-menu\n    :uniqueOpened&#x3D;&quot;true&quot;\n    default-active&#x3D;&quot;2&quot;\n    background-color&#x3D;&quot;#545c64&quot;\n    text-color&#x3D;&quot;#fff&quot;\n    active-text-color&#x3D;&quot;#ffd04b&quot;\n  &gt;\n    &lt;!-- 子集 menu 菜单 --&gt;\n    &lt;el-submenu index&#x3D;&quot;1&quot;&gt;\n      &lt;template #title&gt;\n        &lt;i class&#x3D;&quot;el-icon-location&quot;&gt;&lt;&#x2F;i&gt;\n        &lt;span&gt;导航一&lt;&#x2F;span&gt;\n      &lt;&#x2F;template&gt;\n      &lt;el-menu-item index&#x3D;&quot;1-1&quot;&gt;选项1&lt;&#x2F;el-menu-item&gt;\n      &lt;el-menu-item index&#x3D;&quot;1-2&quot;&gt;选项2&lt;&#x2F;el-menu-item&gt;\n    &lt;&#x2F;el-submenu&gt;\n    &lt;!-- 具体菜单项 --&gt;\n    &lt;el-menu-item index&#x3D;&quot;4&quot;&gt;\n      &lt;i class&#x3D;&quot;el-icon-setting&quot;&gt;&lt;&#x2F;i&gt;\n      &lt;template #title&gt;导航四&lt;&#x2F;template&gt;\n    &lt;&#x2F;el-menu-item&gt;\n  &lt;&#x2F;el-menu&gt;\n&lt;&#x2F;template&gt;</code></pre>\n\n<p>在 <code>layout/Sidebar/index</code> 中导入该组件</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;&quot;&gt;\n    &lt;h1&gt;占位&lt;&#x2F;h1&gt;\n    &lt;el-scrollbar&gt;\n      &lt;sidebar-menu&gt;&lt;&#x2F;sidebar-menu&gt;\n    &lt;&#x2F;el-scrollbar&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport SidebarMenu from &#39;.&#x2F;SidebarMenu&#39;\nimport &#123;&#125; from &#39;vue&#39;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>那么至此我们生成了一个临时的 <code>menu</code> 菜单，从这个临时的 <code>menu</code> 菜单出可以看到，<code>el-menu</code> 其实分成了三个部分：</p>\n<ol>\n<li><code>el-menu</code>：整个 <code>menu</code> 菜单</li>\n<li><code>el-submenu</code>：子集 <code>menu</code> 菜单</li>\n<li><code>el-menu-item</code>：具体菜单项</li>\n</ol>\n<p>那么明确好了这些内容之后，接下来我们就可以来去分析一下 <strong>动态 <code>menu</code> 菜单如何生成了</strong></p>\n<h2 id=\"4-10：动态menu菜单处理方案解析\"><a href=\"#4-10：动态menu菜单处理方案解析\" class=\"headerlink\" title=\"4-10：动态menu菜单处理方案解析\"></a>4-10：动态menu菜单处理方案解析</h2><p>上一小节我们处理了 **静态 <code>menu</code>**，那么接下来我们来去处理 <strong>动态 <code>menu</code> 菜单</strong></p>\n<p>其实 <strong>动态<code>menu</code>菜单</strong> 其实主要是和 <strong>动态路由表</strong>  配合来去实现 <strong>用户权限</strong> 的。</p>\n<p>但是 <strong>用户权限处理</strong> 需要等到后面的章节中才可以接触到，因为咱们想要处理 <strong>用户权限</strong> 还需要先去处理很多的业务场景，所以在这里我们就先只处理 <strong>动态<code>menu</code>菜单</strong> 这一个概念。</p>\n<p>那么 <strong>动态<code>menu</code>菜单</strong> 指的到底是什么意思呢？</p>\n<p>所谓 <strong>动态<code>menu</code>菜单</strong> 指的是：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>根据路由表的配置，自动生成对应的 <code>menu</code> 菜单。</p>\n<p>当路由表发生变化时，<code>menu</code> 菜单自动发生变化</p></blockquote>\n<p>那么明确了 <strong>动态<code>menu</code>菜单</strong> 的含义之后，接下来咱们就需要来明确以下 <strong>动态<code>menu</code>菜单</strong> 的实现方案：</p>\n<ol>\n<li>定义 <strong>路由表</strong> 对应 <strong><code>menu</code> 菜单规则</strong></li>\n<li>根据规则制定 <strong>路由表</strong></li>\n<li>根据规则，依据 <strong>路由表</strong> ，生成 <strong><code>menu</code> 菜单</strong></li>\n</ol>\n<p>那么根据我们的实现方案可以发现，实现 <strong>动态<code>menu</code>菜单</strong> 最核心的关键点其实就在步骤一，也就是 </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>定义 <strong>路由表</strong> 对应 <strong><code>menu</code> 菜单规则</strong></p></blockquote>\n<p>那么下面我们就来看一下，这个规则如何制定：</p>\n<ol>\n<li>对于单个路由规则而言（循环）：<ol>\n<li>如果<code>meta &amp;&amp; meta.title &amp;&amp; meta.icon</code> ：则显示在 <code>menu</code> 菜单中，其中 <code>title</code> 为显示的内容，<code>icon</code> 为显示的图标<ol>\n<li>如果存在 <code>children</code> ：则以 <code>el-sub-menu（子菜单）</code> 展示</li>\n<li>否则：则以 <code>el-menu-item（菜单项）</code> 展示</li>\n</ol>\n</li>\n<li>否则：不显示在 <code>menu</code> 菜单中</li>\n</ol>\n</li>\n</ol>\n<p>那么明确好了对应的规则之后，接下来我们就可以来去看一下如何进行实现啦</p>\n<h2 id=\"4-11：业务落地：生成项目页面组件\"><a href=\"#4-11：业务落地：生成项目页面组件\" class=\"headerlink\" title=\"4-11：业务落地：生成项目页面组件\"></a>4-11：业务落地：生成项目页面组件</h2><p>明确了对应的方案之后，那么下面咱们就来实现对应的代码逻辑。</p>\n<p>根据我们的分析，想要完成动态的 <code>menu</code>，那么我们需要按照以下的步骤来去实现：</p>\n<ol>\n<li>创建页面组件</li>\n<li>生成路由表</li>\n<li>解析路由表</li>\n<li>生成 <code>menu</code> 菜单</li>\n</ol>\n<p>那么明确好了步骤之后，接下来我们就先来实现第一步</p>\n<p><strong>创建页面组件</strong></p>\n<p>在 <code>views</code> 文件夹下，创建如下页面：</p>\n<ol>\n<li>创建文章：<code>article-create</code></li>\n<li>文章详情：<code>article-detail</code></li>\n<li>文章排名：<code>article-ranking</code></li>\n<li>错误页面：<code>error-page</code><ol>\n<li><code>404</code></li>\n<li><code>401</code></li>\n</ol>\n</li>\n<li>导入：<code>import</code></li>\n<li>权限列表：<code>permission-list</code></li>\n<li>个人中心：<code>profile</code></li>\n<li>角色列表：<code>role-list</code></li>\n<li>用户信息：<code>user-info</code></li>\n<li>用户管理：<code>user-manage</code></li>\n</ol>\n<p>大家也可以从 <strong>项目资料</strong> 中直接复制 <strong><code>views（不含 login）</code></strong> 的内容到项目的 <code>views</code> 文件夹下</p>\n<h2 id=\"4-12：业务落地：创建结构路由表\"><a href=\"#4-12：业务落地：创建结构路由表\" class=\"headerlink\" title=\"4-12：业务落地：创建结构路由表\"></a>4-12：业务落地：创建结构路由表</h2><p>想要实现结构路由表，那么我们需要先知道最终我们要实现的结构是什么样子的，大家来看下面的截图：</p>\n<img src=\"04搭建Layout架构/image-20210913150402667.png\" alt=\"image-20210913150402667\" />\n\n<p>这是我们最终要实现的 <code>menu</code> 截图</p>\n<p>根据此截图，我们可以知道两点内容：</p>\n<ol>\n<li><p>我们创建的页面并没有全部进行展示</p>\n<ol>\n<li>根据该方案<img src=\"04搭建Layout架构/image-20210913151331012.png\" alt=\"image-20210913151331012\" /></li>\n<li>即不显示页面 <strong>不满足</strong> 该条件 <code>meta &amp;&amp; meta.title &amp;&amp; meta.icon</code></li>\n</ol>\n</li>\n<li><p><code>menu</code> 菜单将具备父子级的结构</p>\n<ol>\n<li><p>按照此结构规划数据，则数据应为</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">[\n    &#123;\n        &quot;title&quot;: &quot;个人中心&quot;,\n        &quot;path&quot;: &quot;&quot;\n    &#125;,\n    &#123;\n        &quot;title&quot;: &quot;用户&quot;,\n        &quot;children&quot;: [\n            &#123;\n                &quot;title&quot;: &quot;员工管理&quot;,\n                &quot;path&quot;: &quot;&quot;\n            &#125;,\n            &#123;\n                &quot;title&quot;: &quot;角色列表&quot;,\n                &quot;path&quot;: &quot;&quot;\n            &#125;,\n            &#123;\n                &quot;title&quot;: &quot;权限列表&quot;,\n                &quot;path&quot;: &quot;&quot;\n            &#125;\n        ]\n    &#125;,\n    &#123;\n        &quot;title&quot;: &quot;文章&quot;,\n        &quot;children&quot;: [\n            &#123;\n                &quot;title&quot;: &quot;文章排名&quot;,\n                &quot;path&quot;: &quot;&quot;\n            &#125;,\n            &#123;\n                &quot;title&quot;: &quot;创建文章&quot;,\n                &quot;path&quot;: &quot;&quot;\n            &#125;\n        ]\n    &#125;\n]</code></pre></li>\n</ol>\n</li>\n</ol>\n<p>又因为将来我们需要进行 <strong>用户权限处理</strong>，所以此时我们需要先对路由表进行一个划分：</p>\n<ol>\n<li><p>私有路由表 <code>privateRoutes</code> ：权限路由</p>\n<ol start=\"2\">\n<li>公有路由表 <code>publicRoutes</code>：无权限路由</li>\n</ol>\n</li>\n</ol>\n<p>根据以上理论，生成以下路由表结构：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 私有路由表\n *&#x2F;\nconst privateRoutes &#x3D; [\n  &#123;\n    path: &#39;&#x2F;user&#39;,\n    component: layout,\n    redirect: &#39;&#x2F;user&#x2F;manage&#39;,\n    meta: &#123;\n      title: &#39;user&#39;,\n      icon: &#39;personnel&#39;\n    &#125;,\n    children: [\n      &#123;\n        path: &#39;&#x2F;user&#x2F;manage&#39;,\n        component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;user-manage&#x2F;index&#39;),\n        meta: &#123;\n          title: &#39;userManage&#39;,\n          icon: &#39;personnel-manage&#39;\n        &#125;\n      &#125;,\n      &#123;\n        path: &#39;&#x2F;user&#x2F;role&#39;,\n        component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;role-list&#x2F;index&#39;),\n        meta: &#123;\n          title: &#39;roleList&#39;,\n          icon: &#39;role&#39;\n        &#125;\n      &#125;,\n      &#123;\n        path: &#39;&#x2F;user&#x2F;permission&#39;,\n        component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;permission-list&#x2F;index&#39;),\n        meta: &#123;\n          title: &#39;permissionList&#39;,\n          icon: &#39;permission&#39;\n        &#125;\n      &#125;,\n      &#123;\n        path: &#39;&#x2F;user&#x2F;info&#x2F;:id&#39;,\n        name: &#39;userInfo&#39;,\n        component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;user-info&#x2F;index&#39;),\n        meta: &#123;\n          title: &#39;userInfo&#39;\n        &#125;\n      &#125;,\n      &#123;\n        path: &#39;&#x2F;user&#x2F;import&#39;,\n        name: &#39;import&#39;,\n        component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;import&#x2F;index&#39;),\n        meta: &#123;\n          title: &#39;excelImport&#39;\n        &#125;\n      &#125;\n    ]\n  &#125;,\n  &#123;\n    path: &#39;&#x2F;article&#39;,\n    component: layout,\n    redirect: &#39;&#x2F;article&#x2F;ranking&#39;,\n    meta: &#123;\n      title: &#39;article&#39;,\n      icon: &#39;article&#39;\n    &#125;,\n    children: [\n      &#123;\n        path: &#39;&#x2F;article&#x2F;ranking&#39;,\n        component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;article-ranking&#x2F;index&#39;),\n        meta: &#123;\n          title: &#39;articleRanking&#39;,\n          icon: &#39;article-ranking&#39;\n        &#125;\n      &#125;,\n      &#123;\n        path: &#39;&#x2F;article&#x2F;:id&#39;,\n        component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;article-detail&#x2F;index&#39;),\n        meta: &#123;\n          title: &#39;articleDetail&#39;\n        &#125;\n      &#125;,\n      &#123;\n        path: &#39;&#x2F;article&#x2F;create&#39;,\n        component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;article-create&#x2F;index&#39;),\n        meta: &#123;\n          title: &#39;articleCreate&#39;,\n          icon: &#39;article-create&#39;\n        &#125;\n      &#125;,\n      &#123;\n        path: &#39;&#x2F;article&#x2F;editor&#x2F;:id&#39;,\n        component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;article-create&#x2F;index&#39;),\n        meta: &#123;\n          title: &#39;articleEditor&#39;\n        &#125;\n      &#125;\n    ]\n  &#125;\n]\n\n&#x2F;**\n * 公开路由表\n *&#x2F;\nconst publicRoutes &#x3D; [\n  &#123;\n    path: &#39;&#x2F;login&#39;,\n    component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;login&#x2F;index&#39;)\n  &#125;,\n  &#123;\n    path: &#39;&#x2F;&#39;,\n    &#x2F;&#x2F; 注意：带有路径“&#x2F;”的记录中的组件“默认”是一个不返回 Promise 的函数\n    component: layout,\n    redirect: &#39;&#x2F;profile&#39;,\n    children: [\n      &#123;\n        path: &#39;&#x2F;profile&#39;,\n        name: &#39;profile&#39;,\n        component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;profile&#x2F;index&#39;),\n        meta: &#123;\n          title: &#39;profile&#39;,\n          icon: &#39;el-icon-user&#39;\n        &#125;\n      &#125;,\n      &#123;\n        path: &#39;&#x2F;404&#39;,\n        name: &#39;404&#39;,\n        component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;error-page&#x2F;404&#39;)\n      &#125;,\n      &#123;\n        path: &#39;&#x2F;401&#39;,\n        name: &#39;401&#39;,\n        component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;error-page&#x2F;401&#39;)\n      &#125;\n    ]\n  &#125;\n]\n\nconst router &#x3D; createRouter(&#123;\n  history: createWebHashHistory(),\n  routes: [...publicRoutes, ...privateRoutes]\n&#125;)</code></pre>\n\n<p>最后不要忘记在 <code>layout/appMain</code> 下设置路由出口</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;app-main&quot;&gt;\n    &lt;router-view&gt;&lt;&#x2F;router-view&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;</code></pre>\n\n\n\n<h2 id=\"4-13：业务落地：解析路由表，获取结构化数据\"><a href=\"#4-13：业务落地：解析路由表，获取结构化数据\" class=\"headerlink\" title=\"4-13：业务落地：解析路由表，获取结构化数据\"></a>4-13：业务落地：解析路由表，获取结构化数据</h2><p>本小节的目标只有一点，那就是获取到之前明确的结构化数据：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">[\n    &#123;\n        &quot;title&quot;: &quot;个人中心&quot;,\n        &quot;path&quot;: &quot;&quot;\n    &#125;,\n    &#123;\n        &quot;title&quot;: &quot;用户&quot;,\n        &quot;children&quot;: [\n            &#123;\n                &quot;title&quot;: &quot;员工管理&quot;,\n                &quot;path&quot;: &quot;&quot;\n            &#125;,\n            &#123;\n                &quot;title&quot;: &quot;角色列表&quot;,\n                &quot;path&quot;: &quot;&quot;\n            &#125;,\n            &#123;\n                &quot;title&quot;: &quot;权限列表&quot;,\n                &quot;path&quot;: &quot;&quot;\n            &#125;\n        ]\n    &#125;,\n    &#123;\n        &quot;title&quot;: &quot;文章&quot;,\n        &quot;children&quot;: [\n            &#123;\n                &quot;title&quot;: &quot;文章排名&quot;,\n                &quot;path&quot;: &quot;&quot;\n            &#125;,\n            &#123;\n                &quot;title&quot;: &quot;创建文章&quot;,\n                &quot;path&quot;: &quot;&quot;\n            &#125;\n        ]\n    &#125;\n]</code></pre>\n\n<p>那么想要完成本小节的目标，我们就需要先来看一下，现在的路由表结构是什么样子的。</p>\n<p>想要获取路由表数据，那么有两种方式：</p>\n<ol>\n<li><a href=\"https://next.router.vuejs.org/zh/api/#routes\">router.options.routes</a>：初始路由列表（<a href=\"https://next.router.vuejs.org/zh/api/#addroute\">新增的路由</a> 无法获取到）</li>\n<li><a href=\"https://next.router.vuejs.org/zh/api/#getroutes\">router.getRoutes()</a>：获取所有 <a href=\"https://next.router.vuejs.org/zh/api/#routerecord\">路由记录</a> 的完整列表</li>\n</ol>\n<p>所以，我们此时使用 <a href=\"https://next.router.vuejs.org/zh/api/#getroutes\">router.getRoutes()</a> </p>\n<p>在 <code>layout/components/Sidebar/SidebarMenu</code> 下写入以下代码：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport &#123; useRouter &#125; from &#39;vue-router&#39;\n\nconst router &#x3D; useRouter()\nconsole.log(router.getRoutes())\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>得到返回的数据：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">[\n    &#123;\n        &quot;path&quot;:&quot;&#x2F;user&#x2F;info&#x2F;:id&quot;,\n        &quot;name&quot;:&quot;userInfo&quot;,\n        &quot;meta&quot;:&#123;\n            &quot;title&quot;:&quot;userInfo&quot;\n        &#125;,\n        &quot;children&quot;:[\n\n        ]\n    &#125;,\n    &#123;\n        &quot;path&quot;:&quot;&#x2F;article&#x2F;editor&#x2F;:id&quot;,\n        &quot;meta&quot;:&#123;\n            &quot;title&quot;:&quot;articleEditor&quot;\n        &#125;,\n        &quot;children&quot;:[\n\n        ]\n    &#125;,\n    &#123;\n        &quot;path&quot;:&quot;&#x2F;user&#x2F;manage&quot;,\n        &quot;meta&quot;:&#123;\n            &quot;title&quot;:&quot;userManage&quot;,\n            &quot;icon&quot;:&quot;personnel-manage&quot;\n        &#125;,\n        &quot;children&quot;:[\n\n        ]\n    &#125;,\n    &#123;\n        &quot;path&quot;:&quot;&#x2F;user&#x2F;role&quot;,\n        &quot;meta&quot;:&#123;\n            &quot;title&quot;:&quot;roleList&quot;,\n            &quot;icon&quot;:&quot;role&quot;\n        &#125;,\n        &quot;children&quot;:[\n\n        ]\n    &#125;,\n    &#123;\n        &quot;path&quot;:&quot;&#x2F;user&#x2F;permission&quot;,\n        &quot;meta&quot;:&#123;\n            &quot;title&quot;:&quot;permissionList&quot;,\n            &quot;icon&quot;:&quot;permission&quot;\n        &#125;,\n        &quot;children&quot;:[\n\n        ]\n    &#125;,\n    &#123;\n        &quot;path&quot;:&quot;&#x2F;user&#x2F;import&quot;,\n        &quot;name&quot;:&quot;import&quot;,\n        &quot;meta&quot;:&#123;\n            &quot;title&quot;:&quot;excelImport&quot;\n        &#125;,\n        &quot;children&quot;:[\n\n        ]\n    &#125;,\n    &#123;\n        &quot;path&quot;:&quot;&#x2F;article&#x2F;ranking&quot;,\n        &quot;meta&quot;:&#123;\n            &quot;title&quot;:&quot;articleRanking&quot;,\n            &quot;icon&quot;:&quot;article-ranking&quot;\n        &#125;,\n        &quot;children&quot;:[\n\n        ]\n    &#125;,\n    &#123;\n        &quot;path&quot;:&quot;&#x2F;article&#x2F;create&quot;,\n        &quot;meta&quot;:&#123;\n            &quot;title&quot;:&quot;articleCreate&quot;,\n            &quot;icon&quot;:&quot;article-create&quot;\n        &#125;,\n        &quot;children&quot;:[\n\n        ]\n    &#125;,\n    &#123;\n        &quot;path&quot;:&quot;&#x2F;article&#x2F;:id&quot;,\n        &quot;meta&quot;:&#123;\n            &quot;title&quot;:&quot;articleDetail&quot;\n        &#125;,\n        &quot;children&quot;:[\n\n        ]\n    &#125;,\n    &#123;\n        &quot;path&quot;:&quot;&#x2F;login&quot;,\n        &quot;meta&quot;:&#123;\n\n        &#125;,\n        &quot;children&quot;:[\n\n        ]\n    &#125;,\n    &#123;\n        &quot;path&quot;:&quot;&#x2F;profile&quot;,\n        &quot;name&quot;:&quot;profile&quot;,\n        &quot;meta&quot;:&#123;\n            &quot;title&quot;:&quot;profile&quot;,\n            &quot;icon&quot;:&quot;el-icon-user&quot;\n        &#125;,\n        &quot;children&quot;:[\n\n        ]\n    &#125;,\n    &#123;\n        &quot;path&quot;:&quot;&#x2F;404&quot;,\n        &quot;name&quot;:&quot;404&quot;,\n        &quot;meta&quot;:&#123;\n\n        &#125;,\n        &quot;children&quot;:[\n\n        ]\n    &#125;,\n    &#123;\n        &quot;path&quot;:&quot;&#x2F;401&quot;,\n        &quot;name&quot;:&quot;401&quot;,\n        &quot;meta&quot;:&#123;\n\n        &#125;,\n        &quot;children&quot;:[\n\n        ]\n    &#125;,\n    &#123;\n        &quot;path&quot;:&quot;&#x2F;&quot;,\n        &quot;redirect&quot;:&quot;&#x2F;profile&quot;,\n        &quot;meta&quot;:&#123;\n\n        &#125;,\n        &quot;children&quot;:[\n            &#123;\n                &quot;path&quot;:&quot;&#x2F;profile&quot;,\n                &quot;name&quot;:&quot;profile&quot;,\n                &quot;meta&quot;:&#123;\n                    &quot;title&quot;:&quot;profile&quot;,\n                    &quot;icon&quot;:&quot;el-icon-user&quot;\n                &#125;\n            &#125;,\n            &#123;\n                &quot;path&quot;:&quot;&#x2F;404&quot;,\n                &quot;name&quot;:&quot;404&quot;\n            &#125;,\n            &#123;\n                &quot;path&quot;:&quot;&#x2F;401&quot;,\n                &quot;name&quot;:&quot;401&quot;\n            &#125;\n        ]\n    &#125;,\n    &#123;\n        &quot;path&quot;:&quot;&#x2F;user&quot;,\n        &quot;redirect&quot;:&quot;&#x2F;user&#x2F;manage&quot;,\n        &quot;meta&quot;:&#123;\n            &quot;title&quot;:&quot;user&quot;,\n            &quot;icon&quot;:&quot;personnel&quot;\n        &#125;,\n        &quot;children&quot;:[\n            &#123;\n                &quot;path&quot;:&quot;&#x2F;user&#x2F;manage&quot;,\n                &quot;meta&quot;:&#123;\n                    &quot;title&quot;:&quot;userManage&quot;,\n                    &quot;icon&quot;:&quot;personnel-manage&quot;\n                &#125;\n            &#125;,\n            &#123;\n                &quot;path&quot;:&quot;&#x2F;user&#x2F;role&quot;,\n                &quot;meta&quot;:&#123;\n                    &quot;title&quot;:&quot;roleList&quot;,\n                    &quot;icon&quot;:&quot;role&quot;\n                &#125;\n            &#125;,\n            &#123;\n                &quot;path&quot;:&quot;&#x2F;user&#x2F;permission&quot;,\n                &quot;meta&quot;:&#123;\n                    &quot;title&quot;:&quot;permissionList&quot;,\n                    &quot;icon&quot;:&quot;permission&quot;\n                &#125;\n            &#125;,\n            &#123;\n                &quot;path&quot;:&quot;&#x2F;user&#x2F;info&#x2F;:id&quot;,\n                &quot;name&quot;:&quot;userInfo&quot;,\n                &quot;meta&quot;:&#123;\n                    &quot;title&quot;:&quot;userInfo&quot;\n                &#125;\n            &#125;,\n            &#123;\n                &quot;path&quot;:&quot;&#x2F;user&#x2F;import&quot;,\n                &quot;name&quot;:&quot;import&quot;,\n                &quot;meta&quot;:&#123;\n                    &quot;title&quot;:&quot;excelImport&quot;\n                &#125;\n            &#125;\n        ]\n    &#125;,\n    &#123;\n        &quot;path&quot;:&quot;&#x2F;article&quot;,\n        &quot;redirect&quot;:&quot;&#x2F;article&#x2F;ranking&quot;,\n        &quot;meta&quot;:&#123;\n            &quot;title&quot;:&quot;article&quot;,\n            &quot;icon&quot;:&quot;article&quot;\n        &#125;,\n        &quot;children&quot;:[\n            &#123;\n                &quot;path&quot;:&quot;&#x2F;article&#x2F;ranking&quot;,\n                &quot;meta&quot;:&#123;\n                    &quot;title&quot;:&quot;articleRanking&quot;,\n                    &quot;icon&quot;:&quot;article-ranking&quot;\n                &#125;\n            &#125;,\n            &#123;\n                &quot;path&quot;:&quot;&#x2F;article&#x2F;:id&quot;,\n                &quot;meta&quot;:&#123;\n                    &quot;title&quot;:&quot;articleDetail&quot;\n                &#125;\n            &#125;,\n            &#123;\n                &quot;path&quot;:&quot;&#x2F;article&#x2F;create&quot;,\n                &quot;meta&quot;:&#123;\n                    &quot;title&quot;:&quot;articleCreate&quot;,\n                    &quot;icon&quot;:&quot;article-create&quot;\n                &#125;\n            &#125;,\n            &#123;\n                &quot;path&quot;:&quot;&#x2F;article&#x2F;editor&#x2F;:id&quot;,\n                &quot;meta&quot;:&#123;\n                    &quot;title&quot;:&quot;articleEditor&quot;\n                &#125;\n            &#125;\n        ]\n    &#125;\n]</code></pre>\n\n<p>从返回的数据来看，它与我们想要的数据结构相去甚远。</p>\n<p>出现这个问题的原因，是因为它返回的是一个 <strong>完整的路由表</strong></p>\n<p>这个路由表距离我们想要的存在两个问题：</p>\n<ol>\n<li>存在重复的路由数据</li>\n<li>不满足该条件 <code>meta &amp;&amp; meta.title &amp;&amp; meta.icon</code> 的数据不应该存在</li>\n</ol>\n<p>那么接下来我们就应该来处理这两个问题</p>\n<p>创建 <code>utils/route</code> 文件，创建两个方法分别处理对应的两个问题：</p>\n<ol>\n<li><code>filterRouters</code></li>\n<li><code>generateMenus</code></li>\n</ol>\n<p>写入以下代码：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import path from &#39;path&#39;\n\n&#x2F;**\n * 返回所有子路由\n *&#x2F;\nconst getChildrenRoutes &#x3D; routes &#x3D;&gt; &#123;\n  const result &#x3D; []\n  routes.forEach(route &#x3D;&gt; &#123;\n    if (route.children &amp;&amp; route.children.length &gt; 0) &#123;\n      result.push(...route.children)\n    &#125;\n  &#125;)\n  return result\n&#125;\n&#x2F;**\n * 处理脱离层级的路由：某个一级路由为其他子路由，则剔除该一级路由，保留路由层级\n * @param &#123;*&#125; routes router.getRoutes()\n *&#x2F;\nexport const filterRouters &#x3D; routes &#x3D;&gt; &#123;\n  const childrenRoutes &#x3D; getChildrenRoutes(routes)\n  return routes.filter(route &#x3D;&gt; &#123;\n    return !childrenRoutes.find(childrenRoute &#x3D;&gt; &#123;\n      return childrenRoute.path &#x3D;&#x3D;&#x3D; route.path\n    &#125;)\n  &#125;)\n&#125;\n\n&#x2F;**\n * 判断数据是否为空值\n *&#x2F;\nfunction isNull(data) &#123;\n  if (!data) return true\n  if (JSON.stringify(data) &#x3D;&#x3D;&#x3D; &#39;&#123;&#125;&#39;) return true\n  if (JSON.stringify(data) &#x3D;&#x3D;&#x3D; &#39;[]&#39;) return true\n  return false\n&#125;\n&#x2F;**\n * 根据 routes 数据，返回对应 menu 规则数组\n *&#x2F;\nexport function generateMenus(routes, basePath &#x3D; &#39;&#39;) &#123;\n  const result &#x3D; []\n  &#x2F;&#x2F; 遍历路由表\n  routes.forEach(item &#x3D;&gt; &#123;\n    &#x2F;&#x2F; 不存在 children &amp;&amp; 不存在 meta 直接 return\n    if (isNull(item.meta) &amp;&amp; isNull(item.children)) return\n    &#x2F;&#x2F; 存在 children 不存在 meta，进入迭代\n    if (isNull(item.meta) &amp;&amp; !isNull(item.children)) &#123;\n      result.push(...generateMenus(item.children))\n      return\n    &#125;\n    &#x2F;&#x2F; 合并 path 作为跳转路径\n    const routePath &#x3D; path.resolve(basePath, item.path)\n    &#x2F;&#x2F; 路由分离之后，存在同名父路由的情况，需要单独处理\n    let route &#x3D; result.find(item &#x3D;&gt; item.path &#x3D;&#x3D;&#x3D; routePath)\n    if (!route) &#123;\n      route &#x3D; &#123;\n        ...item,\n        path: routePath,\n        children: []\n      &#125;\n\n      &#x2F;&#x2F; icon 与 title 必须全部存在\n      if (route.meta.icon &amp;&amp; route.meta.title) &#123;\n        &#x2F;&#x2F; meta 存在生成 route 对象，放入 arr\n        result.push(route)\n      &#125;\n    &#125;\n\n    &#x2F;&#x2F; 存在 children 进入迭代到children\n    if (item.children) &#123;\n      route.children.push(...generateMenus(item.children, route.path))\n    &#125;\n  &#125;)\n  return result\n&#125;\n</code></pre>\n\n<p>在 <code>SidebarMenu</code> 中调用该方法</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport &#123; computed &#125; from &#39;vue&#39;\nimport &#123; useRouter &#125; from &#39;vue-router&#39;\nimport &#123; filterRouters, generateMenus &#125; from &#39;@&#x2F;utils&#x2F;route&#39;\n\nconst router &#x3D; useRouter()\nconst routes &#x3D; computed(() &#x3D;&gt; &#123;\n  const filterRoutes &#x3D; filterRouters(router.getRoutes())\n  return generateMenus(filterRoutes)\n&#125;)\nconsole.log(JSON.stringify(routes.value))\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>得到该数据结构</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">[\n    &#123;\n        &quot;path&quot;:&quot;&#x2F;profile&quot;,\n        &quot;name&quot;:&quot;profile&quot;,\n        &quot;meta&quot;:&#123;\n            &quot;title&quot;:&quot;profile&quot;,\n            &quot;icon&quot;:&quot;el-icon-user&quot;\n        &#125;,\n    &#125;,\n    &#123;\n        &quot;path&quot;:&quot;&#x2F;user&quot;,\n        &quot;redirect&quot;:&quot;&#x2F;user&#x2F;manage&quot;,\n        &quot;meta&quot;:&#123;\n            &quot;title&quot;:&quot;user&quot;,\n            &quot;icon&quot;:&quot;personnel&quot;\n        &#125;,\n        &quot;props&quot;:&#123;\n            &quot;default&quot;:false\n        &#125;,\n        &quot;children&quot;:[\n            &#123;\n                &quot;path&quot;:&quot;&#x2F;user&#x2F;manage&quot;,\n                &quot;name&quot;:&quot;userManage&quot;,\n                &quot;meta&quot;:&#123;\n                    &quot;title&quot;:&quot;userManage&quot;,\n                    &quot;icon&quot;:&quot;personnel-manage&quot;\n                &#125;,\n                &quot;children&quot;:[\n\n                ]\n            &#125;,\n            &#123;\n                &quot;path&quot;:&quot;&#x2F;user&#x2F;role&quot;,\n                &quot;name&quot;:&quot;userRole&quot;,\n                &quot;meta&quot;:&#123;\n                    &quot;title&quot;:&quot;roleList&quot;,\n                    &quot;icon&quot;:&quot;role&quot;\n                &#125;,\n                &quot;children&quot;:[\n\n                ]\n            &#125;,\n            &#123;\n                &quot;path&quot;:&quot;&#x2F;user&#x2F;permission&quot;,\n                &quot;name&quot;:&quot;userPermission&quot;,\n                &quot;meta&quot;:&#123;\n                    &quot;title&quot;:&quot;permissionList&quot;,\n                    &quot;icon&quot;:&quot;permission&quot;\n                &#125;,\n                &quot;children&quot;:[\n\n                ]\n            &#125;\n        ],\n    &#125;,\n    &#123;\n        &quot;path&quot;:&quot;&#x2F;article&quot;,\n        &quot;redirect&quot;:&quot;&#x2F;article&#x2F;ranking&quot;,\n        &quot;meta&quot;:&#123;\n            &quot;title&quot;:&quot;article&quot;,\n            &quot;icon&quot;:&quot;article&quot;\n        &#125;,\n        &quot;props&quot;:&#123;\n            &quot;default&quot;:false\n        &#125;,\n        &quot;children&quot;:[\n            &#123;\n                &quot;path&quot;:&quot;&#x2F;article&#x2F;ranking&quot;,\n                &quot;name&quot;:&quot;articleRanking&quot;,\n                &quot;meta&quot;:&#123;\n                    &quot;title&quot;:&quot;articleRanking&quot;,\n                    &quot;icon&quot;:&quot;article-ranking&quot;\n                &#125;,\n                &quot;children&quot;:[\n\n                ]\n            &#125;,\n            &#123;\n                &quot;path&quot;:&quot;&#x2F;article&#x2F;create&quot;,\n                &quot;name&quot;:&quot;articleCreate&quot;,\n                &quot;meta&quot;:&#123;\n                    &quot;title&quot;:&quot;articleCreate&quot;,\n                    &quot;icon&quot;:&quot;article-create&quot;\n                &#125;,\n                &quot;children&quot;:[\n\n                ]\n            &#125;\n        ],\n    &#125;\n]</code></pre>\n\n\n\n<h2 id=\"4-14-业务落地：生成动态-menu-菜单\"><a href=\"#4-14-业务落地：生成动态-menu-菜单\" class=\"headerlink\" title=\"4-14: 业务落地：生成动态 menu 菜单\"></a>4-14: 业务落地：生成动态 menu 菜单</h2><p>有了数据结构之后，最后的步骤就水到渠成了</p>\n<p>整个 <code>menu</code> 菜单，我们将分成三个组件来进行处理</p>\n<ol>\n<li><code>SidebarMenu</code>：处理数据，作为最顶层 <code>menu</code> 载体</li>\n<li><code>SidebarItem</code>：根据数据处理 <strong>当前项为 <code>el-submenu</code> || <code>el-menu-item</code></strong> </li>\n<li><code>MenuItem</code>：处理 <code>el-menu-item</code> 样式</li>\n</ol>\n<p>那么下面我们一个个来处理</p>\n<p>首先是 <code>SidebarMenu</code> </p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 一级 menu 菜单 --&gt;\n  &lt;el-menu\n    ...\n  &gt;\n    &lt;sidebar-item\n      v-for&#x3D;&quot;item in routes&quot;\n      :key&#x3D;&quot;item.path&quot;\n      :route&#x3D;&quot;item&quot;\n    &gt;&lt;&#x2F;sidebar-item&gt;\n  &lt;&#x2F;el-menu&gt;\n&lt;&#x2F;template&gt;\n</code></pre>\n\n\n\n<p>创建 <code>SidebarItem</code> 组件，用来根据数据处理 <strong>当前项为 <code>el-submenu</code> || <code>el-menu-item</code></strong> </p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 支持渲染多级 menu 菜单 --&gt;\n  &lt;el-submenu v-if&#x3D;&quot;route.children.length &gt; 0&quot; :index&#x3D;&quot;route.path&quot;&gt;\n    &lt;template #title&gt;\n      &lt;menu-item :title&#x3D;&quot;route.meta.title&quot; :icon&#x3D;&quot;route.meta.icon&quot;&gt;&lt;&#x2F;menu-item&gt;\n    &lt;&#x2F;template&gt;\n    &lt;!-- 循环渲染 --&gt;\n    &lt;sidebar-item\n      v-for&#x3D;&quot;item in route.children&quot;\n      :key&#x3D;&quot;item.path&quot;\n      :route&#x3D;&quot;item&quot;\n    &gt;&lt;&#x2F;sidebar-item&gt;\n  &lt;&#x2F;el-submenu&gt;\n  &lt;!-- 渲染 item 项 --&gt;\n  &lt;el-menu-item v-else :index&#x3D;&quot;route.path&quot;&gt;\n    &lt;menu-item :title&#x3D;&quot;route.meta.title&quot; :icon&#x3D;&quot;route.meta.icon&quot;&gt;&lt;&#x2F;menu-item&gt;\n  &lt;&#x2F;el-menu-item&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport MenuItem from &#39;.&#x2F;MenuItem&#39;\nimport &#123; defineProps &#125; from &#39;vue&#39;\n&#x2F;&#x2F; 定义 props\ndefineProps(&#123;\n  route: &#123;\n    type: Object,\n    required: true\n  &#125;\n&#125;)\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>创建 <code>MenuItem</code> 用来处理 <code>el-menu-item</code> 样式</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;i v-if&#x3D;&quot;icon.includes(&#39;el-icon&#39;)&quot; class&#x3D;&quot;sub-el-icon&quot; :class&#x3D;&quot;icon&quot;&gt;&lt;&#x2F;i&gt;\n  &lt;svg-icon v-else :icon&#x3D;&quot;icon&quot;&gt;&lt;&#x2F;svg-icon&gt;\n  &lt;span&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;span&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport &#123; defineProps &#125; from &#39;vue&#39;\ndefineProps(&#123;\n  title: &#123;\n    type: String,\n    required: true\n  &#125;,\n  icon: &#123;\n    type: String,\n    required: true\n  &#125;\n&#125;)\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n&lt;&#x2F;style&gt;</code></pre>\n\n<p>至此，整个的 <code>menu</code> 菜单结构就已经完成了</p>\n<p>但是此时我们的 <code>menu</code> 菜单还存在三个小的问题：</p>\n<ol>\n<li>样式问题</li>\n<li>路由跳转问题</li>\n<li>默认激活项</li>\n</ol>\n<p>那么下一小节，我们来修复这些残余的问题</p>\n<h2 id=\"4-15：业务落地：修复最后残余问题\"><a href=\"#4-15：业务落地：修复最后残余问题\" class=\"headerlink\" title=\"4-15：业务落地：修复最后残余问题\"></a>4-15：业务落地：修复最后残余问题</h2><p>目前 <code>menu</code> 菜单存在三个问题</p>\n<ol>\n<li>样式问题</li>\n<li>路由跳转问题</li>\n<li>默认激活项</li>\n</ol>\n<p><strong>样式问题：</strong></p>\n<p>首先处理样式，因为后面我们需要处理 <strong>主题替换</strong> ，所以此处我们不能把样式写死</p>\n<p>在 <code>store/getters</code> 中创建一个新的 <strong>快捷访问</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import variables from &#39;@&#x2F;styles&#x2F;variables.scss&#39;\nconst getters &#x3D; &#123;\n  ...\n  cssVar: state &#x3D;&gt; variables\n&#125;\nexport default getters</code></pre>\n\n<p>在 <code>SidebarMenu</code> 中写入如下样式</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;el-menu\n    :background-color&#x3D;&quot;$store.getters.cssVar.menuBg&quot;\n    :text-color&#x3D;&quot;$store.getters.cssVar.menuText&quot;\n    :active-text-color&#x3D;&quot;$store.getters.cssVar.menuActiveText&quot;\n    :unique-opened&#x3D;&quot;true&quot;\n  &gt;</code></pre>\n\n<p><strong>路由跳转问题：</strong></p>\n<p>为 <code>el-menu</code> 指定 <code>router</code></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;el-menu\n   ...\n   router\n &gt;</code></pre>\n\n\n\n<p><strong>默认激活项：</strong></p>\n<p>根据当前 <code>url</code> 进行判断即可</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">\n  &lt;el-menu\n    :default-active&#x3D;&quot;activeMenu&quot;\n    ...\n  &gt;\n\n&lt;script setup&gt;\n...\n\n&#x2F;&#x2F; 计算高亮 menu 的方法\nconst route &#x3D; useRoute()\nconst activeMenu &#x3D; computed(() &#x3D;&gt; &#123;\n  const &#123; path &#125; &#x3D; route\n  return path\n&#125;)\n&lt;&#x2F;script&gt;\n</code></pre>\n\n<p>至此整个 <strong>动态<code>menu</code>完成</strong></p>\n<h2 id=\"4-16：动画逻辑，左侧菜单伸缩功能实现\"><a href=\"#4-16：动画逻辑，左侧菜单伸缩功能实现\" class=\"headerlink\" title=\"4-16：动画逻辑，左侧菜单伸缩功能实现\"></a>4-16：动画逻辑，左侧菜单伸缩功能实现</h2><p>下面我们来实现一个标准化功能 <strong>左侧菜单伸缩</strong> ，对于这个功能核心的点在于动画处理</p>\n<p>样式的改变总是由数据进行驱动，所以首先我们去创建对应的数据</p>\n<p>创建 <code>store/app</code> 模块，写入如下代码</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export default &#123;\n  namespaced: true,\n  state: () &#x3D;&gt; (&#123;\n    sidebarOpened: true\n  &#125;),\n  mutations: &#123;\n    triggerSidebarOpened(state) &#123;\n      state.sidebarOpened &#x3D; !state.sidebarOpened\n    &#125;\n  &#125;,\n  actions: &#123;&#125;\n&#125;\n</code></pre>\n\n<p>在 <code>store/index</code> 中进行导入</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">...\nimport app from &#39;.&#x2F;modules&#x2F;app&#39;\nexport default createStore(&#123;\n  getters,\n  modules: &#123;\n    ...\n    app\n  &#125;\n&#125;)</code></pre>\n\n<p>在 <code>store/getters</code> 中创建快捷访问</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">sidebarOpened: state &#x3D;&gt; state.app.sidebarOpened</code></pre>\n\n<p>创建 <code>components/hamburger</code> 组件，用来控制数据</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;hamburger-container&quot; @click&#x3D;&quot;toggleClick&quot;&gt;\n    &lt;svg-icon class&#x3D;&quot;hamburger&quot; :icon&#x3D;&quot;icon&quot;&gt;&lt;&#x2F;svg-icon&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport &#123; computed &#125; from &#39;vue&#39;\nimport &#123; useStore &#125; from &#39;vuex&#39;\n\nconst store &#x3D; useStore()\nconst toggleClick &#x3D; () &#x3D;&gt; &#123;\n  store.commit(&#39;app&#x2F;triggerSidebarOpened&#39;)\n&#125;\n\nconst icon &#x3D; computed(() &#x3D;&gt;\n  store.getters.sidebarOpened ? &#39;hamburger-opened&#39; : &#39;hamburger-closed&#39;\n)\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n.hamburger-container &#123;\n  padding: 0 16px;\n  .hamburger &#123;\n    display: inline-block;\n    vertical-align: middle;\n    width: 20px;\n    height: 20px;\n  &#125;\n&#125;\n&lt;&#x2F;style&gt;</code></pre>\n\n<p>在 <code>navbar</code> 中使用该组件</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;navbar&quot;&gt;\n    &lt;hamburger class&#x3D;&quot;hamburger-container&quot; &#x2F;&gt;\n    ...\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport Hamburger from &#39;@&#x2F;components&#x2F;Hamburger&#39;\n...\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n.navbar &#123;\n  ...\n\n  .hamburger-container &#123;\n    line-height: 46px;\n    height: 100%;\n    float: left;\n    cursor: pointer;\n    &#x2F;&#x2F; hover 动画\n    transition: background 0.5s;\n\n    &amp;:hover &#123;\n      background: rgba(0, 0, 0, 0.1);\n    &#125;\n  &#125;\n\n ...\n&#125;\n&lt;&#x2F;style&gt;\n</code></pre>\n\n<p>在 <code>SidebarMenu</code> 中，控制 <code>el-menu</code> 的 <a href=\"https://element-plus.org/#/zh-CN/component/menu\">collapse</a> 属性</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;el-menu\n    :collapse&#x3D;&quot;!$store.getters.sidebarOpened&quot;\n    ...</code></pre>\n\n<p>在 <code>layout/index</code> 中指定 <strong>整个侧边栏的宽度和缩放动画</strong></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;div\n    class&#x3D;&quot;app-wrapper&quot;\n    :class&#x3D;&quot;[$store.getters.sidebarOpened ? &#39;openSidebar&#39; : &#39;hideSidebar&#39;]&quot;\n  &gt;\n  ...</code></pre>\n\n<p>在 <code>layout/index</code> 中 处理 <code>navbar</code> 的宽度</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n...\n\n.fixed-header &#123;\n  position: fixed;\n  top: 0;\n  right: 0;\n  z-index: 9;\n  width: calc(100% - #&#123;$sideBarWidth&#125;);\n  transition: width 0.28s;\n&#125;\n\n.hideSidebar .fixed-header &#123;\n  width: calc(100% - #&#123;$hideSideBarWidth&#125;);\n&#125;\n&lt;&#x2F;style&gt;</code></pre>\n\n<p>在 <code>styles/variables.scss</code> 中指定 <code>hideSideBarWidth</code></p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">$hideSideBarWidth: 54px;</code></pre>\n\n\n\n<h2 id=\"4-17：-SidebarHeader-处理\"><a href=\"#4-17：-SidebarHeader-处理\" class=\"headerlink\" title=\"4-17： SidebarHeader 处理\"></a>4-17： SidebarHeader 处理</h2><p>整个左侧的 <code>menu</code> 菜单，到现在咱们还剩下最后一个 <code>header</code> 没有进行处理</p>\n<p>在 <code>sidebar/index</code> 中写入如下代码</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;&quot;&gt;\n    &lt;div class&#x3D;&quot;logo-container&quot;&gt;\n      &lt;el-avatar\n        size&#x3D;&quot;44&quot;\n        shape&#x3D;&quot;square&quot;\n        src&#x3D;&quot;https:&#x2F;&#x2F;m.imooc.com&#x2F;static&#x2F;wap&#x2F;static&#x2F;common&#x2F;img&#x2F;logo-small@2x.png&quot;\n      &#x2F;&gt;\n      &lt;h1 class&#x3D;&quot;logo-title&quot; v-if&#x3D;&quot;$store.getters.sidebarOpened&quot;&gt;\n       imooc-admin\n      &lt;&#x2F;h1&gt;\n    &lt;&#x2F;div&gt;\n    ...\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n.logo-container &#123;\n  height: 44px;\n  padding: 10px 0 22px 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  .logo-title &#123;\n    margin-left: 10px;\n    color: #fff;\n    font-weight: 600;\n    line-height: 50px;\n    font-size: 16px;\n    white-space: nowrap;\n  &#125;\n&#125;\n&lt;&#x2F;style&gt;\n</code></pre>\n\n<p>创建 <code>styles/element.scss</code> 文件，统一处理 <code>el-avatar</code> 的背景问题</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">.el-avatar &#123;\n  --el-avatar-background-color: none;\n&#125;</code></pre>\n\n<p>在 <code>styles/index.scss</code> 中导入</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">...\n@import &#39;.&#x2F;element.scss&#39;;</code></pre>\n\n<p>统一处理下动画时长的问题，在 <code>styles/variables.scss</code> 中，加入以下变量</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">$sideBarDuration: 0.28s;</code></pre>\n\n<p>为 <code>styles/sidebar.scss</code> 修改时长</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">.main-container &#123;\n  transition: margin-left #&#123;$sideBarDuration&#125;;\n ...\n&#125;\n\n.sidebar-container &#123;\n  transition: width #&#123;$sideBarDuration&#125;;\n\t...\n&#125;</code></pre>\n\n<p>为 <code>layout/index</code> 修改样式</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">.fixed-header &#123;\n  ...\n  transition: width #&#123;$sideBarDuration&#125;;\n&#125;</code></pre>\n\n<h2 id=\"4-18：全新-vue-能力：组件状态驱动的动态-CSS-值\"><a href=\"#4-18：全新-vue-能力：组件状态驱动的动态-CSS-值\" class=\"headerlink\" title=\"4-18：全新 vue 能力：组件状态驱动的动态 CSS 值\"></a>4-18：全新 vue 能力：组件状态驱动的动态 CSS 值</h2><p>在 <a href=\"https://blog.vuejs.org/posts/vue-3.2.html\">vue 3.2</a> 最新更新中，除了之前我们介绍的 <strong>响应式变化</strong> 之外，还有另外一个很重要的更新，那就是 <strong>组件状态驱动的动态 <code>CSS</code> 值</strong> ，对应的文档也已经公布，大家可以 <a href=\"https://v3.vuejs.org/api/sfc-style.html#state-driven-dynamic-css\">点击这里</a> 查看</p>\n<p>那么下面我们就使用下最新的特性，来为 <code>logo-container</code> 指定下高度：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n ...\n &lt;el-avatar\n \t:size&#x3D;&quot;logoHeight&quot;\n ...\n\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\n...\nconst logoHeight &#x3D; 44\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n.logo-container &#123;\n  height: v-bind(logoHeight) + &#39;px&#39;;\n...\n&#125;\n&lt;&#x2F;style&gt;\n</code></pre>\n\n<h2 id=\"4-19：动态面包屑方案分析\"><a href=\"#4-19：动态面包屑方案分析\" class=\"headerlink\" title=\"4-19：动态面包屑方案分析\"></a>4-19：动态面包屑方案分析</h2><p>到目前位置，本章中还剩下最后一个功能就是 <strong>面包屑导航</strong>，分为：</p>\n<ol>\n<li>静态面包屑</li>\n<li>动态面包屑</li>\n</ol>\n<p><strong>静态面包屑：</strong></p>\n<p>指的是：<strong>在每个页面中写死对应的面包屑菜单</strong>，缺点也很明显：</p>\n<ol>\n<li>每个页面都得写一遍</li>\n<li>页面路径结构变化了，得手动更改</li>\n</ol>\n<p>简单来说就是 <strong>不好维护，不好扩展</strong> 。</p>\n<p><strong>动态面包屑：</strong></p>\n<p><strong>根据当前的 <code>url</code> 自动生成面包屑导航菜单</strong></p>\n<p>无论之后路径发生了什么变化，<strong>动态面包屑</strong> 都会正确的进行计算</p>\n<p>那么在后面的实现过程中，我们将会分成三大步来实现</p>\n<ol>\n<li>创建、渲染基本的面包屑组件</li>\n<li>计算面包屑结构数据</li>\n<li>根据数据渲染动态面包屑内容</li>\n</ol>\n<h2 id=\"4-20：业务落地：渲染基本的面包屑组件\"><a href=\"#4-20：业务落地：渲染基本的面包屑组件\" class=\"headerlink\" title=\"4-20：业务落地：渲染基本的面包屑组件\"></a>4-20：业务落地：渲染基本的面包屑组件</h2><p>完成第一步，先去创建并渲染出基本的 <a href=\"https://element-plus.org/#/zh-CN/component/breadcrumb\">面包屑</a> 组件</p>\n<p>创建 <code>components/Breadcrumb/index</code>，并写入如下代码：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;el-breadcrumb class&#x3D;&quot;breadcrumb&quot; separator&#x3D;&quot;&#x2F;&quot;&gt;\n    &lt;el-breadcrumb-item :to&#x3D;&quot;&#123; path: &#39;&#x2F;&#39; &#125;&quot;&gt;首页&lt;&#x2F;el-breadcrumb-item&gt;\n    &lt;el-breadcrumb-item&gt;&lt;a href&#x3D;&quot;&#x2F;&quot;&gt;活动管理&lt;&#x2F;a&gt;&lt;&#x2F;el-breadcrumb-item&gt;\n    &lt;el-breadcrumb-item&gt;活动列表&lt;&#x2F;el-breadcrumb-item&gt;\n    &lt;!-- 面包屑的最后一项 --&gt;\n    &lt;el-breadcrumb-item&gt;\n      &lt;span class&#x3D;&quot;no-redirect&quot;&gt;活动详情&lt;&#x2F;span&gt;\n    &lt;&#x2F;el-breadcrumb-item&gt;\n  &lt;&#x2F;el-breadcrumb&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport &#123;&#125; from &#39;vue&#39;\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n.breadcrumb &#123;\n  display: inline-block;\n  font-size: 14px;\n  line-height: 50px;\n  margin-left: 8px;\n\n  ::v-deep .no-redirect &#123;\n    color: #97a8be;\n    cursor: text;\n  &#125;\n&#125;\n&lt;&#x2F;style&gt;\n</code></pre>\n\n<p>在 <code>layout/components/Navbar</code> 组件下导入</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;navbar&quot;&gt;\n    &lt;hamburger class&#x3D;&quot;hamburger-container&quot; &#x2F;&gt;\n    &lt;breadcrumb class&#x3D;&quot;breadcrumb-container&quot; &#x2F;&gt;\n\t...\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n...\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n.navbar &#123;\n ...\n\n  .breadcrumb-container &#123;\n    float: left;\n  &#125;\n   ...\n&#125;\n&lt;&#x2F;style&gt;\n</code></pre>\n\n\n\n<h2 id=\"4-21：业务落地：动态计算面包屑结构数据\"><a href=\"#4-21：业务落地：动态计算面包屑结构数据\" class=\"headerlink\" title=\"4-21：业务落地：动态计算面包屑结构数据\"></a>4-21：业务落地：动态计算面包屑结构数据</h2><p>现在我们是完成了一个静态的 面包屑，接下来咱们就需要依托这个静态的菜单来完成动态的。</p>\n<p>对于现在的静态面包屑来说，他分成了两个组件：</p>\n<ol>\n<li><code>el-breadcrumb</code>：包裹性质的容器</li>\n<li><code>el-breadcrumb-item</code>：每个单独项</li>\n</ol>\n<p>如果我们想要完成动态的，那么就需要 **依据动态数据，渲染 <code>el-breadcrumb-item</code> **</p>\n<p>所以说接下来我们需要做的事情就很简单了</p>\n<ol>\n<li>动态数据</li>\n<li>渲染 <code>el-breadcrumb-item</code></li>\n</ol>\n<p>那么这一小节咱们先来看 <strong>动态数据如何制作</strong></p>\n<p>我们希望可以制作出一个 <strong>数组</strong>，数组中每个 <code>item</code> 都表示一个 <strong>路由信息</strong>：</p>\n<p>创建一个方法，用来生成数组数据，在这里我们要使用到 <a href=\"https://next.router.vuejs.org/zh/api/#matched\">route.match</a> 属性来：<strong>获取与给定路由地址匹配的<a href=\"https://next.router.vuejs.org/zh/api/#routerecord\">标准化的路由记录</a>数组</strong></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport &#123; ref, watch &#125; from &#39;vue&#39;\nimport &#123; useRoute &#125; from &#39;vue-router&#39;\n\nconst route &#x3D; useRoute()\n&#x2F;&#x2F; 生成数组数据\nconst breadcrumbData &#x3D; ref([])\nconst getBreadcrumbData &#x3D; () &#x3D;&gt; &#123;\n  breadcrumbData.value &#x3D; route.matched.filter(\n    item &#x3D;&gt; item.meta &amp;&amp; item.meta.title\n  )\n  console.log(breadcrumbData.value)\n&#125;\n&#x2F;&#x2F; 监听路由变化时触发\nwatch(\n  route,\n  () &#x3D;&gt; &#123;\n    getBreadcrumbData()\n  &#125;,\n  &#123;\n    immediate: true\n  &#125;\n)\n&lt;&#x2F;script&gt;</code></pre>\n\n\n\n<h2 id=\"4-22：业务落地：依据动态数据，渲染面包屑\"><a href=\"#4-22：业务落地：依据动态数据，渲染面包屑\" class=\"headerlink\" title=\"4-22：业务落地：依据动态数据，渲染面包屑\"></a>4-22：业务落地：依据动态数据，渲染面包屑</h2><p>有了数据之后，根据数据来去渲染面包屑就比较简单了。</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;el-breadcrumb class&#x3D;&quot;breadcrumb&quot; separator&#x3D;&quot;&#x2F;&quot;&gt;\n    &lt;el-breadcrumb-item\n      v-for&#x3D;&quot;(item, index) in breadcrumbData&quot;\n      :key&#x3D;&quot;item.path&quot;\n    &gt;\n      &lt;!-- 不可点击项 --&gt;\n      &lt;span v-if&#x3D;&quot;index &#x3D;&#x3D;&#x3D; breadcrumbData.length - 1&quot; class&#x3D;&quot;no-redirect&quot;&gt;&#123;&#123;\n        item.meta.title\n      &#125;&#125;&lt;&#x2F;span&gt;\n      &lt;!-- 可点击项 --&gt;\n      &lt;a v-else class&#x3D;&quot;redirect&quot; @click.prevent&#x3D;&quot;onLinkClick(item)&quot;&gt;&#123;&#123;\n        item.meta.title\n      &#125;&#125;&lt;&#x2F;a&gt;\n    &lt;&#x2F;el-breadcrumb-item&gt;\n  &lt;&#x2F;el-breadcrumb&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\n...\n\n&#x2F;&#x2F; 处理点击事件\nconst router &#x3D; useRouter()\nconst onLinkClick &#x3D; item &#x3D;&gt; &#123;\n  console.log(item)\n  router.push(item.path)\n&#125;\n\n&#x2F;&#x2F; 将来需要进行主题替换，所以这里获取下动态样式\nconst store &#x3D; useStore()\n&#x2F;&#x2F; eslint-disable-next-line\nconst linkHoverColor &#x3D; ref(store.getters.cssVar.menuBg)\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n.breadcrumb &#123;\n ...\n\n  .redirect &#123;\n    color: #666;\n    font-weight: 600;\n  &#125;\n\n  .redirect:hover &#123;\n    &#x2F;&#x2F; 将来需要进行主题替换，所以这里不去写死样式\n    color: v-bind(linkHoverColor);\n  &#125;\n&#125;\n&lt;&#x2F;style&gt;\n</code></pre>\n\n<h2 id=\"4-23：vue3-动画处理\"><a href=\"#4-23：vue3-动画处理\" class=\"headerlink\" title=\"4-23：vue3 动画处理\"></a>4-23：vue3 动画处理</h2><p>vue3对 <a href=\"https://v3.cn.vuejs.org/guide/transitions-overview.html#%E5%9F%BA%E4%BA%8E-class-%E7%9A%84%E5%8A%A8%E7%94%BB%E5%92%8C%E8%BF%87%E6%B8%A1\">动画</a> 进行了一些修改（<a href=\"https://v3.cn.vuejs.org/guide/migration/transition.html#%E6%A6%82%E8%A7%88\">vue 动画迁移文档</a>）</p>\n<p>主要的修改其实只有两个：</p>\n<ol>\n<li>过渡类名 <code>v-enter</code> 修改为 <code>v-enter-from</code></li>\n<li>过渡类名 <code>v-leave</code> 修改为 <code>v-leave-from</code></li>\n</ol>\n<p>那么依据修改之后的动画，我们来为面包屑增加一些动画样式：</p>\n<ol>\n<li><p>在 <code>Breadcrumb/index</code> 中增加 <code>transition-group</code></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;el-breadcrumb class&#x3D;&quot;breadcrumb&quot; separator&#x3D;&quot;&#x2F;&quot;&gt;\n    &lt;transition-group name&#x3D;&quot;breadcrumb&quot;&gt;\n      ...\n    &lt;&#x2F;transition-group&gt;\n  &lt;&#x2F;el-breadcrumb&gt;\n&lt;&#x2F;template&gt;</code></pre>\n</li>\n<li><p>新建 <code>styles/transition</code> 样式文件</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">.breadcrumb-enter-active,\n.breadcrumb-leave-active &#123;\n  transition: all 0.5s;\n&#125;\n\n.breadcrumb-enter-from,\n.breadcrumb-leave-active &#123;\n  opacity: 0;\n  transform: translateX(20px);\n&#125;\n\n.breadcrumb-leave-active &#123;\n  position: absolute;\n&#125;</code></pre>\n</li>\n<li><p>在 <code>styles/index</code> 中导入</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">@import &#39;.&#x2F;transition.scss&#39;;</code></pre></li>\n</ol>\n<h2 id=\"4-24：总结\"><a href=\"#4-24：总结\" class=\"headerlink\" title=\"4-24：总结\"></a>4-24：总结</h2><p>到这里我们本章的内容就算是完成了，本章围绕着<code>layout</code> 为核心，主要实现了三个大的业务方案：</p>\n<ol>\n<li>用户退出方案</li>\n<li>动态侧边栏方案</li>\n<li>动态面包屑方案</li>\n</ol>\n<p>除了这三块大的方案之后，还有一些小的功能，比如：</p>\n<ol>\n<li>退出的通用逻辑封装</li>\n<li>伸缩侧边栏动画</li>\n<li><code>vue3</code> 动画</li>\n<li>组件状态驱动的动态 <code>CSS</code> 值等等</li>\n</ol>\n<p>那么这些方案的实现逻辑，就不在这里在跟大家重复了。</p>\n<p>这些方案在企业后台项目开发中，整体的覆盖率还是很高的</p>\n<p>那么在下一章节中，我们会去讲解一些通用的功能方案，相信这些功能方案大家一定都或多或少的遇到过，并且给大家带来过一定的麻烦。</p>\n<p>那么具体这样方案都有什么呢？我们一起期待吧！</p>\n","text":"第四章：搭建Layout架构4-01：前言在上一章中我们处理完成登录之后，从这一章开始，我们就需要处理项目的 Layout 架构了。那么什么叫做 Layout 架构呢？ 我们来看这张图： 在这张图中，我们把页面分为了三个部分，分别是： 左侧的 Menu 菜单 顶部的 NavBar...","link":"","photos":[],"count_time":{"symbolsCount":"55k","symbolsTime":"50 mins."},"categories":[{"name":"vue3.2后台管理系统","slug":"vue3-2后台管理系统","count":12,"path":"api/categories/vue3-2后台管理系统.json"}],"tags":[{"name":"后台","slug":"后台","count":12,"path":"api/tags/后台.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9A%E6%90%AD%E5%BB%BALayout%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">第四章：搭建Layout架构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-01%EF%BC%9A%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">4-01：前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-02%EF%BC%9A%E5%88%9B%E5%BB%BA%E5%9F%BA%E4%BA%8E-Layout-%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">4-02：创建基于 Layout 的基础架构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-03%EF%BC%9A%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">4-03：获取用户基本信息</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-04%EF%BC%9A%E6%B8%B2%E6%9F%93%E7%94%A8%E6%88%B7%E5%A4%B4%E5%83%8F%E8%8F%9C%E5%8D%95\"><span class=\"toc-text\">4-04：渲染用户头像菜单</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-05%EF%BC%9A%E9%80%80%E5%87%BA%E7%99%BB%E5%BD%95%E6%96%B9%E6%A1%88%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">4-05：退出登录方案实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-06%EF%BC%9A%E7%94%A8%E6%88%B7%E8%A2%AB%E5%8A%A8%E9%80%80%E5%87%BA%E6%96%B9%E6%A1%88%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">4-06：用户被动退出方案解析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-07%EF%BC%9A%E7%94%A8%E6%88%B7%E8%A2%AB%E5%8A%A8%E9%80%80%E5%87%BA%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%B9%8B%E4%B8%BB%E5%8A%A8%E5%A4%84%E7%90%86\"><span class=\"toc-text\">4-07：用户被动退出解决方案之主动处理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-08%EF%BC%9A%E7%94%A8%E6%88%B7%E8%A2%AB%E5%8A%A8%E9%80%80%E5%87%BA%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%B9%8B%E8%A2%AB%E5%8A%A8%E5%A4%84%E7%90%86\"><span class=\"toc-text\">4-08：用户被动退出解决方案之被动处理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-09%EF%BC%9A%E5%88%9B%E5%BB%BA%E9%A1%B5%E9%9D%A2%E7%BB%84%E4%BB%B6%EF%BC%8C%E4%BD%BF%E7%94%A8%E4%B8%B4%E6%97%B6-menu-%E8%8F%9C%E5%8D%95\"><span class=\"toc-text\">4-09：创建页面组件，使用临时 menu 菜单</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-10%EF%BC%9A%E5%8A%A8%E6%80%81menu%E8%8F%9C%E5%8D%95%E5%A4%84%E7%90%86%E6%96%B9%E6%A1%88%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">4-10：动态menu菜单处理方案解析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-11%EF%BC%9A%E4%B8%9A%E5%8A%A1%E8%90%BD%E5%9C%B0%EF%BC%9A%E7%94%9F%E6%88%90%E9%A1%B9%E7%9B%AE%E9%A1%B5%E9%9D%A2%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">4-11：业务落地：生成项目页面组件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-12%EF%BC%9A%E4%B8%9A%E5%8A%A1%E8%90%BD%E5%9C%B0%EF%BC%9A%E5%88%9B%E5%BB%BA%E7%BB%93%E6%9E%84%E8%B7%AF%E7%94%B1%E8%A1%A8\"><span class=\"toc-text\">4-12：业务落地：创建结构路由表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-13%EF%BC%9A%E4%B8%9A%E5%8A%A1%E8%90%BD%E5%9C%B0%EF%BC%9A%E8%A7%A3%E6%9E%90%E8%B7%AF%E7%94%B1%E8%A1%A8%EF%BC%8C%E8%8E%B7%E5%8F%96%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">4-13：业务落地：解析路由表，获取结构化数据</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-14-%E4%B8%9A%E5%8A%A1%E8%90%BD%E5%9C%B0%EF%BC%9A%E7%94%9F%E6%88%90%E5%8A%A8%E6%80%81-menu-%E8%8F%9C%E5%8D%95\"><span class=\"toc-text\">4-14: 业务落地：生成动态 menu 菜单</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-15%EF%BC%9A%E4%B8%9A%E5%8A%A1%E8%90%BD%E5%9C%B0%EF%BC%9A%E4%BF%AE%E5%A4%8D%E6%9C%80%E5%90%8E%E6%AE%8B%E4%BD%99%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">4-15：业务落地：修复最后残余问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-16%EF%BC%9A%E5%8A%A8%E7%94%BB%E9%80%BB%E8%BE%91%EF%BC%8C%E5%B7%A6%E4%BE%A7%E8%8F%9C%E5%8D%95%E4%BC%B8%E7%BC%A9%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">4-16：动画逻辑，左侧菜单伸缩功能实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-17%EF%BC%9A-SidebarHeader-%E5%A4%84%E7%90%86\"><span class=\"toc-text\">4-17： SidebarHeader 处理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-18%EF%BC%9A%E5%85%A8%E6%96%B0-vue-%E8%83%BD%E5%8A%9B%EF%BC%9A%E7%BB%84%E4%BB%B6%E7%8A%B6%E6%80%81%E9%A9%B1%E5%8A%A8%E7%9A%84%E5%8A%A8%E6%80%81-CSS-%E5%80%BC\"><span class=\"toc-text\">4-18：全新 vue 能力：组件状态驱动的动态 CSS 值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-19%EF%BC%9A%E5%8A%A8%E6%80%81%E9%9D%A2%E5%8C%85%E5%B1%91%E6%96%B9%E6%A1%88%E5%88%86%E6%9E%90\"><span class=\"toc-text\">4-19：动态面包屑方案分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-20%EF%BC%9A%E4%B8%9A%E5%8A%A1%E8%90%BD%E5%9C%B0%EF%BC%9A%E6%B8%B2%E6%9F%93%E5%9F%BA%E6%9C%AC%E7%9A%84%E9%9D%A2%E5%8C%85%E5%B1%91%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">4-20：业务落地：渲染基本的面包屑组件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-21%EF%BC%9A%E4%B8%9A%E5%8A%A1%E8%90%BD%E5%9C%B0%EF%BC%9A%E5%8A%A8%E6%80%81%E8%AE%A1%E7%AE%97%E9%9D%A2%E5%8C%85%E5%B1%91%E7%BB%93%E6%9E%84%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">4-21：业务落地：动态计算面包屑结构数据</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-22%EF%BC%9A%E4%B8%9A%E5%8A%A1%E8%90%BD%E5%9C%B0%EF%BC%9A%E4%BE%9D%E6%8D%AE%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%EF%BC%8C%E6%B8%B2%E6%9F%93%E9%9D%A2%E5%8C%85%E5%B1%91\"><span class=\"toc-text\">4-22：业务落地：依据动态数据，渲染面包屑</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-23%EF%BC%9Avue3-%E5%8A%A8%E7%94%BB%E5%A4%84%E7%90%86\"><span class=\"toc-text\">4-23：vue3 动画处理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-24%EF%BC%9A%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">4-24：总结</span></a></li></ol></li></ol>","author":{"name":"西非","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个跑路的设计师","socials":{"github":"https://github.com/xuhui-web","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/a18482157085","juejin":"https://juejin.cn/user/1535369026995422","customs":{}}},"mapped":true,"prev_post":{"title":"05通用功能开发","uid":"5c163a9965f56c02ab2c674f0a7895b4","slug":"vue3.2后台管理系统/05通用功能开发","date":"2022-08-22T15:02:44.000Z","updated":"2022-08-23T02:17:01.019Z","comments":true,"path":"api/articles/vue3.2后台管理系统/05通用功能开发.json","keywords":null,"cover":"/img/photo-1471238119891-2e56eca253b4.jpg","text":"第五章：通用功能开发5-01：开篇在后台项目的前端开发之中，存在着很多的通用业务功能，并且存在着一定的技术难度。 所以说就有很多人在面临这些功能的时候，大多数时都是采用 ctrl + c || v 的形式来进行实现。这就导致了虽然做过类似的功能，但是对这些功能的实现原理一知半解。...","link":"","photos":[],"count_time":{"symbolsCount":"62k","symbolsTime":"57 mins."},"categories":[{"name":"vue3.2后台管理系统","slug":"vue3-2后台管理系统","count":12,"path":"api/categories/vue3-2后台管理系统.json"}],"tags":[{"name":"后台","slug":"后台","count":12,"path":"api/tags/后台.json"}],"author":{"name":"西非","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个跑路的设计师","socials":{"github":"https://github.com/xuhui-web","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/a18482157085","juejin":"https://juejin.cn/user/1535369026995422","customs":{}}}},"next_post":{"title":"03搭建登录架构","uid":"d2e69685384ff9d5134e8cda74cb22b8","slug":"vue3.2后台管理系统/03搭建登录架构","date":"2022-08-22T13:02:44.000Z","updated":"2022-08-23T02:02:22.182Z","comments":true,"path":"api/articles/vue3.2后台管理系统/03搭建登录架构.json","keywords":null,"cover":"/img/photo-1591693117893-7cbfc0a7ac69.jpg","text":"03搭建登录架构01：前言在上一章中，我们处理了基本的编码规范，那么接下来我们就可以实现对应的项目开发了。 那么在之后的项目开发中，我们将会使用最新的 vue3 script setup 语法。 所以说在本章节中我们需要做两件事情： vue3 最新特性及最新语法 登录功能开发 不...","link":"","photos":[],"count_time":{"symbolsCount":"30k","symbolsTime":"27 mins."},"categories":[{"name":"vue3.2后台管理系统","slug":"vue3-2后台管理系统","count":12,"path":"api/categories/vue3-2后台管理系统.json"}],"tags":[{"name":"后台","slug":"后台","count":12,"path":"api/tags/后台.json"}],"author":{"name":"西非","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个跑路的设计师","socials":{"github":"https://github.com/xuhui-web","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/a18482157085","juejin":"https://juejin.cn/user/1535369026995422","customs":{}}}}}