{"title":"02ESLint + Git Hooks","uid":"5b3c8e28480b900c4a5086ace466bf73","slug":"vue3.2后台管理系统/02ESLint + Git Hooks","date":"2022-08-22T12:02:44.000Z","updated":"2022-08-23T02:01:49.106Z","comments":true,"path":"api/articles/vue3.2后台管理系统/02ESLint + Git Hooks.json","keywords":null,"cover":"/img/photo-1574092403000-ef9c803b84bb.jpg","content":"<h1 id=\"02ESLint-Git-Hooks\"><a href=\"#02ESLint-Git-Hooks\" class=\"headerlink\" title=\"02ESLint + Git Hooks\"></a>02ESLint + Git Hooks</h1><h2 id=\"01：为什么需要编程规范？\"><a href=\"#01：为什么需要编程规范？\" class=\"headerlink\" title=\"01：为什么需要编程规范？\"></a>01：为什么需要编程规范？</h2><p><strong>工欲善其事，必先利其器</strong> </p>\n<p>对于一些大型的企业级项目而言，通常情况下我们都是需要一个团队来进行开发的。而又因为团队人员对技术理解上的参差不齐，所以就会导致出现一种情况，那就是《<strong>一个项目无法具备统一的编程规范，导致项目的代码像多个不同材质的补丁拼接起来一样</strong>》</p>\n<p>设想一下，下面的这段代码有一个团队进行开发，因为没有具备统一的代码标准，所以生成了下面的代码：</p>\n<img src=\"02ESLint + Git Hooks/image-20210903190021029.png\" alt=\"image-20210903190021029\" style=\"zoom:67%;\" />\n\n<p>这段代码可以正常运行没有问题，但是整体的代码结构却非常的难看。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>有的地方有空格进行分割，有的地方却没有</p>\n<p>有的地方是单引号，有的地方却是双引号</p>\n<p>有的地方有分号，有的地方没有分号</p>\n<p>….</p></blockquote>\n<p>这样的项目虽然可以正常运行，但是如果把它放到大厂的项目中，确实 <strong>不及格</strong> 的，它会被认为是 <strong>不可维护、不可扩展的代码内容</strong></p>\n<p>那么所谓的大厂标准的代码结构应该是什么样子的呢？</p>\n<p>我们把上面的代码进行一下修正，做一个对比：</p>\n<img src=\"02ESLint + Git Hooks/image-20210903193913261.png\" alt=\"image-20210903193913261\" style=\"zoom:67%;\" />\n\n<p>修改之后的代码具备了统一的规范之后，是不是看起来就舒服多了！</p>\n<p>并且以上所列举出来的只是《编程规范》中的一小部分内容！</p>\n<p>那么有些人可能就会说了，你列举出来这些编程规范有什么用啊！</p>\n<p>哪怕你写上一部书，我们一个团队这么多人，总不能指望所有人都看一遍，并且严格的遵守你所说的规范吧！</p>\n<p>说的没错！指望人主动的遵守这些规范不太现实</p>\n<p>那怎么办呢？</p>\n<p>那么我们可不可以另辟蹊径，让程序自动处理规范化的内容呢？</p>\n<p>答案是：可以的！</p>\n<p>这些也是我们本章节所需要讲解的重点内容！</p>\n<p>本章节中我们会为大家讲解，如何自动化的对代码进行规范，其中主要包括：</p>\n<ol>\n<li>编码规范</li>\n<li>git 规范</li>\n</ol>\n<p>两大类</p>\n<p>那么明确好了我们的范围之后，接下来就让我们创建一个项目，开始我们的代码规范之旅吧！</p>\n<h2 id=\"02：使用-vue-cli-创建项目\"><a href=\"#02：使用-vue-cli-创建项目\" class=\"headerlink\" title=\"02：使用 vue-cli 创建项目\"></a>02：使用 vue-cli 创建项目</h2><p>这一小节我们需要创建一个 <code>vue3</code> 的项目，而创建项目的方式依然是通过 <code>vue-cli</code> 进行创建。</p>\n<p>不过这里有一点大家需要注意，因为我们需要使用最新的模板，所以请保证你的 <code>vue-cli</code> 的版本在 <code>4.5.13</code> 以上，你可以通过以下的方式来查看你的 <code>vue-cli</code> 版本：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">vue -V\n------\n@vue&#x2F;cli 4.5.13 &#x2F;&#x2F; 输出版本号</code></pre>\n\n<p>如果你需要升级版本，那么可以通过以下指令进行升级：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm update -g @vue&#x2F;cli</code></pre>\n\n<p>具体的方式也可以点击 <a href=\"https://cli.vuejs.org/zh/guide/installation.html\">这里</a> 进行参考。</p>\n<p>升级之后，即可通过以下方式创建最新的 <code>vue3</code> 项目，终端输入 <code>vue create 项目名称</code> ，即可进入 <strong>模板选择</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 利用 vue-cli 创建项目\nvue create imooc-admin\n&#x2F;&#x2F; 进入模板选择\nVue CLI v4.5.13\n? Please pick a preset:\n  Default ([Vue 2] babel, eslint)\n  Default (Vue 3) ([Vue 3] babel, eslint) \n&gt; Manually select features  &#x2F;&#x2F; 选择手动配置\n&#x2F;&#x2F; ----------------------------------------------------------\n? Check the features needed for your project: \n (*) Choose Vue version &#x2F;&#x2F; 选择 vue 版本\n (*) Babel &#x2F;&#x2F; 使用 babel\n ( ) TypeScript &#x2F;&#x2F; 不使用 ts\n ( ) Progressive Web App (PWA) Support &#x2F;&#x2F; 不使用 PWA\n (*) Router &#x2F;&#x2F; 添加 vue-router\n (*) Vuex &#x2F;&#x2F; 添加 vuex\n&gt;(*) CSS Pre-processors &#x2F;&#x2F; 使用 css 预处理器\n (*) Linter &#x2F; Formatter &#x2F;&#x2F; 代码格式化\n ( ) Unit Testing &#x2F;&#x2F; 不配置测试\n ( ) E2E Testing  &#x2F;&#x2F; &#x2F;&#x2F; 不配置测试\n&#x2F;&#x2F; ----------------------------------------------------------\n Choose a version of Vue.js that you want to start the project with \n  2.x\n&gt; 3.x &#x2F;&#x2F; 选择 vue 3.0 版本\n&#x2F;&#x2F; ----------------------------------------------------------\n Use history mode for router? (Requires proper server setup for index fallback in production) (Y&#x2F;n) n &#x2F;&#x2F; 不使用 history模式 的路由\n&#x2F;&#x2F; ----------------------------------------------------------\n ? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): \n&gt; Sass&#x2F;SCSS (with dart-sass) &#x2F;&#x2F; 使用基于 dart-sass 的 scss 预处理器\n  Sass&#x2F;SCSS (with node-sass) \n  Less\n  Stylus\n&#x2F;&#x2F; ----------------------------------------------------------\n? Pick a linter &#x2F; formatter config: \n  ESLint with error prevention only \n  ESLint + Airbnb config\n&gt; ESLint + Standard config &#x2F;&#x2F; 使用 ESLint 标准代码格式化方案\n  ESLint + Prettier \n&#x2F;&#x2F; ----------------------------------------------------------\n? Pick additional lint features: \n (*) Lint on save &#x2F;&#x2F;  \n&gt;(*) Lint and fix on commit  &#x2F;&#x2F; 保存时 &amp;&amp; 提交时，都进行 lint\n&#x2F;&#x2F; ----------------------------------------------------------\n? Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys)\n&gt; In dedicated config files &#x2F;&#x2F; 单独的配置文件\n  In package.json\n&#x2F;&#x2F; ----------------------------------------------------------\n Save this as a preset for future projects? (y&#x2F;N) n &#x2F;&#x2F; 不存储预设</code></pre>\n\n<p>等待片刻之后，你的项目就会生成成功。</p>\n<p>生成之后，可以通过以下两个指令来运行你的项目：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cd 项目目录\nnpm run serve</code></pre>\n\n<p>执行成功之后，项目即可运行！</p>\n<h2 id=\"03：升级最新的-vue-版本以支持-script-setup-语法\"><a href=\"#03：升级最新的-vue-版本以支持-script-setup-语法\" class=\"headerlink\" title=\"03：升级最新的 vue 版本以支持 script setup 语法\"></a>03：升级最新的 vue 版本以支持 script setup 语法</h2><p>因为使用 <code>@vue/cli-v4.5.13</code> 版本创建的项目中，<code>vue</code> 的版本为 <code>v 3.0.0</code> 。</p>\n<p>但是我们的项目需要使用最新的 <code>script setup 语法</code>，该语法在 <code>v 3.0.0</code> 版本中是不支持的，所以我们需要升级 <code>vue</code> 版本。</p>\n<p>大家可以通过以下指令进行升级：</p>\n<p>执行：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">npm i vue@3.2.8 vue-router@4.0.11 vuex@4.0.2</code></pre>\n\n<p>升级之后，查看 <code>package.json</code> 得到的版本应为：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&quot;vue&quot;: &quot;^3.2.8&quot;,\n&quot;vue-router&quot;: &quot;^4.0.11&quot;,\n&quot;vuex&quot;: &quot;^4.0.2&quot;</code></pre>\n\n\n\n<h2 id=\"04：大厂编程规范一：代码检测工具-ESLint-你了解多少？\"><a href=\"#04：大厂编程规范一：代码检测工具-ESLint-你了解多少？\" class=\"headerlink\" title=\"04：大厂编程规范一：代码检测工具 ESLint 你了解多少？\"></a>04：大厂编程规范一：代码检测工具 ESLint 你了解多少？</h2><p>在我们去创建项目的时候，脚手架工具已经帮助我们安装了 <code>ESLint</code> 代码检测工具。</p>\n<p>对于 <code>ESLint</code> 的大名，人们或多或少的应该都听说过，只不过有些人可能了解的多一些，有些人了解的少一些。</p>\n<p>那么本小节我们就先来聊一下，这个赫赫有名的代码检测工具 <code>ESLint</code></p>\n<p>首先 <code>ESLint</code> 是 <code>2013年6月</code> 创建的一个开源项目，它的目标非常简单，只有一个，那就是 <strong>提供一个插件化的 <code>javascript</code> 代码检测工具</strong> ，说白了就是做 <strong>代码格式检测使用的</strong></p>\n<p>在咱们当前的项目中，包含一个 <code>.eslintrc.js</code> 文件，这个文件就是 <code>eslint</code> 的配置文件。</p>\n<p>随着大家对代码格式的规范性越来越重视，<code>eslint</code> 也逐渐被更多的人所接收，同时也有很多大厂在原有的 <code>eslint</code> 规则基础之上进行了一些延伸。</p>\n<p>我们在创建项目时，就进行过这样的选择：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">? Pick a linter &#x2F; formatter config: \n  ESLint with error prevention only &#x2F;&#x2F; 仅包含错误的 ESLint\n  ESLint + Airbnb config &#x2F;&#x2F; Airbnb 的 ESLint 延伸规则\n  ESLint + Standard config &#x2F;&#x2F; 标准的 ESLint 规则</code></pre>\n\n<p>我们当前选择了 <strong>标准的 ESLint 规则</strong> ，那么接下来我们就在该规则之下，看一看 <code>ESLint</code> 它的一些配置都有什么？</p>\n<p>打开项目中的 <code>.eslintrc.js</code> 文件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; ESLint 配置文件遵循 commonJS 的导出规则，所导出的对象就是 ESLint 的配置对象\n&#x2F;&#x2F; 文档：https:&#x2F;&#x2F;eslint.bootcss.com&#x2F;docs&#x2F;user-guide&#x2F;configuring\nmodule.exports &#x3D; &#123;\n  &#x2F;&#x2F; 表示当前目录即为根目录，ESLint 规则将被限制到该目录下\n  root: true,\n  &#x2F;&#x2F; env 表示启用 ESLint 检测的环境\n  env: &#123;\n    &#x2F;&#x2F; 在 node 环境下启动 ESLint 检测\n    node: true\n  &#125;,\n  &#x2F;&#x2F; ESLint 中基础配置需要继承的配置\n  extends: [&quot;plugin:vue&#x2F;vue3-essential&quot;, &quot;@vue&#x2F;standard&quot;],\n  &#x2F;&#x2F; 解析器\n  parserOptions: &#123;\n    parser: &quot;babel-eslint&quot;\n  &#125;,\n  &#x2F;&#x2F; 需要修改的启用规则及其各自的错误级别\n  &#x2F;**\n   * 错误级别分为三种：\n   * &quot;off&quot; 或 0 - 关闭规则\n   * &quot;warn&quot; 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出)\n   * &quot;error&quot; 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)\n   *&#x2F;\n  rules: &#123;\n    &quot;no-console&quot;: process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &quot;production&quot; ? &quot;warn&quot; : &quot;off&quot;,\n    &quot;no-debugger&quot;: process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &quot;production&quot; ? &quot;warn&quot; : &quot;off&quot;\n  &#125;\n&#125;;\n</code></pre>\n\n<p>那么到这里咱们已经大致的了解了<code>.eslintrc.js</code> 文件，基于 <code>ESLint</code> 如果我们出现不符合规范的代码格式时，那么就会得到一个对应的错误。</p>\n<p>比如：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>我们可以把 <code>Home.vue</code> 中的 <code>name</code> 属性值，由单引号改为双引号</p></blockquote>\n<p>此时，只要我们一保存代码，那么就会得到一个对应的错误</p>\n<img src=\"02ESLint + Git Hooks/image-20210904185336318.png\" alt=\"image-20210904185336318\" style=\"zoom:67%;\" />\n\n<p>这个错误表示： </p>\n<ol>\n<li>此时我们触发了一个 《错误级别的错误》 </li>\n<li>触发该错误的位置是 在 <code>Home.vue</code> 的第 13 行 第九列 中</li>\n<li>错误描述为：字符串必须使用单引号</li>\n<li>错误规则为：<code>quotes</code></li>\n</ol>\n<p>那么想要解决这个错误，通常情况下我们有两种方式：</p>\n<ol>\n<li>按照 <code>ESLint</code> 的要求修改代码</li>\n<li>修改 <code>ESLint</code> 的验证规则</li>\n</ol>\n<p><strong>按照 <code>ESLint</code> 的要求修改代码：</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p> 在 <code>Home.vue</code> 的第 13 行中把双引号改为单引号</p></blockquote>\n<p><strong>修改 <code>ESLint</code> 的验证规则：</strong></p>\n<ol>\n<li><p>在 <code>.eslintrc.js</code> 文件中，新增一条验证规则</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&quot;quotes&quot;: &quot;error&quot; &#x2F;&#x2F; 默认\n&quot;quotes&quot;: &quot;warn&quot; &#x2F;&#x2F; 修改为警告\n&quot;quotes&quot;: &quot;off&quot; &#x2F;&#x2F; 修改不校验</code></pre></li>\n</ol>\n<p>那么这一小节，我们了解了 <code>vue-cli</code> 创建 <code>vue3</code> 项目时，<code>Standard config</code> 的 <code>ESLint</code> 配置，并且知道了如何解决 <code>ESLint</code> 报错的问题。</p>\n<p>但是一个团队中，人员的水平高低不齐，大量的 <code>ESLint</code> 规则校验，会让很多的开发者头疼不已，从而大大影响了项目的开发进度。</p>\n<p>试想一下，在你去完成项目代码的同时，还需要时时刻刻注意代码的格式问题，这将是一件多么痛苦的事情！</p>\n<p>那么有没有什么办法，既可以保证 <code>ESLint</code> 规则校验，又可以解决严苛的格式规则导致的影响项目进度的问题呢？</p>\n<p>请看下一节。</p>\n<h2 id=\"05：大厂编程规范二：你知道代码格式化-Prettier-吗？\"><a href=\"#05：大厂编程规范二：你知道代码格式化-Prettier-吗？\" class=\"headerlink\" title=\"05：大厂编程规范二：你知道代码格式化 Prettier 吗？\"></a>05：大厂编程规范二：你知道代码格式化 Prettier 吗？</h2><p>在上一小节中，我们知道了 <code>ESLint</code> 可以让我们的代码格式变得更加规范，但是同样的它也会带来开发时编码复杂度上升的问题。</p>\n<p>那么有没有办法既可以保证 <code>ESLint</code> 规则校验，又可以让开发者无需关注格式问题来进行顺畅的开发呢？</p>\n<p>答案是：有的！</p>\n<p>而解决这个问题的关键就是 <code>prettier</code>！（点击 <a href=\"https://www.prettier.cn/\">这里</a> 进入 <code>prettier</code> 中文官网！）</p>\n<p><strong><code>prettier</code> 是什么？</strong></p>\n<ol>\n<li>一个代码格式化工具</li>\n<li>开箱即用</li>\n<li>可以直接集成到 <code>VSCode</code> 之中</li>\n<li>在保存时，让代码直接符合 <code>ESLint</code> 标准（需要通过一些简单配置）</li>\n</ol>\n<p>那么这些简单配置具体指的是什么呢？</p>\n<p>请看下一小节《ESLint 与 Prettier 配合解决代码格式问题》</p>\n<h2 id=\"06：ESLint-与-Prettier-配合解决代码格式问题\"><a href=\"#06：ESLint-与-Prettier-配合解决代码格式问题\" class=\"headerlink\" title=\"06：ESLint 与 Prettier 配合解决代码格式问题\"></a>06：ESLint 与 Prettier 配合解决代码格式问题</h2><p>在上一小节中，我们提到《<code>prettier</code> 可以在保存代码时，让我们的代码直接符合 <code>ESLint</code> 标准》但是想要实现这样的功能需要进行一些配置。</p>\n<p>那么这一小节，我们就来去完成这个功能：</p>\n<ol>\n<li><p>在 <code>VSCode</code> 中安装 <code>prettier</code> 插件（搜索 <code>prettier</code>），这个插件可以帮助我们在配置 <code>prettier</code> 的时候获得提示</p>\n<img src=\"02ESLint + Git Hooks/image-20210904195026475.png\" alt=\"image-20210904195026475\" style=\"zoom:50%;\" />\n</li>\n<li><p>在项目中新建 <code>.prettierrc</code> 文件，该文件为 <code>perttier</code> 默认配置文件</p>\n</li>\n<li><p>在该文件中写入如下配置：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &#x2F;&#x2F; 不尾随分号\n  &quot;semi&quot;: false,\n  &#x2F;&#x2F; 使用单引号\n  &quot;singleQuote&quot;: true,\n  &#x2F;&#x2F; 多行逗号分割的语法中，最后一行不加逗号\n  &quot;trailingComma&quot;: &quot;none&quot;\n&#125;</code></pre>\n</li>\n<li><p>打开 <code>VSCode</code> 《设置面板》</p>\n<img src=\"02ESLint + Git Hooks/image-20210904200638072.png\" alt=\"image-20210904200638072\" style=\"zoom:67%;\" />\n</li>\n<li><p>在设置中，搜索 <code>save</code> ，勾选 <code>Format On Save</code></p>\n<img src=\"02ESLint + Git Hooks/image-20210904200738067.png\" alt=\"image-20210904200738067\" style=\"zoom:67%;\" /></li>\n</ol>\n<p>至此，你即可在 <strong><code>VSCode</code> 保存时，自动格式化代码！</strong></p>\n<p><strong>但是！</strong> 你只做到这样还不够！</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li><p>VSCode 而言，默认一个 tab 等于 4 个空格，而 ESLint 希望一个 tab 为两个空格</p>\n</li>\n<li><p>如果大家的 VSCode 安装了多个代码格式化工具的化</p>\n</li>\n<li><p>ESLint 和 prettier 之间的冲突问题</p>\n</li>\n</ol></blockquote>\n<p>我们尝试在 <code>Home.vue</code> 中写入一个 <code>created</code> 方法，写入完成之后，打开我们的控制台我们会发现，此时代码抛出了一个 <code>ESLint</code> 的错误</p>\n<img src=\"02ESLint + Git Hooks/image-20210904201057594.png\" alt=\"image-20210904201057594\" style=\"zoom:67%;\" />\n\n<p>这个错误的意思是说：**<code>created</code> 这个方法名和后面的小括号之间，应该有一个空格！**</p>\n<p>但是当我们加入了这个空格之后，只要一保存代码，就会发现 <code>prettier</code> 会自动帮助我们去除掉这个空格。</p>\n<p>那么此时的这个问题就是 <code>prettier</code> 和 <code>ESLint</code> 的冲突问题。</p>\n<p>针对于这个问题我们想要解决也非常简单：</p>\n<ol>\n<li><p>打开 <code>.eslintrc.js</code> 配置文件</p>\n</li>\n<li><p>在 <code>rules</code> 规则下，新增一条规则</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#39;space-before-function-paren&#39;: &#39;off&#39;</code></pre>\n</li>\n<li><p>该规则表示关闭《方法名后增加空格》的规则</p>\n</li>\n<li><p>重启项目</p>\n</li>\n</ol>\n<p>至此我们整个的 <code>perttier</code> 和 <code>ESLint</code> 的配合使用就算是全部完成了。</p>\n<p>在之后我们写代码的过程中，只需要保存代码，那么 <code>perttier</code> 就会帮助我们自动格式化代码，使其符合 <code>ESLint</code> 的校验规则。而无需我们手动进行更改了。</p>\n<h2 id=\"07：大厂编程规范三：约定式提交规范\"><a href=\"#07：大厂编程规范三：约定式提交规范\" class=\"headerlink\" title=\"07：大厂编程规范三：约定式提交规范\"></a>07：大厂编程规范三：约定式提交规范</h2><p>在前面我们通过 <code>prettier + ESLint</code> 解决了代码格式的问题，但是我们之前也说过 <strong>编程规范</strong> 指的可不仅仅只是 <strong>代码格式规范</strong> 。</p>\n<p>除了 <strong>代码格式规范</strong> 之外，还有另外一个很重要的规范就是 <strong><code>git</code> 提交规范！</strong></p>\n<p>在现在的项目开发中，通常情况下，我们都会通过 <code>git</code> 来管理项目。只要通过 <code>git</code> 来管理项目，那么就必然会遇到使用 <code>git</code> 提交代码的场景</p>\n<p>当我们执行 <code>git commit -m &quot;描述信息&quot;</code> 的时候，我们知道此时必须添加一个描述信息。但是中华文化博大精深，不同的人去填写描述信息的时候，都会根据自己的理解来进行描述。</p>\n<p>而很多人的描述 “天马行空” ，这样就会导致别人在看你的提交记录时，看不懂你说的什么意思？不知道你当前的这次提交到底做了什么事情？会不会存在潜在的风险？</p>\n<p>比如说，我们来看这几条提交记录：</p>\n<p>![image-20210904203051754](02ESLint + Git Hooks&#x2F;image-20210904203051754.png)</p>\n<p>你能够想象得到它们经历了什么吗？</p>\n<p>所以 <strong><code>git</code> 提交规范</strong> 势在必行。</p>\n<p>对于 <strong><code>git</code> 提交规范</strong> 来说，不同的团队可能会有不同的标准，那么咱们今天就以目前使用较多的 <a href=\"https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines\">Angular团队规范</a> 延伸出的 <a href=\"https://www.conventionalcommits.org/zh-hans/v1.0.0/\">Conventional Commits specification（约定式提交）</a> 为例，来为大家详解  <strong><code>git</code> 提交规范</strong></p>\n<p>约定式提交规范要求如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;type&gt;[optional scope]: &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n\n--------  翻译 -------------\n    \n&lt;类型&gt;[可选 范围]: &lt;描述&gt;\n\n[可选 正文]\n\n[可选 脚注]</code></pre>\n\n<p>其中 <code>&lt;type&gt;</code> 类型，必须是一个可选的值，比如：</p>\n<ol>\n<li>新功能：<code>feat</code></li>\n<li>修复：<code>fix</code></li>\n<li>文档变更：<code>docs</code></li>\n<li>….</li>\n</ol>\n<p>也就是说，如果要按照 <strong>约定式提交规范</strong> 来去做的化，那么你的一次提交描述应该式这个样子的：</p>\n<img src=\"02ESLint + Git Hooks/image-20210904205519762.png\" alt=\"image-20210904205519762\"  />\n\n<p>我想大家看到这样的一个提交描述之后，心里的感觉应该和我一样是崩溃的！要是每次都这么写，写到猴年马月了！</p>\n<p>如果你有这样的困惑，那么 ”恭喜你“ ，接下来我们将一起解决这个问题！</p>\n<p>欲知后事如何，请看下一节《Commitizen助你规范化提交代码》</p>\n<h2 id=\"08：Commitizen助你规范化提交代码\"><a href=\"#08：Commitizen助你规范化提交代码\" class=\"headerlink\" title=\"08：Commitizen助你规范化提交代码\"></a>08：Commitizen助你规范化提交代码</h2><p>在上一小节我们讲述了 <a href=\"https://www.conventionalcommits.org/zh-hans/v1.0.0/\">约定式提交规范</a> ，我们知道如果严格安装 <strong>约定式提交规范</strong>， 来手动进行代码提交的话，那么是一件非常痛苦的事情，但是 <strong>git 提交规范的处理</strong> 又势在必行，那么怎么办呢？</p>\n<p>你遇到的问题，也是其他人所遇到的！</p>\n<p>经过了很多人的冥思苦想，就出现了一种叫做 <strong>git 提交规范化工具</strong> 的东西，而我们要学习的 <code>commitizen</code> 就是其中的佼佼者！</p>\n<p><code>commitizen</code> 仓库名为 <a href=\"https://github.com/commitizen/cz-cli\">cz-cli</a> ，它提供了一个 <code>git cz</code> 的指令用于代替 <code>git commit</code>，简单一句话介绍它：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>当你使用 <code>commitizen</code> 进行代码提交（git commit）时，<code>commitizen</code> 会提交你在提交时填写所有必需的提交字段！</p></blockquote>\n<p>这句话怎么解释呢？不用着急，下面我们就来安装并且使用一下 <code>commitizen</code> ，使用完成之后你自然就明白了这句话的意思！</p>\n<ol>\n<li><p>全局安装<code>Commitizen</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">npm install -g commitizen@4.2.4</code></pre>\n</li>\n<li><p>安装并配置 <code>cz-customizable</code> 插件</p>\n<ol>\n<li><p>使用 <code>npm</code> 下载 <code>cz-customizable</code></p>\n<pre class=\"line-numbers language-node\" data-language=\"node\"><code class=\"language-node\">npm i cz-customizable@6.3.0 --save-dev</code></pre>\n</li>\n<li><p>添加以下配置到 <code>package.json </code> 中</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">...\n  &quot;config&quot;: &#123;\n    &quot;commitizen&quot;: &#123;\n      &quot;path&quot;: &quot;node_modules&#x2F;cz-customizable&quot;\n    &#125;\n  &#125;</code></pre></li>\n</ol>\n</li>\n<li><p>项目根目录下创建 <code>.cz-config.js</code> 自定义提示文件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module.exports &#x3D; &#123;\n  &#x2F;&#x2F; 可选类型\n  types: [\n    &#123; value: &#39;feat&#39;, name: &#39;feat:     新功能&#39; &#125;,\n    &#123; value: &#39;fix&#39;, name: &#39;fix:      修复&#39; &#125;,\n    &#123; value: &#39;docs&#39;, name: &#39;docs:     文档变更&#39; &#125;,\n    &#123; value: &#39;style&#39;, name: &#39;style:    代码格式(不影响代码运行的变动)&#39; &#125;,\n    &#123;\n      value: &#39;refactor&#39;,\n      name: &#39;refactor: 重构(既不是增加feature，也不是修复bug)&#39;\n    &#125;,\n    &#123; value: &#39;perf&#39;, name: &#39;perf:     性能优化&#39; &#125;,\n    &#123; value: &#39;test&#39;, name: &#39;test:     增加测试&#39; &#125;,\n    &#123; value: &#39;chore&#39;, name: &#39;chore:    构建过程或辅助工具的变动&#39; &#125;,\n    &#123; value: &#39;revert&#39;, name: &#39;revert:   回退&#39; &#125;,\n    &#123; value: &#39;build&#39;, name: &#39;build:    打包&#39; &#125;\n  ],\n  &#x2F;&#x2F; 消息步骤\n  messages: &#123;\n    type: &#39;请选择提交类型:&#39;,\n    customScope: &#39;请输入修改范围(可选):&#39;,\n    subject: &#39;请简要描述提交(必填):&#39;,\n    body: &#39;请输入详细描述(可选):&#39;,\n    footer: &#39;请输入要关闭的issue(可选):&#39;,\n    confirmCommit: &#39;确认使用以上信息提交？(y&#x2F;n&#x2F;e&#x2F;h)&#39;\n  &#125;,\n  &#x2F;&#x2F; 跳过问题\n  skipQuestions: [&#39;body&#39;, &#39;footer&#39;],\n  &#x2F;&#x2F; subject文字长度默认是72\n  subjectLimit: 72\n&#125;</code></pre>\n</li>\n<li><p>使用 <code>git cz</code> 代替 <code>git commit</code><br>使用 <code>git cz</code> 代替 <code>git commit</code>，即可看到提示内容</p>\n</li>\n</ol>\n<p>那么到这里我们就已经可以使用<code>git cz</code> 来代替了 <code>git commit</code> 实现了规范化的提交诉求了，但是当前依然存在着一个问题，那就是我们必须要通过 <code>git cz</code> 指令才可以完成规范化提交！</p>\n<p>那么如果有马虎的同事，它们忘记了使用 <code>git cz</code> 指令，直接就提交了怎么办呢？</p>\n<p>那么有没有方式来限制这种错误的出现呢？</p>\n<p>答案是有的！</p>\n<p>下一节我们来看 《什么是 Git Hooks》</p>\n<h2 id=\"09：什么是-Git-Hooks\"><a href=\"#09：什么是-Git-Hooks\" class=\"headerlink\" title=\"09：什么是 Git Hooks\"></a>09：什么是 Git Hooks</h2><p>上一小节中我们使用了 <code>git cz</code> 来代替了 <code>git commit</code> 实现了规范化的提交诉求，但是依然存在着有人会忘记使用的问题。</p>\n<p>那么这一小节我们就来看一下这样的问题，我们应该如何去进行解决。</p>\n<p>先来明确一下我们最终要实现的效果：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>我们希望：</p>\n<p>当《提交描述信息》不符合 <a href=\"https://www.conventionalcommits.org/zh-hans/v1.0.0/\">约定式提交规范</a> 的时候，阻止当前的提交，并抛出对应的错误提示</p></blockquote>\n<p>而要实现这个目的，我们就需要先来了解一个概念，叫做 <code>Git hooks（git 钩子 || git 回调方法）</code> </p>\n<p>也就是：**<code>git</code> 在执行某个事件之前或之后进行一些其他额外的操作**</p>\n<p>而我们所期望的 <strong>阻止不合规的提交消息</strong>，那么就需要使用到 <code>hooks</code> 的钩子函数。</p>\n<p>下面是我整理出来的所有的 <code>hooks</code> ，大家可以进行一下参考，其中加粗的是常用到的 <code>hooks</code>：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Git Hook</th>\n<th>调用时机</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">pre-applypatch</td>\n<td><code>git am</code>执行前</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">applypatch-msg</td>\n<td><code>git am</code>执行前</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">post-applypatch</td>\n<td><code>git am</code>执行后</td>\n<td>不影响<code>git am</code>的结果</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>pre-commit</strong></td>\n<td><code>git commit</code>执行前</td>\n<td>可以用<code>git commit --no-verify</code>绕过</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>commit-msg</strong></td>\n<td><code>git commit</code>执行前</td>\n<td>可以用<code>git commit --no-verify</code>绕过</td>\n</tr>\n<tr>\n<td align=\"left\">post-commit</td>\n<td><code>git commit</code>执行后</td>\n<td>不影响<code>git commit</code>的结果</td>\n</tr>\n<tr>\n<td align=\"left\">pre-merge-commit</td>\n<td><code>git merge</code>执行前</td>\n<td>可以用<code>git merge --no-verify</code>绕过。</td>\n</tr>\n<tr>\n<td align=\"left\">prepare-commit-msg</td>\n<td><code>git commit</code>执行后，编辑器打开之前</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">pre-rebase</td>\n<td><code>git rebase</code>执行前</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">post-checkout</td>\n<td><code>git checkout</code>或<code>git switch</code>执行后</td>\n<td>如果不使用<code>--no-checkout</code>参数，则在<code>git clone</code>之后也会执行。</td>\n</tr>\n<tr>\n<td align=\"left\">post-merge</td>\n<td><code>git commit</code>执行后</td>\n<td>在执行<code>git pull</code>时也会被调用</td>\n</tr>\n<tr>\n<td align=\"left\">pre-push</td>\n<td><code>git push</code>执行前</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">pre-receive</td>\n<td><code>git-receive-pack</code>执行前</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">update</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">post-receive</td>\n<td><code>git-receive-pack</code>执行后</td>\n<td>不影响<code>git-receive-pack</code>的结果</td>\n</tr>\n<tr>\n<td align=\"left\">post-update</td>\n<td>当 <code>git-receive-pack</code>对 <code>git push</code> 作出反应并更新仓库中的引用时</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">push-to-checkout</td>\n<td>当&#96;&#96;git-receive-pack<code>对</code>git push<code>做出反应并更新仓库中的引用时，以及当推送试图更新当前被签出的分支且</code>receive.denyCurrentBranch<code>配置被设置为</code>updateInstead&#96;时</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">pre-auto-gc</td>\n<td><code>git gc --auto</code>执行前</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">post-rewrite</td>\n<td>执行<code>git commit --amend</code>或<code>git rebase</code>时</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">sendemail-validate</td>\n<td><code>git send-email</code>执行前</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">fsmonitor-watchman</td>\n<td>配置<code>core.fsmonitor</code>被设置为<code>.git/hooks/fsmonitor-watchman</code>或<code>.git/hooks/fsmonitor-watchmanv2</code>时</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">p4-pre-submit</td>\n<td><code>git-p4 submit</code>执行前</td>\n<td>可以用<code>git-p4 submit --no-verify</code>绕过</td>\n</tr>\n<tr>\n<td align=\"left\">p4-prepare-changelist</td>\n<td><code>git-p4 submit</code>执行后，编辑器启动前</td>\n<td>可以用<code>git-p4 submit --no-verify</code>绕过</td>\n</tr>\n<tr>\n<td align=\"left\">p4-changelist</td>\n<td><code>git-p4 submit</code>执行并编辑完<code>changelist message</code>后</td>\n<td>可以用<code>git-p4 submit --no-verify</code>绕过</td>\n</tr>\n<tr>\n<td align=\"left\">p4-post-changelist</td>\n<td><code>git-p4 submit</code>执行后</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">post-index-change</td>\n<td>索引被写入到<code>read-cache.c do_write_locked_index</code>后</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>PS：详细的 <code>HOOKS介绍</code> 可点击<a href=\"https://git-scm.com/docs/githooks\">这里</a>查看</p>\n<p>整体的 <code>hooks</code> 非常多，当时我们其中用的比较多的其实只有两个：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Git Hook</th>\n<th>调用时机</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>pre-commit</strong></td>\n<td><code>git commit</code>执行前<br />它不接受任何参数，并且在获取提交日志消息并进行提交之前被调用。脚本<code>git commit</code>以非零状态退出会导致命令在创建提交之前中止。</td>\n<td>可以用<code>git commit --no-verify</code>绕过</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>commit-msg</strong></td>\n<td><code>git commit</code>执行前<br />可用于将消息规范化为某种项目标准格式。<br />还可用于在检查消息文件后拒绝提交。</td>\n<td>可以用<code>git commit --no-verify</code>绕过</td>\n</tr>\n</tbody></table>\n<p>简单来说这两个钩子：</p>\n<ol>\n<li><code>commit-msg</code>：可以用来规范化标准格式，并且可以按需指定是否要拒绝本次提交</li>\n<li><code>pre-commit</code>：会在提交前被调用，并且可以按需指定是否要拒绝本次提交</li>\n</ol>\n<p>而我们接下来要做的关键，就在这两个钩子上面。</p>\n<h2 id=\"10：使用-husky-commitlint-检查提交描述是否符合规范要求\"><a href=\"#10：使用-husky-commitlint-检查提交描述是否符合规范要求\" class=\"headerlink\" title=\"10：使用 husky + commitlint 检查提交描述是否符合规范要求\"></a>10：使用 husky + commitlint 检查提交描述是否符合规范要求</h2><p>在上一小节中，我们了解了 <code>git hooks</code> 的概念，那么接下来我们就使用 <code>git hooks</code> 来去校验我们的提交信息。</p>\n<p>要完成这么个目标，那么我们需要使用两个工具：</p>\n<ol>\n<li><p><a href=\"https://github.com/conventional-changelog/commitlint\">commitlint</a>：用于检查提交信息</p>\n</li>\n<li><p><a href=\"https://github.com/typicode/husky\">husky</a>：是<code>git hooks</code>工具</p>\n</li>\n</ol>\n<p>注意：**<code>npm</code> 需要在 7.x 以上版本！！！！！**</p>\n<p>那么下面我们分别来去安装一下这两个工具：</p>\n<h3 id=\"commitlint\"><a href=\"#commitlint\" class=\"headerlink\" title=\"commitlint\"></a>commitlint</h3><ol>\n<li><p>安装依赖：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install --save-dev @commitlint&#x2F;config-conventional@12.1.4 @commitlint&#x2F;cli@12.1.4</code></pre>\n</li>\n<li><p>创建 <code>commitlint.config.js</code> 文件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">echo &quot;module.exports &#x3D; &#123;extends: [&#39;@commitlint&#x2F;config-conventional&#39;]&#125;&quot; &gt; commitlint.config.js</code></pre>\n</li>\n<li><p>打开 <code>commitlint.config.js</code> ， 增加配置项（ <a href=\"https://github.com/conventional-changelog/commitlint/blob/master/@commitlint/config-conventional/index.js\">config-conventional 默认配置点击可查看</a> ）：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module.exports &#x3D; &#123;\n  &#x2F;&#x2F; 继承的规则\n  extends: [&#39;@commitlint&#x2F;config-conventional&#39;],\n  &#x2F;&#x2F; 定义规则类型\n  rules: &#123;\n    &#x2F;&#x2F; type 类型定义，表示 git 提交的 type 必须在以下类型范围内\n    &#39;type-enum&#39;: [\n      2,\n      &#39;always&#39;,\n      [\n        &#39;feat&#39;, &#x2F;&#x2F; 新功能 feature\n        &#39;fix&#39;, &#x2F;&#x2F; 修复 bug\n        &#39;docs&#39;, &#x2F;&#x2F; 文档注释\n        &#39;style&#39;, &#x2F;&#x2F; 代码格式(不影响代码运行的变动)\n        &#39;refactor&#39;, &#x2F;&#x2F; 重构(既不增加新功能，也不是修复bug)\n        &#39;perf&#39;, &#x2F;&#x2F; 性能优化\n        &#39;test&#39;, &#x2F;&#x2F; 增加测试\n        &#39;chore&#39;, &#x2F;&#x2F; 构建过程或辅助工具的变动\n        &#39;revert&#39;, &#x2F;&#x2F; 回退\n        &#39;build&#39; &#x2F;&#x2F; 打包\n      ]\n    ],\n    &#x2F;&#x2F; subject 大小写不做校验\n    &#39;subject-case&#39;: [0]\n  &#125;\n&#125;\n</code></pre></li>\n</ol>\n<p><strong>注意：确保保存为 <code>UTF-8</code> 的编码格式</strong>，否则可能会出现以下错误：</p>\n<p>![image-20210710121456416](02ESLint + Git Hooks&#x2F;image-20210710121456416.png)</p>\n<p>接下来我们来安装 <code>husky</code></p>\n<h3 id=\"husky\"><a href=\"#husky\" class=\"headerlink\" title=\"husky\"></a>husky</h3><ol>\n<li><p>安装依赖：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install husky@7.0.1 --save-dev</code></pre>\n</li>\n<li><p>启动 <code>hooks</code> ， 生成 <code>.husky</code> 文件夹</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npx husky install</code></pre>\n\n<p>![image-20210906202034156](02ESLint + Git Hooks&#x2F;image-20210906202034156.png)</p>\n</li>\n<li><p>在 <code>package.json</code> 中生成 <code>prepare</code> 指令（ <strong>需要 npm &gt; 7.0 版本</strong> ）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm set-script prepare &quot;husky install&quot;</code></pre>\n\n<img src=\"02ESLint + Git Hooks/image-20210906202128323.png\" alt=\"image-20210906202128323\" style=\"zoom:50%;\" />\n</li>\n<li><p>执行 <code>prepare</code> 指令</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm run prepare</code></pre>\n</li>\n<li><p>执行成功，提示</p>\n<img src=\" 02ESLint + Git Hooks/image-20210710120053221.png\" alt=\"image-20210710120053221\" style=\"zoom:80%;\" />\n</li>\n<li><p>添加 <code>commitlint</code> 的 <code>hook</code> 到 <code>husky</code>中，并指令在 <code>commit-msg</code> 的 <code>hooks</code> 下执行 <code>npx --no-install commitlint --edit &quot;$1&quot;</code> 指令</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npx husky add .husky&#x2F;commit-msg &#39;npx --no-install commitlint --edit &quot;$1&quot;&#39;</code></pre>\n</li>\n<li><p>此时的 <code>.husky</code> 的文件结构<br>![image-20210710120228931]( 02ESLint + Git Hooks&#x2F;image-20210710120228931.png)</p>\n</li>\n</ol>\n<p>至此， 不符合规范的 commit 将不再可提交：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">PS F:\\xxxxxxxxxxxxxxxxxxxxx\\imooc-admin&gt; git commit -m &quot;测试&quot;\n⧗   input: 测试\n✖   subject may not be empty [subject-empty]\n✖   type may not be empty [type-empty]\n\n✖   found 2 problems, 0 warnings\nⓘ   Get help: https:&#x2F;&#x2F;github.com&#x2F;conventional-changelog&#x2F;commitlint&#x2F;#what-is-commitlint\n\nhusky - commit-msg hook exited with code 1 (error)</code></pre>\n\n\n\n<p>那么至此，我们就已经可以处理好了 <strong>强制规范化的提交要求</strong>，到现在 <strong>不符合规范的提交信息，将不可在被提交！</strong></p>\n<p>那么到这里我们的 <strong>规范化目标</strong> 就完成了吗？</p>\n<p>当然没有！</p>\n<p>现在我们还缺少一个 <strong>规范化的处理</strong> ，那就是 <strong>代码格式提交规范处理！</strong></p>\n<p>有人看到这里可能说，咦！ 这个怎么看着这么眼熟啊？这个事情我们之前不是做过了吗？还需要在处理什么？</p>\n<p>欲知后事如何，请看下一节《通过 pre-commit 处理提交时代码规范》</p>\n<h2 id=\"11：通过-pre-commit-检测提交时代码规范\"><a href=\"#11：通过-pre-commit-检测提交时代码规范\" class=\"headerlink\" title=\"11：通过 pre-commit 检测提交时代码规范\"></a>11：通过 pre-commit 检测提交时代码规范</h2><p>在 <strong><code>ESLint</code> 与 <code>Prettier</code> 配合解决代码格式问题</strong> 的章节中，我们讲解了如何处理 <strong>本地！代码格式问题。</strong></p>\n<p>但是这样的一个格式处理问题，他只能够在本地进行处理，并且我们还需要 <strong>手动在  <code>VSCode</code> 中配置自动保存</strong> 才可以。那么这样就会存在一个问题，要是有人忘记配置这个东西了怎么办呢？他把代码写的乱七八糟的直接就提交了怎么办呢？</p>\n<p>所以我们就需要有一种方式来规避这种风险。</p>\n<p>那么想要完成这么一个操作就需要使用 <code>husky</code> 配合 <code>eslint</code> 才可以实现。</p>\n<p>我们期望通过 <strong><code>husky</code> 监测 <code>pre-commit</code> 钩子，在该钩子下执行 <code>npx eslint --ext .js,.vue src</code></strong> 指令来去进行相关检测：</p>\n<ol>\n<li><p>执行 <code>npx husky add .husky/pre-commit &quot;npx eslint --ext .js,.vue src&quot;</code> 添加 <code>commit</code> 时的 <code>hook</code> （<code>npx eslint --ext .js,.vue src</code> 会在执行到该 hook 时运行）</p>\n</li>\n<li><p>该操作会生成对应文件 <code>pre-commit</code>：<br>![image-20210906204043915](02ESLint + Git Hooks&#x2F;image-20210906204043915.png)</p>\n</li>\n<li><p>关闭 <code>VSCode</code> 的自动保存操作</p>\n</li>\n<li><p>修改一处代码，使其不符合 <code>ESLint</code> 校验规则</p>\n</li>\n<li><p>执行 <strong>提交操作</strong> 会发现，抛出一系列的错误，代码无法提交</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">PS F:\\xxxxxxxxxxxxxxxxxxx\\imooc-admin&gt; git commit -m &#39;test&#39;\n\nF:\\xxxxxxxxxxxxxxxx\\imooc-admin\\src\\views\\Home.vue\n  13:9  error  Strings must use singlequote  quotes\n\n✖ 1 problem (1 error, 0 warnings)\n  1 error and 0 warnings potentially fixable with the &#96;--fix&#96; option.\n\nhusky - pre-commit hook exited with code 1 (error)</code></pre>\n\n\n</li>\n<li><p>想要提交代码，必须处理完成所有的错误信息</p>\n</li>\n</ol>\n<p>那么到这里位置，我们已经通过 <code>pre-commit</code> 检测到了代码的提交规范问题。</p>\n<p>那么到这里就万事大吉了吗？</p>\n<p>在这个世界上从来不缺的就是懒人，错误的代码格式可能会抛出很多的 <code>ESLint</code> 错误，让人看得头皮发麻。严重影响程序猿的幸福指数。</p>\n<p>那么有没有办法，让程序猿在 0 配置的前提下，哪怕代码格式再乱，也可以 <strong>”自动“</strong> 帮助他修复对应的问题，并且完成提交呢？</p>\n<p>你别说，还真有！</p>\n<p>那么咱们来看下一节《lint-staged 自动修复格式错误》</p>\n<h2 id=\"12：lint-staged-自动修复格式错误\"><a href=\"#12：lint-staged-自动修复格式错误\" class=\"headerlink\" title=\"12：lint-staged 自动修复格式错误\"></a>12：lint-staged 自动修复格式错误</h2><p>在上一章中我们通过 <code>pre-commit</code> 处理了 <strong>检测代码的提交规范问题，当我们进行代码提交时，会检测所有的代码格式规范</strong> 。</p>\n<p>但是这样会存在两个问题：</p>\n<ol>\n<li>我们只修改了个别的文件，没有必要检测所有的文件代码格式</li>\n<li>它只能给我们提示出对应的错误，我们还需要手动的进行代码修改</li>\n</ol>\n<p>那么这一小节，我们就需要处理这两个问题</p>\n<p>那么想要处理这两个问题，就需要使用另外一个插件 <a href=\"https://github.com/okonet/lint-staged\">lint-staged</a> ！</p>\n<p><a href=\"https://github.com/okonet/lint-staged\">lint-staged</a> 可以让你当前的代码检查 <strong>只检查本次修改更新的代码，并在出现错误的时候，自动修复并且推送</strong></p>\n<p><a href=\"https://github.com/okonet/lint-staged\">lint-staged</a> 无需单独安装，我们生成项目时，<code>vue-cli</code> 已经帮助我们安装过了，所以我们直接使用就可以了</p>\n<ol>\n<li><p>修改 <code>package.json</code> 配置</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&quot;lint-staged&quot;: &#123;\n    &quot;src&#x2F;**&#x2F;*.&#123;js,vue&#125;&quot;: [\n      &quot;eslint --fix&quot;,\n      &quot;git add&quot;\n    ]\n  &#125;</code></pre>\n</li>\n<li><p>如上配置，每次它只会在你本地 <code>commit</code> 之前，校验你提交的内容是否符合你本地配置的 <code>eslint</code>规则(这个见文档 <a href=\"https://panjiachen.github.io/vue-element-admin-site/zh/guide/advanced/eslint.html\">ESLint</a> )，校验会出现两种结果：</p>\n<ol>\n<li>如果符合规则：则会提交成功。</li>\n<li>如果不符合规则：它会自动执行 <code>eslint --fix</code> 尝试帮你自动修复，如果修复成功则会帮你把修复好的代码提交，如果失败，则会提示你错误，让你修好这个错误之后才能允许你提交代码。</li>\n</ol>\n</li>\n<li><p>修改 <code>.husky/pre-commit</code> 文件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">#!&#x2F;bin&#x2F;sh\n. &quot;$(dirname &quot;$0&quot;)&#x2F;_&#x2F;husky.sh&quot;\n\nnpx lint-staged\n</code></pre>\n</li>\n<li><p>再次执行提交代码</p>\n</li>\n<li><p>发现 <strong>暂存区中</strong> 不符合 <code>ESlint</code> 的内容，被自动修复</p>\n</li>\n</ol>\n<h2 id=\"13：关于-vetur-检测-template-的单一根元素的问题\"><a href=\"#13：关于-vetur-检测-template-的单一根元素的问题\" class=\"headerlink\" title=\"13：关于 vetur 检测 template 的单一根元素的问题\"></a>13：关于 <code>vetur</code> 检测 <code>template</code> 的单一根元素的问题</h2><p>在 <code>vue2</code> 中，<code>template</code> 只允许存在一个根元素，但是这种情况在 <code>vue3</code> 里发生了一些变化。</p>\n<p>在 <code>Vue3</code> 中开始支持 <code>template</code> 存在多个根元素了。但是因为 <code>VSCode</code> 中的一些插件没有及时更新，所以当你在 <code>template</code> 中写入多个根元素时，有可能会出现以下的错误：</p>\n<p>![image-20210717190311264](02ESLint + Git Hooks&#x2F;image-20210717190311264.png)</p>\n<p>出现这个问题的原因主要是： <code>vetur</code> 这个 <code>vsCode</code> 插件依然按照 <code>vue2</code> 的单一根元素逻辑进行检测，所以会出现提示错误的问题。</p>\n<p>但是大家要注意，虽然这样不太好看，但是 <strong>该问题并不影响代码运行！</strong></p>\n<p>如果你实在觉得这样太丑的话，那么可以通过以下方案来 <strong>取消 <code>vetur</code> 对 <code>template</code> 的检测：</strong> </p>\n<ol>\n<li>在 <code>VSCode</code>  的设置中，搜索 <code>vetur</code>，找到如下设置，取消勾选</li>\n</ol>\n<p>![image-20210717190629024](02ESLint + Git Hooks&#x2F;image-20210717190629024.png)</p>\n<ol start=\"2\">\n<li>重启 <code>VSCode</code></li>\n</ol>\n<p>按以上两种方式执行之后，你的多根元素就不会出现不好看的错误了<br><img src=\"02ESLint + Git Hooks/image-20210910092410872.png\" alt=\"image-20210910092410872\" style=\"zoom:50%;\" /></p>\n<h2 id=\"14：总结\"><a href=\"#14：总结\" class=\"headerlink\" title=\"14：总结\"></a>14：总结</h2><p>本章中我们处理了 <strong>编程格式规范的问题</strong>，整个规范大体可以分为两大类：</p>\n<ol>\n<li>代码格式规范</li>\n<li><code>git</code> 提交规范</li>\n</ol>\n<p><strong>代码格式规范：</strong></p>\n<p>对于 <strong>代码格式规范</strong> 而言，我们通过 <code>ESLint</code> + <code>Prettier</code> + <code>VSCode 配置</code> 配合进行了处理。</p>\n<p>最终达到了在保存代码时，自动规范化代码格式的目的。</p>\n<p><strong><code>git</code> 提交规范：</strong></p>\n<p>对于 <strong><code>git</code> 提交规范</strong> 而言我们使用了 <code>husky</code> 来监测 <code>Git hooks</code> 钩子，并且通过以下插件完成了对应的配置：</p>\n<ol>\n<li><a href=\"https://www.conventionalcommits.org/zh-hans/v1.0.0/\">约定式提交规范</a></li>\n<li><a href=\"https://github.com/commitizen/cz-cli\">commitizen</a>：git 提交规范化工具</li>\n<li><a href=\"https://github.com/conventional-changelog/commitlint\">commitlint</a>：用于检查提交信息</li>\n<li><code>pre-commit</code>： <code>git hooks</code> 钩子</li>\n<li><a href=\"https://github.com/okonet/lint-staged\">lint-staged</a>：只检查本次修改更新的代码，并在出现错误的时候，自动修复并且推送</li>\n</ol>\n<p>那么处理完成这些规范操作之后，在下一章我们将会正式进入到咱们的项目开发之中！</p>\n","text":"02ESLint + Git Hooks01：为什么需要编程规范？工欲善其事，必先利其器 对于一些大型的企业级项目而言，通常情况下我们都是需要一个团队来进行开发的。而又因为团队人员对技术理解上的参差不齐，所以就会导致出现一种情况，那就是《一个项目无法具备统一的编程规范，导致项目的...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"18 mins."},"categories":[{"name":"vue3.2后台管理系统","slug":"vue3-2后台管理系统","count":12,"path":"api/categories/vue3-2后台管理系统.json"}],"tags":[{"name":"后台","slug":"后台","count":12,"path":"api/tags/后台.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#02ESLint-Git-Hooks\"><span class=\"toc-text\">02ESLint + Git Hooks</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#01%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83%EF%BC%9F\"><span class=\"toc-text\">01：为什么需要编程规范？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#02%EF%BC%9A%E4%BD%BF%E7%94%A8-vue-cli-%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">02：使用 vue-cli 创建项目</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#03%EF%BC%9A%E5%8D%87%E7%BA%A7%E6%9C%80%E6%96%B0%E7%9A%84-vue-%E7%89%88%E6%9C%AC%E4%BB%A5%E6%94%AF%E6%8C%81-script-setup-%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">03：升级最新的 vue 版本以支持 script setup 语法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#04%EF%BC%9A%E5%A4%A7%E5%8E%82%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83%E4%B8%80%EF%BC%9A%E4%BB%A3%E7%A0%81%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7-ESLint-%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%A4%9A%E5%B0%91%EF%BC%9F\"><span class=\"toc-text\">04：大厂编程规范一：代码检测工具 ESLint 你了解多少？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#05%EF%BC%9A%E5%A4%A7%E5%8E%82%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83%E4%BA%8C%EF%BC%9A%E4%BD%A0%E7%9F%A5%E9%81%93%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96-Prettier-%E5%90%97%EF%BC%9F\"><span class=\"toc-text\">05：大厂编程规范二：你知道代码格式化 Prettier 吗？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#06%EF%BC%9AESLint-%E4%B8%8E-Prettier-%E9%85%8D%E5%90%88%E8%A7%A3%E5%86%B3%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">06：ESLint 与 Prettier 配合解决代码格式问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#07%EF%BC%9A%E5%A4%A7%E5%8E%82%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83%E4%B8%89%EF%BC%9A%E7%BA%A6%E5%AE%9A%E5%BC%8F%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">07：大厂编程规范三：约定式提交规范</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#08%EF%BC%9ACommitizen%E5%8A%A9%E4%BD%A0%E8%A7%84%E8%8C%83%E5%8C%96%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">08：Commitizen助你规范化提交代码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#09%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF-Git-Hooks\"><span class=\"toc-text\">09：什么是 Git Hooks</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10%EF%BC%9A%E4%BD%BF%E7%94%A8-husky-commitlint-%E6%A3%80%E6%9F%A5%E6%8F%90%E4%BA%A4%E6%8F%8F%E8%BF%B0%E6%98%AF%E5%90%A6%E7%AC%A6%E5%90%88%E8%A7%84%E8%8C%83%E8%A6%81%E6%B1%82\"><span class=\"toc-text\">10：使用 husky + commitlint 检查提交描述是否符合规范要求</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#commitlint\"><span class=\"toc-text\">commitlint</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#husky\"><span class=\"toc-text\">husky</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11%EF%BC%9A%E9%80%9A%E8%BF%87-pre-commit-%E6%A3%80%E6%B5%8B%E6%8F%90%E4%BA%A4%E6%97%B6%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">11：通过 pre-commit 检测提交时代码规范</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12%EF%BC%9Alint-staged-%E8%87%AA%E5%8A%A8%E4%BF%AE%E5%A4%8D%E6%A0%BC%E5%BC%8F%E9%94%99%E8%AF%AF\"><span class=\"toc-text\">12：lint-staged 自动修复格式错误</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#13%EF%BC%9A%E5%85%B3%E4%BA%8E-vetur-%E6%A3%80%E6%B5%8B-template-%E7%9A%84%E5%8D%95%E4%B8%80%E6%A0%B9%E5%85%83%E7%B4%A0%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">13：关于 vetur 检测 template 的单一根元素的问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#14%EF%BC%9A%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">14：总结</span></a></li></ol></li></ol>","author":{"name":"西非","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个跑路的设计师","socials":{"github":"https://github.com/xuhui-web","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/a18482157085","juejin":"https://juejin.cn/user/1535369026995422","customs":{}}},"mapped":true,"prev_post":{"title":"03搭建登录架构","uid":"d2e69685384ff9d5134e8cda74cb22b8","slug":"vue3.2后台管理系统/03搭建登录架构","date":"2022-08-22T13:02:44.000Z","updated":"2022-08-23T02:02:22.182Z","comments":true,"path":"api/articles/vue3.2后台管理系统/03搭建登录架构.json","keywords":null,"cover":"/img/photo-1591693117893-7cbfc0a7ac69.jpg","text":"03搭建登录架构01：前言在上一章中，我们处理了基本的编码规范，那么接下来我们就可以实现对应的项目开发了。 那么在之后的项目开发中，我们将会使用最新的 vue3 script setup 语法。 所以说在本章节中我们需要做两件事情： vue3 最新特性及最新语法 登录功能开发 不...","link":"","photos":[],"count_time":{"symbolsCount":"30k","symbolsTime":"27 mins."},"categories":[{"name":"vue3.2后台管理系统","slug":"vue3-2后台管理系统","count":12,"path":"api/categories/vue3-2后台管理系统.json"}],"tags":[{"name":"后台","slug":"后台","count":12,"path":"api/tags/后台.json"}],"author":{"name":"西非","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个跑路的设计师","socials":{"github":"https://github.com/xuhui-web","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/a18482157085","juejin":"https://juejin.cn/user/1535369026995422","customs":{}}}},"next_post":{"title":"01项目前置","uid":"5d151b192bb48856221120bca811fbcf","slug":"vue3.2后台管理系统/01项目前置","date":"2022-08-22T11:02:44.000Z","updated":"2022-08-23T02:07:15.780Z","comments":true,"path":"api/articles/vue3.2后台管理系统/01项目前置.json","keywords":null,"cover":"/img/SplitShire-21-1455-1024x683.jpg","text":"01项目前置vue 的最新变化自从 vue 在 2020年09月18日 发布了 3.0 的版本之后，很多开发者都开始尝试被大受推崇的 Composition API ，但是在经过了短期的追捧之后，大家却发现，在企业中 Composition API 却并没有被大范围的普及，很多的...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"vue3.2后台管理系统","slug":"vue3-2后台管理系统","count":12,"path":"api/categories/vue3-2后台管理系统.json"}],"tags":[{"name":"后台","slug":"后台","count":12,"path":"api/tags/后台.json"}],"author":{"name":"西非","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个跑路的设计师","socials":{"github":"https://github.com/xuhui-web","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/a18482157085","juejin":"https://juejin.cn/user/1535369026995422","customs":{}}}}}