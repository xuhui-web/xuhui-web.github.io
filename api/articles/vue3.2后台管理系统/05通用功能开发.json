{"title":"05通用功能开发","uid":"5c163a9965f56c02ab2c674f0a7895b4","slug":"vue3.2后台管理系统/05通用功能开发","date":"2022-08-22T15:02:44.000Z","updated":"2022-08-24T10:27:59.367Z","comments":true,"path":"api/articles/vue3.2后台管理系统/05通用功能开发.json","keywords":null,"cover":"/img/photo-1471238119891-2e56eca253b4.jpg","content":"<h1 id=\"第五章：通用功能开发\"><a href=\"#第五章：通用功能开发\" class=\"headerlink\" title=\"第五章：通用功能开发\"></a>第五章：通用功能开发</h1><h2 id=\"5-01：开篇\"><a href=\"#5-01：开篇\" class=\"headerlink\" title=\"5-01：开篇\"></a>5-01：开篇</h2><p>在后台项目的前端开发之中，存在着很多的通用业务功能，并且存在着一定的技术难度。</p>\n<p>所以说就有很多人在面临这些功能的时候，大多数时都是采用 <code>ctrl + c || v</code> 的形式来进行实现。这就导致了虽然做过类似的功能，但是对这些功能的实现原理一知半解。</p>\n<p>那么针对于这样的问题，就有了咱们这一章。</p>\n<p>在本章中我们列举出了常见的一些通用功能，具体如下：</p>\n<ol>\n<li>国际化</li>\n<li>动态换肤</li>\n<li><code>screenfull</code></li>\n<li><code>headerSearch</code></li>\n<li><code>tagView</code></li>\n<li><code>guide</code></li>\n</ol>\n<p>来为大家进行讲解。</p>\n<p>相信大家完成了本章的学习之后，对于这些功能无论是从 <strong>原理上</strong> 还是从 <strong>实现上</strong> 都可以做到 <strong>了然于胸</strong> 的目标</p>\n<h2 id=\"5-02：国际化实现原理\"><a href=\"#5-02：国际化实现原理\" class=\"headerlink\" title=\"5-02：国际化实现原理\"></a>5-02：国际化实现原理</h2><p>先来看一个需求：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>我们有一个变量 <code>msg</code> ，但是这个 <code>msg</code> 有且只能有两个值：</p>\n<ol>\n<li>hello world</li>\n<li>你好世界</li>\n</ol>\n<p>要求：根据需要切换 <code>msg</code> 的值</p></blockquote>\n<p>这样的一个需求就是 国际化 的需求，那么我们可以通过以下代码来实现这个需求</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;script&gt;\n  &#x2F;&#x2F; 1. 定义 msg 值的数据源\n  const messages &#x3D; &#123;\n    en: &#123;\n      msg: &#39;hello world&#39;\n    &#125;,\n    zh: &#123;\n      msg: &#39;你好世界&#39;\n    &#125;\n  &#125;\n  &#x2F;&#x2F; 2. 定义切换变量\n  let locale &#x3D; &#39;en&#39;\n  &#x2F;&#x2F; 3. 定义赋值函数\n  function t(key) &#123;\n    return messages[locale][key]\n  &#125;\n  &#x2F;&#x2F; 4. 为 msg 赋值 \n  let msg &#x3D; t(&#39;msg&#39;)\n  console.log(msg);\n  &#x2F;&#x2F; 修改 locale， 重新执行 t 方法，获取不同语言环境下的值\n\n&lt;&#x2F;script&gt;</code></pre>\n\n<p> 总结：</p>\n<ol>\n<li>通过一个变量来 <strong>控制</strong> 语言环境</li>\n<li>所有语言环境下的数据源要 <strong>预先</strong> 定义好</li>\n<li>通过一个方法来获取 <strong>当前语言</strong> 下 <strong>指定属性</strong> 的值</li>\n<li>该值即为国际化下展示值</li>\n</ol>\n<h2 id=\"5-03：基于-vue-i18n-V9-的国际化实现方案分析\"><a href=\"#5-03：基于-vue-i18n-V9-的国际化实现方案分析\" class=\"headerlink\" title=\"5-03：基于 vue-i18n V9  的国际化实现方案分析\"></a>5-03：基于 vue-i18n V9  的国际化实现方案分析</h2><p>在 <code>vue</code> 的项目中，我们不需要手写这么复杂的一些基础代码，可以直接使用 <a href=\"https://vue-i18n.intlify.dev/\">vue-i18n</a> 进行实现（注意：**<code>vue3</code> 下需要使用 <code>V 9.x</code> 的 <code>i18n</code>**）</p>\n<p><a href=\"https://vue-i18n.intlify.dev/guide/\">vue-i18n</a> 的使用可以分为四个部分：</p>\n<ol>\n<li>创建 <code>messages</code> 数据源</li>\n<li>创建 <code>locale</code> 语言变量</li>\n<li>初始化 <code>i18n</code> 实例</li>\n<li>注册 <code>i18n</code> 实例</li>\n</ol>\n<p>那么接下来我们就去实现以下：</p>\n<ol>\n<li><p>安装 <code>vue-i18n</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install vue-i18n@next</code></pre>\n\n\n</li>\n<li><p>创建 <code>i18n/index.js</code> 文件</p>\n</li>\n<li><p>创建 <code>messages</code> 数据源</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const messages &#x3D; &#123;\n  en: &#123;\n    msg: &#123;\n      test: &#39;hello world&#39;\n    &#125;\n  &#125;,\n  zh: &#123;\n    msg: &#123;\n      test: &#39;你好世界&#39;\n    &#125;\n  &#125;\n&#125;</code></pre>\n</li>\n<li><p>创建 <code>locale</code> 语言变量</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const locale &#x3D; &#39;en&#39;</code></pre>\n</li>\n<li><p>初始化 <code>i18n</code> 实例</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; createI18n &#125; from &#39;vue-i18n&#39;\n\nconst i18n &#x3D; createI18n(&#123;\n  &#x2F;&#x2F; 使用 Composition API 模式，则需要将其设置为false\n  legacy: false,\n  &#x2F;&#x2F; 全局注入 $t 函数\n  globalInjection: true,\n  locale,\n  messages\n&#125;)</code></pre>\n</li>\n<li><p>把 <code>i18n</code> 注册到 <code>vue</code> 实例</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\nexport default i18n</code></pre>\n</li>\n<li><p>在 <code>main.js</code> 中导入</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; i18n （PS：导入放到 APP.vue 导入之前，因为后面我们会在 app.vue 中使用国际化内容）\nimport i18n from &#39;@&#x2F;i18n&#39;\n...\napp.use(i18n)</code></pre>\n</li>\n<li><p>在 <code>layout/components/Sidebar/index.vue</code> 中使用 <code>i18n</code></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;h1 class&#x3D;&quot;logo-title&quot; v-if&#x3D;&quot;$store.getters.sidebarOpened&quot;&gt;\n        &#123;&#123; $t(&#39;msg.test&#39;) &#125;&#125;\n&lt;&#x2F;h1&gt;</code></pre>\n</li>\n<li><p>修改 <code>locale</code> 的值，即可改变展示的内容</p>\n</li>\n</ol>\n<p>截止到现在我们已经实现了 <code>i18n</code> 的最基础用法，那么解下来我们就可以在项目中使用 <code>i18n</code> 完成国际化。</p>\n<p>项目中完成国际化分成以下几步进行:</p>\n<ol>\n<li>封装 <code>langSelect</code> 组件用于修改 <code>locale</code></li>\n<li>导入 <code>el-locale</code> 语言包</li>\n<li>创建自定义语言包</li>\n</ol>\n<h2 id=\"5-04：方案落地：封装-langSelect-组件\"><a href=\"#5-04：方案落地：封装-langSelect-组件\" class=\"headerlink\" title=\"5-04：方案落地：封装  langSelect  组件\"></a>5-04：方案落地：封装  langSelect  组件</h2><ol>\n<li><p>定义 <code>store/app.js</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; LANG &#125; from &#39;@&#x2F;constant&#39;\nimport &#123; getItem, setItem &#125; from &#39;@&#x2F;utils&#x2F;storage&#39;\nexport default &#123;\n  namespaced: true,\n  state: () &#x3D;&gt; (&#123;\n    ...\n    language: getItem(LANG) || &#39;zh&#39;\n  &#125;),\n  mutations: &#123;\n    ...\n    &#x2F;**\n     * 设置国际化\n     *&#x2F;\n    setLanguage(state, lang) &#123;\n      setItem(LANG, lang)\n      state.language &#x3D; lang\n    &#125;\n  &#125;,\n  actions: &#123;&#125;\n&#125;\n</code></pre>\n\n\n</li>\n<li><p>在 <code>constant</code> 中定义常量</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 国际化\nexport const LANG &#x3D; &#39;language&#39;</code></pre>\n\n\n</li>\n<li><p>创建 <code>components/LangSelect/index</code> </p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;el-dropdown\n    trigger&#x3D;&quot;click&quot;\n    class&#x3D;&quot;international&quot;\n    @command&#x3D;&quot;handleSetLanguage&quot;\n  &gt;\n    &lt;div&gt;\n      &lt;el-tooltip content&#x3D;&quot;国际化&quot; :effect&#x3D;&quot;effect&quot;&gt;\n        &lt;svg-icon icon&#x3D;&quot;language&quot; &#x2F;&gt;\n      &lt;&#x2F;el-tooltip&gt;\n    &lt;&#x2F;div&gt;\n    &lt;template #dropdown&gt;\n      &lt;el-dropdown-menu&gt;\n        &lt;el-dropdown-item :disabled&#x3D;&quot;language &#x3D;&#x3D;&#x3D; &#39;zh&#39;&quot; command&#x3D;&quot;zh&quot;&gt;\n          中文\n        &lt;&#x2F;el-dropdown-item&gt;\n        &lt;el-dropdown-item :disabled&#x3D;&quot;language &#x3D;&#x3D;&#x3D; &#39;en&#39;&quot; command&#x3D;&quot;en&quot;&gt;\n          English\n        &lt;&#x2F;el-dropdown-item&gt;\n      &lt;&#x2F;el-dropdown-menu&gt;\n    &lt;&#x2F;template&gt;\n  &lt;&#x2F;el-dropdown&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport &#123; useI18n &#125; from &#39;vue-i18n&#39;\nimport &#123; defineProps, computed &#125; from &#39;vue&#39;\nimport &#123; useStore &#125; from &#39;vuex&#39;\nimport &#123; ElMessage &#125; from &#39;element-plus&#39;\n\ndefineProps(&#123;\n  effect: &#123;\n    type: String,\n    default: &#39;dark&#39;,\n    validator: function(value) &#123;\n      &#x2F;&#x2F; 这个值必须匹配下列字符串中的一个\n      return [&#39;dark&#39;, &#39;light&#39;].indexOf(value) !&#x3D;&#x3D; -1\n    &#125;\n  &#125;\n&#125;)\n\nconst store &#x3D; useStore()\nconst language &#x3D; computed(() &#x3D;&gt; store.getters.language)\n\n&#x2F;&#x2F; 切换语言的方法\nconst i18n &#x3D; useI18n()\nconst handleSetLanguage &#x3D; lang &#x3D;&gt; &#123;\n  i18n.locale.value &#x3D; lang\n  store.commit(&#39;app&#x2F;setLanguage&#39;, lang)\n  ElMessage.success(&#39;更新成功&#39;)\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n</li>\n<li><p>在 <code>navbar</code> 中导入 <code>LangSelect</code></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;navbar&quot;&gt;\n    ...\n    &lt;div class&#x3D;&quot;right-menu&quot;&gt;\n      &lt;lang-select class&#x3D;&quot;right-menu-item hover-effect&quot; &#x2F;&gt;\n      &lt;!-- 头像 --&gt;\n      ...\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport LangSelect from &#39;@&#x2F;components&#x2F;LangSelect&#39;\n...\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n.navbar &#123;\n  ...\n\n  .right-menu &#123;\n    ...\n\n    ::v-deep .right-menu-item &#123;\n      display: inline-block;\n      padding: 0 18px 0 0;\n      font-size: 24px;\n      color: #5a5e66;\n      vertical-align: text-bottom;\n\n      &amp;.hover-effect &#123;\n        cursor: pointer;\n      &#125;\n    &#125;\n\n    ...\n&#125;\n&lt;&#x2F;style&gt;\n</code></pre></li>\n</ol>\n<h2 id=\"5-05：方案落地：element-plus-国际化处理\"><a href=\"#5-05：方案落地：element-plus-国际化处理\" class=\"headerlink\" title=\"5-05：方案落地：element-plus 国际化处理\"></a>5-05：方案落地：element-plus 国际化处理</h2><p>截止到目前，我们的国际化内容已经基本功能已经处理完成了。接下来需要处理的就是对应的语言包，有了语言包就可以实现整个项目中的所有国际化处理了。</p>\n<p>那么对于语言包来说，我们整个项目中会分成两部分：</p>\n<ol>\n<li><code>element-plus</code> 语言包：用来处理 <code>element</code> 组件的国际化功能</li>\n<li>自定义语言包：用来处理 <strong>非</strong><code>element</code> 组件的国际化功能</li>\n</ol>\n<p>那么首先我们先来处理 <code>element-plus</code> 语言包：</p>\n<p>**按照正常的逻辑，我们是可以通过 <code>element-ui</code> 配合 <code>vue-i18n</code>来实现国际化功能的，但是目前的 <code>element-plus</code> 尚未提供配合  <code>vue-i18n</code> 实现国际化的方式！ **</p>\n<p>所以说，我们暂时只能先去做临时处理，等到 <code>element-plus</code> 支持 <code>vue-i18n</code> 功能之后，我们再进行对接实现</p>\n<p>那么临时处理我们怎么去做呢？</p>\n<ol>\n<li><p>升级 <code>element-plus</code> 到最新版本</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm i element-plus</code></pre>\n\n<p>目前项目中使用的最新版本为：<code>^1.1.0-beta.15</code></p>\n</li>\n<li><p>升级版本之后，左侧 <code>menu</code> 菜单无法正常显示，这是因为 <code>element-plus</code> 修改了 <code>el-submenu</code> 的组件名称</p>\n</li>\n<li><p>到 <code>layout/components/Sidebar/SidebarItem</code> 中，修改 <code>el-submenu</code> 为 <code>el-sub-menu</code></p>\n</li>\n<li><p>接下来实现国际化</p>\n</li>\n<li><p>在 <code>plugins/index</code> 中导入 <code>element</code> 的中 文、英文语言包：</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import zhCn from &#39;element-plus&#x2F;es&#x2F;locale&#x2F;lang&#x2F;zh-cn&#39;\nimport en from &#39;element-plus&#x2F;lib&#x2F;locale&#x2F;lang&#x2F;en&#39;</code></pre>\n\n<ol start=\"6\">\n<li><p>注册 <code>element</code> 时，根据当前语言选择使用哪种语言包</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import store from &#39;@&#x2F;store&#39;\n\nexport default app &#x3D;&gt; &#123;\n  app.use(ElementPlus, &#123;\n    locale: store.getters.language &#x3D;&#x3D;&#x3D; &#39;en&#39; ? en : zhCn\n  &#125;)\n&#125;</code></pre></li>\n</ol>\n<h2 id=\"5-06：方案落地：自定义语言包国际化处理\"><a href=\"#5-06：方案落地：自定义语言包国际化处理\" class=\"headerlink\" title=\"5-06：方案落地：自定义语言包国际化处理\"></a>5-06：方案落地：自定义语言包国际化处理</h2><p>处理完 <code>element</code> 的国际化内容之后，接下来我们来处理 <strong>自定义语言包</strong>。</p>\n<p>自定义语言包我们使用了 <code>commonJS</code> 导出了一个对象，这个对象就是所有的 <strong>自定义语言对象</strong> </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>大家可以在 <strong>资料&#x2F;lang</strong> 中获取到所有的语言包</p></blockquote>\n<ol>\n<li><p>复制 <code>lang</code> 文件夹到 <code>i18n</code> 中</p>\n</li>\n<li><p>在 <code>lang/index</code> 中，导入语言包</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import mZhLocale from &#39;.&#x2F;lang&#x2F;zh&#39;\nimport mEnLocale from &#39;.&#x2F;lang&#x2F;en&#39;</code></pre>\n</li>\n<li><p>在 <code>messages</code> 中注册到语言包</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const messages &#x3D; &#123;\n  en: &#123;\n    msg: &#123;\n      ...mEnLocale\n    &#125;\n  &#125;,\n  zh: &#123;\n    msg: &#123;\n      ...mZhLocale\n    &#125;\n  &#125;\n&#125;</code></pre></li>\n</ol>\n<h2 id=\"5-07：方案落地：处理项目国际化内容\"><a href=\"#5-07：方案落地：处理项目国际化内容\" class=\"headerlink\" title=\"5-07：方案落地：处理项目国际化内容\"></a>5-07：方案落地：处理项目国际化内容</h2><p>在处理好了国际化的语言包之后，接下来我们就可以应用国际化功能到我们的项目中</p>\n<p>对于我们目前的项目而言，需要进行国际化处理的地方主要分为：</p>\n<ol>\n<li>登录页面</li>\n<li><code>navbar</code> 区域</li>\n<li><code>sidebar</code> 区域</li>\n<li>面包屑区域</li>\n</ol>\n<p>那么这一小节，我们先来处理前两个</p>\n<p><strong>登录页面：</strong></p>\n<p><code>login/index</code></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;login-container&quot;&gt;\n    ...\n      &lt;div class&#x3D;&quot;title-container&quot;&gt;\n        &lt;h3 class&#x3D;&quot;title&quot;&gt;&#123;&#123; $t(&#39;msg.login.title&#39;) &#125;&#125;&lt;&#x2F;h3&gt;\n          &lt;lang-select class&#x3D;&quot;lang-select&quot; effect&#x3D;&quot;light&quot;&gt;&lt;&#x2F;lang-select&gt;\n      &lt;&#x2F;div&gt;\n\n      ...\n\n      &lt;el-button\n        type&#x3D;&quot;primary&quot;\n        style&#x3D;&quot;width: 100%; margin-bottom: 30px&quot;\n        :loading&#x3D;&quot;loading&quot;\n        @click&#x3D;&quot;handleLogin&quot;\n        &gt;&#123;&#123; $t(&#39;msg.login.loginBtn&#39;) &#125;&#125;&lt;&#x2F;el-button\n      &gt;\n      \n      &lt;div class&#x3D;&quot;tips&quot; v-html&#x3D;&quot;$t(&#39;msg.login.desc&#39;)&quot;&gt;&lt;&#x2F;div&gt;\n    &lt;&#x2F;el-form&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport &#123; useI18n &#125; from &#39;vue-i18n&#39;\n...\n&#x2F;&#x2F; 验证规则\nconst i18n &#x3D; useI18n()\nconst loginRules &#x3D; ref(&#123;\n  username: [\n    &#123;\n      ...\n      message: i18n.t(&#39;msg.login.usernameRule&#39;)\n    &#125;\n  ],\n  ...\n&#125;)\n...\n&lt;&#x2F;script&gt;\n\n</code></pre>\n\n<p><code>login/rules</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import i18n from &#39;@&#x2F;i18n&#39;\nexport const validatePassword &#x3D; () &#x3D;&gt; &#123;\n  return (rule, value, callback) &#x3D;&gt; &#123;\n    if (value.length &lt; 6) &#123;\n      callback(new Error(i18n.global.t(&#39;msg.login.passwordRule&#39;)))\n    &#125; else &#123;\n      callback()\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n\n<p> <strong><code>navbar</code> 区域</strong></p>\n<p><code>layout/components/navbar</code></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;navbar&quot;&gt;\n    ...\n        &lt;template #dropdown&gt;\n          &lt;el-dropdown-menu class&#x3D;&quot;user-dropdown&quot;&gt;\n            &lt;router-link to&#x3D;&quot;&#x2F;&quot;&gt;\n              &lt;el-dropdown-item&gt; &#123;&#123; $t(&#39;msg.navBar.home&#39;) &#125;&#125; &lt;&#x2F;el-dropdown-item&gt;\n            &lt;&#x2F;router-link&gt;\n            &lt;a target&#x3D;&quot;_blank&quot; href&#x3D;&quot;&quot;&gt;\n              &lt;el-dropdown-item&gt;&#123;&#123; $t(&#39;msg.navBar.course&#39;) &#125;&#125;&lt;&#x2F;el-dropdown-item&gt;\n            &lt;&#x2F;a&gt;\n            &lt;el-dropdown-item divided @click&#x3D;&quot;logout&quot;&gt;\n              &#123;&#123; $t(&#39;msg.navBar.logout&#39;) &#125;&#125;\n            &lt;&#x2F;el-dropdown-item&gt;\n          &lt;&#x2F;el-dropdown-menu&gt;\n        &lt;&#x2F;template&gt;\n      &lt;&#x2F;el-dropdown&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;</code></pre>\n\n<p><code>components/LangSelect/index</code></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;el-tooltip :content&#x3D;&quot;$t(&#39;msg.navBar.lang&#39;)&quot; :effect&#x3D;&quot;effect&quot;&gt;\n       ...\n    \n    \nconst handleSetLanguage &#x3D; lang &#x3D;&gt; &#123;\n  ...\n  ElMessage.success(i18n.t(&#39;msg.toast.switchLangSuccess&#39;))\n&#125;</code></pre>\n\n\n\n<h2 id=\"5-08：方案落地：sidebar-与-面包屑-区域的国际化处理\"><a href=\"#5-08：方案落地：sidebar-与-面包屑-区域的国际化处理\" class=\"headerlink\" title=\"5-08：方案落地：sidebar 与 面包屑 区域的国际化处理\"></a>5-08：方案落地：sidebar 与 面包屑 区域的国际化处理</h2><p><strong>sidebar 区域</strong></p>\n<p>目前对于 <code>sidebar</code> 而言，显示的文本是我们在定义路由表时的 <code>title</code></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;span&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;span&gt;</code></pre>\n\n<p>我们可以 <strong>把 <code>title</code> 作为语言包内容的 <code>key</code> 进行处理</strong></p>\n<p>创建 <code>utils/i18n</code> 工具模块，用于 <strong>将 <code>title</code> 转化为国际化内容</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import i18n from &#39;@&#x2F;i18n&#39;\nexport function generateTitle(title) &#123;\n  return i18n.global.t(&#39;msg.route.&#39; + title)\n&#125;\n</code></pre>\n\n<p>在 <code>layout/components/Sidebar/MenuItem.vue</code> 中导入该方法：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  ...\n  &lt;span&gt;&#123;&#123; generateTitle(title) &#125;&#125;&lt;&#x2F;span&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport &#123; generateTitle &#125; from &#39;@&#x2F;utils&#x2F;i18n&#39;\n...\n&lt;&#x2F;script&gt;\n</code></pre>\n\n<p>最后修改下 <code>sidebarHeader</code> 的内容</p>\n<pre class=\"line-numbers language-php+HTML\" data-language=\"php+HTML\"><code class=\"language-php+HTML\">&lt;h1 class&#x3D;&quot;logo-title&quot; v-if&#x3D;&quot;$store.getters.sidebarOpened&quot;&gt;\n\timooc-admin\n&lt;&#x2F;h1&gt;</code></pre>\n\n\n\n<p><strong>面包屑区域：</strong></p>\n<p>在 <code>components/Breadcrumb/index</code></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n...\n    &lt;!-- 不可点击项 --&gt;\n    &lt;span v-if&#x3D;&quot;index &#x3D;&#x3D;&#x3D; breadcrumbData.length - 1&quot; class&#x3D;&quot;no-redirect&quot;&gt;&#123;&#123;\n        generateTitle(item.meta.title)\n        &#125;&#125;&lt;&#x2F;span&gt;\n    &lt;!-- 可点击项 --&gt;\n    &lt;a v-else class&#x3D;&quot;redirect&quot; @click.prevent&#x3D;&quot;onLinkClick(item)&quot;&gt;&#123;&#123;\n        generateTitle(item.meta.title)\n        &#125;&#125;&lt;&#x2F;a&gt;\n...\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport &#123; generateTitle &#125; from &#39;@&#x2F;utils&#x2F;i18n&#39;\n...\n&lt;&#x2F;script&gt;\n</code></pre>\n\n\n\n<h2 id=\"5-09：方案落地：国际化缓存处理\"><a href=\"#5-09：方案落地：国际化缓存处理\" class=\"headerlink\" title=\"5-09：方案落地：国际化缓存处理\"></a>5-09：方案落地：国际化缓存处理</h2><p>我们希望在 <strong>刷新页面后，当前的国际化选择可以被保留</strong>，所以想要实现这个功能，那么就需要进行 <strong>国际化的缓存处理</strong></p>\n<p>此处的缓存，我们依然通过两个方面进行：</p>\n<ol>\n<li><code>vuex</code> 缓存</li>\n<li><code>LocalStorage</code> 缓存</li>\n</ol>\n<p>只不过这里的缓存，我们已经在处理 <strong><code>langSelect</code> 组件时</strong> 处理完成了，所以此时我们只需要使用缓存下来的数据即可。</p>\n<p>在 <code>i18n/index</code> 中，创建 <code>getLanguage</code> 方法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import store from &#39;@&#x2F;store&#39;\n&#x2F;**\n * 返回当前 lang\n *&#x2F;\nfunction getLanguage() &#123;\n  return store &amp;&amp; store.getters &amp;&amp; store.getters.language\n&#125;</code></pre>\n\n<p>修改 <code>createI18n</code> 的 <code>locale</code> 为 <code>getLanguage()</code> </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const i18n &#x3D; createI18n(&#123;\n  ...\n  locale: getLanguage()\n&#125;)</code></pre>\n\n\n\n<h2 id=\"5-10：国际化方案总结\"><a href=\"#5-10：国际化方案总结\" class=\"headerlink\" title=\"5-10：国际化方案总结\"></a>5-10：国际化方案总结</h2><p>国际化是前端项目中的一个非常常见的功能，那么在前端项目中实现国际化主要依靠的就是 <code>vue-i18n</code> 这个第三方的包。</p>\n<p>关于国际化的实现原理大家可以参照 <strong>国际化实现原理</strong> 这一小节，这里我们就不再赘述了。</p>\n<p>而  <code>i18n</code> 的使用，整体来说就分为这么四步：</p>\n<ol>\n<li>创建 <code>messages</code> 数据源</li>\n<li>创建 <code>locale</code> 语言变量</li>\n<li>初始化 <code>i18n</code> 实例</li>\n<li>注册 <code>i18n</code> 实例</li>\n</ol>\n<p>核心的内容其实就是 数据源的部分，但是大家需要注意，如果你的项目中使用了 <strong>第三方组件库</strong> ，那么不要忘记 <strong>第三方组件库的数据源</strong> 需要 <strong>单独</strong> 进行处理！</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><p>接下来我们来处理 <strong>动态换肤</strong> 功能。</p>\n<p>关于 <strong>动态换肤</strong> 我们之前已经提到过了，在 <code>layout/components/Sidebar/SidebarMenu.vue</code> 中，我们实现 <code>el-menu</code> 的背景色时，说过：<strong>此处将来会实现换肤功能，所以我们不能直接写死，而需要通过一个动态的值，来进行指定</strong></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;el-menu\n    :default-active&#x3D;&quot;activeMenu&quot;\n    :collapse&#x3D;&quot;!$store.getters.sidebarOpened&quot;\n    :background-color&#x3D;&quot;$store.getters.cssVar.menuBg&quot;\n    :text-color&#x3D;&quot;$store.getters.cssVar.menuText&quot;\n    :active-text-color&#x3D;&quot;$store.getters.cssVar.menuActiveText&quot;\n    :unique-opened&#x3D;&quot;true&quot;\n    router\n  &gt;x&#39;z\n    ...\n  &lt;&#x2F;el-menu&gt;</code></pre>\n\n<p>那么换句话而言，想要实现 <strong>动态换肤</strong> 的一个前置条件就是：<strong>色值不可以写死！</strong></p>\n<p>那么为什么会有这个前置条件呢？动态换肤又是如何来去实现的呢？这一小节我们来看一下这个问题。</p>\n<p>首先我们先来说一下动态换肤的实现方式。</p>\n<p>在 <code>scss</code> 中，我们可以通过 <code>$变量名:变量值</code> 的方式定义  <code>css 变量</code>，然后通过该 <code>css 变量</code> 来去指定某一块 <code>DOM</code> 对应的颜色。</p>\n<p>那么大家可以想一下，如果我此时改变了该 <code>css 变量</code> 的值，那么所对应的 <code>DOM</code> 颜色是不是也会同步发生变化？</p>\n<p>当大量的 <code>DOM</code> 都依赖于这个 <code>css 变量</code> 设置颜色时，我们是不是只需要改变这个 <code>css 变量</code>，那么所有 <code>DOM</code> 的颜色是不是都会发生变化，所谓的 <strong>动态换肤</strong> 是不是就可以实现了！</p>\n<p>这个就是实现 <strong>动态换肤</strong> 的原理。</p>\n<p>而在我们的项目中想要实现动态换肤，需要同时处理两个方面的内容：</p>\n<ol>\n<li><code>element-plus</code> 主题</li>\n<li>非 <code>element-plus</code> 主题</li>\n</ol>\n<p>那么下面我们就分别来去处理这两块主题对应的内容</p>\n<h2 id=\"5-11：动态换肤原理分析\"><a href=\"#5-11：动态换肤原理分析\" class=\"headerlink\" title=\"5-11：动态换肤原理分析\"></a>5-11：动态换肤原理分析</h2><p>接下来我们来处理 <strong>动态换肤</strong> 功能</p>\n<p>关于 <strong>动态换肤</strong> 我们之前已经提到过了，在 <code>layout/components/SidebarMenu.vue</code> 中，我们实现 <code>el-menu</code> 的背景色时，说过 <strong>此处将来会实现换肤功能，所以我们不能直接写死，而需要通过一个动态的值进行指定</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;el-menu\n   :default-active&#x3D;&quot;activeMenu&quot;\n   :collapse&#x3D;&quot;!$store.getters.sidebarOpened&quot;\n   :background-color&#x3D;&quot;$store.getters.cssVar.menuBg&quot;\n   :text-color&#x3D;&quot;$store.getters.cssVar.menuText&quot;\n   :active-text-color&#x3D;&quot;$store.getters.cssVar.menuActiveText&quot;\n   :unique-opened&#x3D;&quot;true&quot;\n   router\n &gt;</code></pre>\n\n<p>那么换句话而言，想要实现 <strong>动态换肤</strong> 的一个前置条件就是：<strong>色值不可以写死！</strong></p>\n<p>那么为什么会有这个前置条件呢？动态换肤又是如何去进行实现的呢？这一小节我们来看一下这个问题。</p>\n<p>首先我们先来说一下动态换肤的实现方式。</p>\n<p>在 <code>scss</code> 中，我们可以通过 <code>$变量名:变量值</code> 的方式定义 <code>css 变量</code> ，然后通过该 <code>css</code> 来去指定某一块 <code>DOM</code> 对应的颜色。</p>\n<p>那么大家可以想一下，如果我此时改变了该 <code>css</code> 变量的值，那么对应的 <code>DOM</code> 颜色是不是也会同步发生变化。</p>\n<p>当大量的 <code>DOM</code> 都依赖这个 <code>css 变量</code> 设置颜色时，我们是不是只需要改变这个 <code>css 变量</code> ，那么所有 <code>DOM</code> 的颜色是不是都会发生变化，所谓的 <strong>动态换肤</strong> 是不是就可以实现了！</p>\n<p>这个就是 <strong>动态换肤</strong> 的实现原理</p>\n<p>而在我们的项目中想要实现动态换肤，需要同时处理两个方面的内容：</p>\n<ol>\n<li><code>element-plus</code> 主题</li>\n<li>非 <code>element-plus</code> 主题</li>\n</ol>\n<p>那么下面我们就分别来去处理这两块主题对应的内容</p>\n<h2 id=\"5-12：动态换肤实现方案分析\"><a href=\"#5-12：动态换肤实现方案分析\" class=\"headerlink\" title=\"5-12：动态换肤实现方案分析\"></a>5-12：动态换肤实现方案分析</h2><p>明确好了原理之后，接下来我们就来理一下咱们的实现思路。</p>\n<p>从原理中我们可以得到以下两个关键信息：</p>\n<ol>\n<li>动态换肤的关键是修改 <code>css 变量</code> 的值</li>\n<li>换肤需要同时兼顾<ol>\n<li><code>element-plus</code> </li>\n<li>非 <code>element-plus</code></li>\n</ol>\n</li>\n</ol>\n<p>那么根据以上关键信息，我们就可以得出对应的实现方案</p>\n<ol>\n<li>创建一个组件 <code>ThemeSelect</code> 用来处理修改之后的 <code>css 变量</code> 的值</li>\n<li>根据新值修改 <code>element-plus</code>  主题色</li>\n<li>根据新值修改非 <code>element-plus</code>  主题色</li>\n</ol>\n<h2 id=\"5-13：方案落地：创建-ThemeSelect-组件\"><a href=\"#5-13：方案落地：创建-ThemeSelect-组件\" class=\"headerlink\" title=\"5-13：方案落地：创建  ThemeSelect 组件\"></a>5-13：方案落地：创建  ThemeSelect 组件</h2><p>查看完成之后的项目我们可以发现，<code>ThemeSelect</code> 组件将由两部分组成：</p>\n<ol>\n<li><code>navbar</code> 中的展示图标</li>\n<li>选择颜色的弹出层</li>\n</ol>\n<p>那么本小节我们就先来处理第一个 <strong><code>navbar</code> 中的展示图标</strong></p>\n<p>创建 <code>components/ThemeSelect/index</code> 组件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;template&gt;\n  &lt;!-- 主题图标  \n  v-bind：https:&#x2F;&#x2F;v3.cn.vuejs.org&#x2F;api&#x2F;instance-properties.html#attrs --&gt;\n  &lt;el-dropdown\n    v-bind&#x3D;&quot;$attrs&quot;\n    trigger&#x3D;&quot;click&quot;\n    class&#x3D;&quot;theme&quot;\n    @command&#x3D;&quot;handleSetTheme&quot;\n  &gt;\n    &lt;div&gt;\n      &lt;el-tooltip :content&#x3D;&quot;$t(&#39;msg.navBar.themeChange&#39;)&quot;&gt;\n        &lt;svg-icon icon&#x3D;&quot;change-theme&quot; &#x2F;&gt;\n      &lt;&#x2F;el-tooltip&gt;\n    &lt;&#x2F;div&gt;\n    &lt;template #dropdown&gt;\n      &lt;el-dropdown-menu&gt;\n        &lt;el-dropdown-item command&#x3D;&quot;color&quot;&gt;\n          &#123;&#123; $t(&#39;msg.theme.themeColorChange&#39;) &#125;&#125;\n        &lt;&#x2F;el-dropdown-item&gt;\n      &lt;&#x2F;el-dropdown-menu&gt;\n    &lt;&#x2F;template&gt;\n  &lt;&#x2F;el-dropdown&gt;\n  &lt;!-- 展示弹出层 --&gt;\n  &lt;div&gt;&lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nconst handleSetTheme &#x3D; command &#x3D;&gt; &#123;&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;&lt;&#x2F;style&gt;\n</code></pre>\n\n<p>在 <code>layout/components/navbar</code> 中进行引用</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;div class&#x3D;&quot;right-menu&quot;&gt;\n      &lt;theme-picker class&#x3D;&quot;right-menu-item hover-effect&quot;&gt;&lt;&#x2F;theme-picker&gt;\n      \nimport ThemePicker from &#39;@&#x2F;components&#x2F;ThemeSelect&#x2F;index&#39;</code></pre>\n\n<h2 id=\"5-14：方案落地：创建-SelectColor-组件\"><a href=\"#5-14：方案落地：创建-SelectColor-组件\" class=\"headerlink\" title=\"5-14：方案落地：创建  SelectColor 组件\"></a>5-14：方案落地：创建  SelectColor 组件</h2><p>在有了 <code>ThemeSelect </code> 之后，接下来我们来去处理颜色选择的组件 <code>SelectColor</code>，在这里我们会用到 <code>element</code> 中的 <code>el-color-picker</code> 组件</p>\n<p>对于 <code>SelectColor</code> 的处理，我们需要分成两步进行：</p>\n<ol>\n<li>完成 <code>SelectColor</code> 弹窗展示的双向数据绑定</li>\n<li>把选中的色值进行本地缓存</li>\n</ol>\n<p>那么下面咱们先来看第一步：<strong>完成 <code>SelectColor</code> 弹窗展示的双向数据绑定</strong></p>\n<p>创建 <code>components/ThemePicker/components/SelectColor.vue</code> </p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;el-dialog title&#x3D;&quot;提示&quot; :model-value&#x3D;&quot;modelValue&quot; @close&#x3D;&quot;closed&quot; width&#x3D;&quot;22%&quot;&gt;\n    &lt;div class&#x3D;&quot;center&quot;&gt;\n      &lt;p class&#x3D;&quot;title&quot;&gt;&#123;&#123; $t(&#39;msg.theme.themeColorChange&#39;) &#125;&#125;&lt;&#x2F;p&gt;\n      &lt;el-color-picker\n        v-model&#x3D;&quot;mColor&quot;\n        :predefine&#x3D;&quot;predefineColors&quot;\n      &gt;&lt;&#x2F;el-color-picker&gt;\n    &lt;&#x2F;div&gt;\n    &lt;template #footer&gt;\n      &lt;span class&#x3D;&quot;dialog-footer&quot;&gt;\n        &lt;el-button @click&#x3D;&quot;closed&quot;&gt;&#123;&#123; $t(&#39;msg.universal.cancel&#39;) &#125;&#125;&lt;&#x2F;el-button&gt;\n        &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;comfirm&quot;&gt;&#123;&#123;\n          $t(&#39;msg.universal.confirm&#39;)\n        &#125;&#125;&lt;&#x2F;el-button&gt;\n      &lt;&#x2F;span&gt;\n    &lt;&#x2F;template&gt;\n  &lt;&#x2F;el-dialog&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport &#123; defineProps, defineEmits, ref &#125; from &#39;vue&#39;\ndefineProps(&#123;\n  modelValue: &#123;\n    type: Boolean,\n    required: true\n  &#125;\n&#125;)\nconst emits &#x3D; defineEmits([&#39;update:modelValue&#39;])\n\n&#x2F;&#x2F; 预定义色值\nconst predefineColors &#x3D; [\n  &#39;#ff4500&#39;,\n  &#39;#ff8c00&#39;,\n  &#39;#ffd700&#39;,\n  &#39;#90ee90&#39;,\n  &#39;#00ced1&#39;,\n  &#39;#1e90ff&#39;,\n  &#39;#c71585&#39;,\n  &#39;rgba(255, 69, 0, 0.68)&#39;,\n  &#39;rgb(255, 120, 0)&#39;,\n  &#39;hsv(51, 100, 98)&#39;,\n  &#39;hsva(120, 40, 94, 0.5)&#39;,\n  &#39;hsl(181, 100%, 37%)&#39;,\n  &#39;hsla(209, 100%, 56%, 0.73)&#39;,\n  &#39;#c7158577&#39;\n]\n&#x2F;&#x2F; 默认色值\nconst mColor &#x3D; ref(&#39;#00ff00&#39;)\n\n&#x2F;**\n * 关闭\n *&#x2F;\nconst closed &#x3D; () &#x3D;&gt; &#123;\n  emits(&#39;update:modelValue&#39;, false)\n&#125;\n&#x2F;**\n * 确定\n * 1. 修改主题色\n * 2. 保存最新的主题色\n * 3. 关闭 dialog\n *&#x2F;\nconst comfirm &#x3D; async () &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 3. 关闭 dialog\n  closed()\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n.center &#123;\n  text-align: center;\n  .title &#123;\n    margin-bottom: 12px;\n  &#125;\n&#125;\n&lt;&#x2F;style&gt;\n</code></pre>\n\n\n\n<p>在 <code>ThemePicker/index</code> 中使用该组件</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  ...\n  &lt;!-- 展示弹出层 --&gt;\n  &lt;div&gt;\n    &lt;select-color v-model&#x3D;&quot;selectColorVisible&quot;&gt;&lt;&#x2F;select-color&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport SelectColor from &#39;.&#x2F;components&#x2F;SelectColor.vue&#39;\nimport &#123; ref &#125; from &#39;vue&#39;\n\nconst selectColorVisible &#x3D; ref(false)\nconst handleSetTheme &#x3D; command &#x3D;&gt; &#123;\n  selectColorVisible.value &#x3D; true\n&#125;\n&lt;&#x2F;script&gt;\n</code></pre>\n\n<p> 完成双向数据绑定之后，我们来处理第二步：<strong>把选中的色值进行本地缓存</strong></p>\n<p>缓存的方式分为两种：</p>\n<ol>\n<li><code>vuex</code></li>\n<li>本地存储</li>\n</ol>\n<p>在 <code>constants/index</code> 下新建常量值</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 主题色保存的 key\nexport const MAIN_COLOR &#x3D; &#39;mainColor&#39;\n&#x2F;&#x2F; 默认色值\nexport const DEFAULT_COLOR &#x3D; &#39;#409eff&#39;</code></pre>\n\n<p>创建 <code>store/modules/theme</code> 模块，用来处理 <strong>主题色</strong> 相关内容</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; getItem, setItem &#125; from &#39;@&#x2F;utils&#x2F;storage&#39;\nimport &#123; MAIN_COLOR, DEFAULT_COLOR &#125; from &#39;@&#x2F;constant&#39;\nexport default &#123;\n  namespaced: true,\n  state: () &#x3D;&gt; (&#123;\n    mainColor: getItem(MAIN_COLOR) || DEFAULT_COLOR\n  &#125;),\n  mutations: &#123;\n    &#x2F;**\n     * 设置主题色\n     *&#x2F;\n    setMainColor(state, newColor) &#123;\n      state.mainColor &#x3D; newColor\n      setItem(MAIN_COLOR, newColor)\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<p>在 <code>store/getters</code> 下指定快捷访问</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">mainColor: state &#x3D;&gt; state.theme.mainColor</code></pre>\n\n<p>在 <code>store/index</code> 中导入 <code>theme</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">...\nimport theme from &#39;.&#x2F;modules&#x2F;theme.js&#39;\n\nexport default createStore(&#123;\n  getters,\n  modules: &#123;\n    ...\n    theme\n  &#125;\n&#125;)</code></pre>\n\n<p>在 <code>selectColor</code> 中，设置初始色值 和  缓存色值</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">...\n\n&lt;script setup&gt;\nimport &#123; defineProps, defineEmits, ref &#125; from &#39;vue&#39;\nimport &#123; useStore &#125; from &#39;vuex&#39;\n...\nconst store &#x3D; useStore()\n&#x2F;&#x2F; 默认色值\nconst mColor &#x3D; ref(store.getters.mainColor)\n...\n&#x2F;**\n * 确定\n * 1. 修改主题色\n * 2. 保存最新的主题色\n * 3. 关闭 dialog\n *&#x2F;\nconst comfirm &#x3D; async () &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 2. 保存最新的主题色\n  store.commit(&#39;theme&#x2F;setMainColor&#39;, mColor.value)\n  &#x2F;&#x2F; 3. 关闭 dialog\n  closed()\n&#125;\n&lt;&#x2F;script&gt;\n\n</code></pre>\n\n<h2 id=\"5-15：方案落地：处理-element-plus-主题变更原理与步骤分析\"><a href=\"#5-15：方案落地：处理-element-plus-主题变更原理与步骤分析\" class=\"headerlink\" title=\"5-15：方案落地：处理 element-plus 主题变更原理与步骤分析\"></a>5-15：方案落地：处理 element-plus 主题变更原理与步骤分析</h2><p>对于 <code>element-plus</code> 的主题变更，相对比较复杂，所以说整个过程我们会分为三部分：</p>\n<ol>\n<li>实现原理</li>\n<li>实现步骤</li>\n<li>实现过程</li>\n</ol>\n<p><strong>实现原理：</strong></p>\n<p>在之前我们分析主题变更的实现原理时，我们说过，核心的原理是：**通过修改 <code>scss</code> 变量 ** 的形式修改主题色完成主题变更</p>\n<p>但是对于 <code>element-plus</code> 而言，我们怎么去修改这样的主题色呢？</p>\n<p>其实整体的原理非常简单，分为三步：</p>\n<ol>\n<li>获取当前 <code>element-plus</code> 的所有样式</li>\n<li>找到我们想要替换的样式部分，通过正则完成替换</li>\n<li>把替换后的样式写入到 <code>style</code> 标签中，利用样式优先级的特性，替代固有样式</li>\n</ol>\n<p><strong>实现步骤：</strong></p>\n<p>那么明确了原理之后，我们的实现步骤也就呼之欲出了，对应原理总体可分为四步：</p>\n<ol>\n<li>获取当前 <code>element-plus</code> 的所有样式</li>\n<li>定义我们要替换之后的样式</li>\n<li>在原样式中，利用正则替换新样式</li>\n<li>把替换后的样式写入到 <code>style</code> 标签中</li>\n</ol>\n<h2 id=\"5-16：方案落地：处理-element-plus-主题变更\"><a href=\"#5-16：方案落地：处理-element-plus-主题变更\" class=\"headerlink\" title=\"5-16：方案落地：处理 element-plus 主题变更\"></a>5-16：方案落地：处理 element-plus 主题变更</h2><p>创建 <code>utils/theme</code> 工具类，写入两个方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 写入新样式到 style\n * @param &#123;*&#125; elNewStyle  element-plus 的新样式\n * @param &#123;*&#125; isNewStyleTag 是否生成新的 style 标签\n *&#x2F;\nexport const writeNewStyle &#x3D; elNewStyle &#x3D;&gt; &#123;\n  \n&#125;\n\n&#x2F;**\n * 根据主色值，生成最新的样式表\n *&#x2F;\nexport const generateNewStyle &#x3D;  primaryColor &#x3D;&gt; &#123;\n \n&#125;</code></pre>\n\n<p>那么接下来我们先实现第一个方法 <code>generateNewStyle</code>，在实现的过程中，我们需要安装两个工具类：</p>\n<ol>\n<li><a href=\"https://www.npmjs.com/package/rgb-hex\">rgb-hex</a>：转换RGB(A)颜色为十六进制</li>\n<li><a href=\"https://www.npmjs.com/package/css-color-function\">css-color-function</a>：在CSS中提出的颜色函数的解析器和转换器</li>\n</ol>\n<p>然后还需要写入一个 <strong>颜色转化计算器  <code>formula.json</code></strong></p>\n<p>创建 <code>constants/formula.json</code> （<a href=\"https://gist.github.com/benfrain/7545629%EF%BC%89\">https://gist.github.com/benfrain/7545629）</a></p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;shade-1&quot;: &quot;color(primary shade(10%))&quot;,\n  &quot;light-1&quot;: &quot;color(primary tint(10%))&quot;,\n  &quot;light-2&quot;: &quot;color(primary tint(20%))&quot;,\n  &quot;light-3&quot;: &quot;color(primary tint(30%))&quot;,\n  &quot;light-4&quot;: &quot;color(primary tint(40%))&quot;,\n  &quot;light-5&quot;: &quot;color(primary tint(50%))&quot;,\n  &quot;light-6&quot;: &quot;color(primary tint(60%))&quot;,\n  &quot;light-7&quot;: &quot;color(primary tint(70%))&quot;,\n  &quot;light-8&quot;: &quot;color(primary tint(80%))&quot;,\n  &quot;light-9&quot;: &quot;color(primary tint(90%))&quot;,\n  &quot;subMenuHover&quot;: &quot;color(primary tint(70%))&quot;,\n  &quot;subMenuBg&quot;: &quot;color(primary tint(80%))&quot;,\n  &quot;menuHover&quot;: &quot;color(primary tint(90%))&quot;,\n  &quot;menuBg&quot;: &quot;color(primary)&quot;\n&#125;</code></pre>\n\n<p>准备就绪后，我们来实现 <code>generateNewStyle</code> 方法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import color from &#39;css-color-function&#39;\nimport rgbHex from &#39;rgb-hex&#39;\nimport formula from &#39;@&#x2F;constant&#x2F;formula.json&#39;\nimport axios from &#39;axios&#39;\n\n&#x2F;**\n * 根据主色值，生成最新的样式表\n *&#x2F;\nexport const generateNewStyle &#x3D; async primaryColor &#x3D;&gt; &#123;\n  const colors &#x3D; generateColors(primaryColor)\n  let cssText &#x3D; await getOriginalStyle()\n\n  &#x2F;&#x2F; 遍历生成的样式表，在 CSS 的原样式中进行全局替换\n  Object.keys(colors).forEach(key &#x3D;&gt; &#123;\n    cssText &#x3D; cssText.replace(\n      new RegExp(&#39;(:|\\\\s+)&#39; + key, &#39;g&#39;),\n      &#39;$1&#39; + colors[key]\n    )\n  &#125;)\n\n  return cssText\n&#125;\n\n&#x2F;**\n * 根据主色生成色值表\n *&#x2F;\nexport const generateColors &#x3D; primary &#x3D;&gt; &#123;\n  if (!primary) return\n  const colors &#x3D; &#123;\n    primary\n  &#125;\n  Object.keys(formula).forEach(key &#x3D;&gt; &#123;\n    const value &#x3D; formula[key].replace(&#x2F;primary&#x2F;g, primary)\n    colors[key] &#x3D; &#39;#&#39; + rgbHex(color.convert(value))\n  &#125;)\n  return colors\n&#125;\n\n&#x2F;**\n * 获取当前 element-plus 的默认样式表\n *&#x2F;\nconst getOriginalStyle &#x3D; async () &#x3D;&gt; &#123;\n  const version &#x3D; require(&#39;element-plus&#x2F;package.json&#39;).version\n  const url &#x3D; &#96;https:&#x2F;&#x2F;unpkg.com&#x2F;element-plus@$&#123;version&#125;&#x2F;dist&#x2F;index.css&#96;\n  const &#123; data &#125; &#x3D; await axios(url)\n  &#x2F;&#x2F; 把获取到的数据筛选为原样式模板\n  return getStyleTemplate(data)\n&#125;\n\n&#x2F;**\n * 返回 style 的 template\n *&#x2F;\nconst getStyleTemplate &#x3D; data &#x3D;&gt; &#123;\n  &#x2F;&#x2F; element-plus 默认色值\n  const colorMap &#x3D; &#123;\n    &#39;#3a8ee6&#39;: &#39;shade-1&#39;,\n    &#39;#409eff&#39;: &#39;primary&#39;,\n    &#39;#53a8ff&#39;: &#39;light-1&#39;,\n    &#39;#66b1ff&#39;: &#39;light-2&#39;,\n    &#39;#79bbff&#39;: &#39;light-3&#39;,\n    &#39;#8cc5ff&#39;: &#39;light-4&#39;,\n    &#39;#a0cfff&#39;: &#39;light-5&#39;,\n    &#39;#b3d8ff&#39;: &#39;light-6&#39;,\n    &#39;#c6e2ff&#39;: &#39;light-7&#39;,\n    &#39;#d9ecff&#39;: &#39;light-8&#39;,\n    &#39;#ecf5ff&#39;: &#39;light-9&#39;\n  &#125;\n  &#x2F;&#x2F; 根据默认色值为要替换的色值打上标记\n  Object.keys(colorMap).forEach(key &#x3D;&gt; &#123;\n    const value &#x3D; colorMap[key]\n    data &#x3D; data.replace(new RegExp(key, &#39;ig&#39;), value)\n  &#125;)\n  return data\n&#125;\n</code></pre>\n\n\n\n<p>接下来处理 <code>writeNewStyle</code> 方法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 写入新样式到 style\n * @param &#123;*&#125; elNewStyle  element-plus 的新样式\n * @param &#123;*&#125; isNewStyleTag 是否生成新的 style 标签\n *&#x2F;\nexport const writeNewStyle &#x3D; elNewStyle &#x3D;&gt; &#123;\n  const style &#x3D; document.createElement(&#39;style&#39;)\n  style.innerText &#x3D; elNewStyle\n  document.head.appendChild(style)\n&#125;</code></pre>\n\n<p>最后在 <code>SelectColor.vue</code> 中导入这两个方法：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">...\n\n&lt;script setup&gt;\n...\nimport &#123; generateNewStyle, writeNewStyle &#125; from &#39;@&#x2F;utils&#x2F;theme&#39;\n...\n&#x2F;**\n * 确定\n * 1. 修改主题色\n * 2. 保存最新的主题色\n * 3. 关闭 dialog\n *&#x2F;\n\nconst comfirm &#x3D; async () &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 1.1 获取主题色\n  const newStyleText &#x3D; await generateNewStyle(mColor.value)\n  &#x2F;&#x2F; 1.2 写入最新主题色\n  writeNewStyle(newStyleText)\n  &#x2F;&#x2F; 2. 保存最新的主题色\n  store.commit(&#39;theme&#x2F;setMainColor&#39;, mColor.value)\n  &#x2F;&#x2F; 3. 关闭 dialog\n  closed()\n&#125;\n&lt;&#x2F;script&gt;\n</code></pre>\n\n<p>一些处理完成之后，我们可以在 <code>profile</code> 中通过一些代码进行测试：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;el-row&gt;\n      &lt;el-button&gt;Default&lt;&#x2F;el-button&gt;\n      &lt;el-button type&#x3D;&quot;primary&quot;&gt;Primary&lt;&#x2F;el-button&gt;\n      &lt;el-button type&#x3D;&quot;success&quot;&gt;Success&lt;&#x2F;el-button&gt;\n      &lt;el-button type&#x3D;&quot;info&quot;&gt;Info&lt;&#x2F;el-button&gt;\n      &lt;el-button type&#x3D;&quot;warning&quot;&gt;Warning&lt;&#x2F;el-button&gt;\n      &lt;el-button type&#x3D;&quot;danger&quot;&gt;Danger&lt;&#x2F;el-button&gt;\n    &lt;&#x2F;el-row&gt;</code></pre>\n\n\n\n<h2 id=\"5-17：方案落地：element-plus-新主题的立即生效\"><a href=\"#5-17：方案落地：element-plus-新主题的立即生效\" class=\"headerlink\" title=\"5-17：方案落地：element-plus 新主题的立即生效\"></a>5-17：方案落地：element-plus 新主题的立即生效</h2><p>到目前我们已经完成了 <code>element-plus</code> 的主题变更，但是当前的主题变更还有一个小问题，那就是：<strong>在刷新页面后，新主题会失效</strong></p>\n<p>那么出现这个问题的原因，非常简单：<strong>因为没有写入新的 <code>style</code></strong></p>\n<p>所以我们只需要在 <strong>应用加载后，写入 <code>style</code> 即可</strong></p>\n<p>那么写入的时机，我们可以放入到 <code>app.vue</code> 中</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport &#123; useStore &#125; from &#39;vuex&#39;\nimport &#123; generateNewStyle, writeNewStyle &#125; from &#39;@&#x2F;utils&#x2F;theme&#39;\n\nconst store &#x3D; useStore()\ngenerateNewStyle(store.getters.mainColor).then(newStyleText &#x3D;&gt; &#123;\n  writeNewStyle(newStyleText)\n&#125;)\n&lt;&#x2F;script&gt;\n</code></pre>\n\n\n\n\n\n<h2 id=\"5-18：方案落地：自定义主题变更\"><a href=\"#5-18：方案落地：自定义主题变更\" class=\"headerlink\" title=\"5-18：方案落地：自定义主题变更\"></a>5-18：方案落地：自定义主题变更</h2><p>自定义主题变更相对来说比较简单，因为 <strong>自己的代码更加可控</strong>。</p>\n<p>目前在我们的代码中，需要进行 <strong>自定义主题变更</strong> 为  <strong><code>menu</code> 菜单背景色</strong></p>\n<p>而目前指定 <code>menu</code> 菜单背景色的位置在 <code>layout/components/sidebar/SidebarMenu.vue</code> 中</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;el-menu\n  :default-active&#x3D;&quot;activeMenu&quot;\n  :collapse&#x3D;&quot;!$store.getters.sidebarOpened&quot;\n  :background-color&#x3D;&quot;$store.getters.cssVar.menuBg&quot;\n  :text-color&#x3D;&quot;$store.getters.cssVar.menuText&quot;\n  :active-text-color&#x3D;&quot;$store.getters.cssVar.menuActiveText&quot;\n  :unique-opened&#x3D;&quot;true&quot;\n  router\n&gt;</code></pre>\n\n<p>此处的 背景色是通过 <code>getters</code> 进行指定的，该 <code>cssVar</code> 的 <code>getters</code> 为：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">cssVar: state &#x3D;&gt; variables,</code></pre>\n\n<p>所以，我们想要修改 <strong>自定义主题</strong> ，只需要从这里入手即可。</p>\n<p><strong>根据当前保存的 <code>mainColor</code> 覆盖原有的默认色值</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import variables from &#39;@&#x2F;styles&#x2F;variables.scss&#39;\nimport &#123; MAIN_COLOR &#125; from &#39;@&#x2F;constant&#39;\nimport &#123; getItem &#125; from &#39;@&#x2F;utils&#x2F;storage&#39;\nimport &#123; generateColors &#125; from &#39;@&#x2F;utils&#x2F;theme&#39;\n\nconst getters &#x3D; &#123;\n  ...\n  cssVar: state &#x3D;&gt; &#123;\n    return &#123;\n      ...variables,\n      ...generateColors(getItem(MAIN_COLOR))\n    &#125;\n  &#125;,\n  ...\n&#125;\nexport default getters\n</code></pre>\n\n<p>但是我们这样设定之后，整个自定义主题变更，还存在两个问题：</p>\n<ol>\n<li><code>menuBg</code> 背景颜色没有变化<img src=\"05通用功能开发/image-20210925203000626.png\" alt=\"image-20210925203000626\" style=\"zoom:33%;\" /></li>\n</ol>\n<p>这个问题是因为咱们的 <code>sidebar</code> 的背景色未被替换，所以我们可以在 <code>layout/index</code> 中设置 <code>sidebar</code> 的 <code>backgroundColor</code></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;sidebar\n      id&#x3D;&quot;guide-sidebar&quot;\n      class&#x3D;&quot;sidebar-container&quot;\n      :style&#x3D;&quot;&#123; backgroundColor: $store.getters.cssVar.menuBg &#125;&quot;\n    &#x2F;&gt;</code></pre>\n\n\n\n<ol start=\"2\">\n<li>主题色替换之后，需要刷新页面才可响应</li>\n</ol>\n<p>这个是因为 <code>getters</code> 中没有监听到 <strong>依赖值的响应变化</strong>，所以我们希望修改依赖值</p>\n<p>在 <code>store/modules/theme</code> 中</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">...\nimport variables from &#39;@&#x2F;styles&#x2F;variables.scss&#39;\nexport default &#123;\n  namespaced: true,\n  state: () &#x3D;&gt; (&#123;\n    ...\n    variables\n  &#125;),\n  mutations: &#123;\n    &#x2F;**\n     * 设置主题色\n     *&#x2F;\n    setMainColor(state, newColor) &#123;\n      ...\n      state.variables.menuBg &#x3D; newColor\n      ...\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n\n<p>在 <code>getters</code> 中</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">....\n\nconst getters &#x3D; &#123;\n ...\n  cssVar: state &#x3D;&gt; &#123;\n    return &#123;\n      ...state.theme.variables,\n      ...generateColors(getItem(MAIN_COLOR))\n    &#125;\n  &#125;,\n  ...\n&#125;\nexport default getters\n</code></pre>\n\n<h2 id=\"5-19：自定义主题方案总结\"><a href=\"#5-19：自定义主题方案总结\" class=\"headerlink\" title=\"5-19：自定义主题方案总结\"></a>5-19：自定义主题方案总结</h2><p>那么到这里整个自定义主题我们就处理完成了。</p>\n<p>对于 <strong>自定义主题而言</strong>，核心的原理其实就是 <strong>修改<code>scss</code>变量来进行实现主题色变化</strong> </p>\n<p>明确好了原理之后，对后续实现的步骤就具体情况具体分析了。</p>\n<ol>\n<li>对于 <code>element-plus</code>：因为 <code>element-plus</code> 是第三方的包，所以它 <strong>不是完全可控</strong> 的，那么对于这种最简单直白的方案，就是直接拿到它编译后的 <code>css</code> 进行色值替换，利用 <code>style</code> <strong>内部样式表</strong> 优先级高于 <strong>外部样式表</strong> 的特性，来进行主题替换</li>\n<li>对于自定义主题：因为自定义主题是 <strong>完全可控</strong> 的，所以我们实现起来就轻松很多，只需要修改对应的 <code>scss</code>变量即可</li>\n</ol>\n<p>那么在之后大家遇到 <strong>自定义主题</strong> 的处理时，就可以按照我们所梳理的方案进行处理了。</p>\n<h2 id=\"5-20：screenfull-原理及方案分析\"><a href=\"#5-20：screenfull-原理及方案分析\" class=\"headerlink\" title=\"5-20：screenfull 原理及方案分析\"></a>5-20：screenfull 原理及方案分析</h2><p>接下来我们来看 <code>screenfull （全屏）</code> 功能实现</p>\n<p>对于 <code>screenfull </code> 和之前一样 ，我们还是先分析它的原理，然后在制定对应的方案实现</p>\n<p><strong>原理：</strong></p>\n<p>对于 <code>screenfull </code> 而言，浏览器本身已经提供了对用的 <code>API</code>，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fullscreen_API\">点击这里即可查看</a>，这个 <code>API</code> 中，主要提供了两个方法：</p>\n<ol>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/exitFullscreen\"><code>Document.exitFullscreen()</code></a>：该方法用于请求从全屏模式切换到窗口模式</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/requestFullScreen\"><code>Element.requestFullscreen()</code></a>：该方法用于请求浏览器（user agent）将特定元素（甚至延伸到它的后代元素）置为全屏模式<ol>\n<li>比如我们可以通过 <code>document.getElementById(&#39;app&#39;).requestFullscreen()</code> 在获取 <code>id=app</code> 的 <code>DOM</code> 之后，把该区域置为全屏</li>\n</ol>\n</li>\n</ol>\n<p>但是该方法存在一定的小问题，比如：</p>\n<ol>\n<li><code>appmain</code> 区域背景颜色为黑色</li>\n</ol>\n<p>所以通常情况下我们不会直接使用该 <code>API</code> 来去实现全屏效果，而是会使用它的包装库 <a href=\"https://www.npmjs.com/package/screenfull\">screenfull</a></p>\n<p><strong>方案：</strong></p>\n<p>那么明确好了原理之后，接下来实现方案就比较容易了。</p>\n<p>整体的方案实现分为两步：</p>\n<ol>\n<li>封装 <code>screenfull</code> 组件<ol>\n<li>展示切换按钮</li>\n<li>基于 <a href=\"https://www.npmjs.com/package/screenfull\">screenfull</a> 实现切换功能</li>\n</ol>\n</li>\n<li>在 <code>navbar</code> 中引入该组件</li>\n</ol>\n<h2 id=\"5-21：方案落地：screenfull\"><a href=\"#5-21：方案落地：screenfull\" class=\"headerlink\" title=\"5-21：方案落地：screenfull\"></a>5-21：方案落地：screenfull</h2><p>明确好了方案之后，接下来我们就落地该方案</p>\n<p><strong>封装 <code>screenfull</code> 组件：</strong></p>\n<ol>\n<li><p>下来依赖包  <a href=\"https://www.npmjs.com/package/screenfull\">screenfull</a> </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm i screenfull@5.1.0</code></pre>\n</li>\n<li><p>创建 <code>components/Screenfull/index</code></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;svg-icon\n      :icon&#x3D;&quot;isFullscreen ? &#39;exit-fullscreen&#39; : &#39;fullscreen&#39;&quot;\n      @click&#x3D;&quot;onToggle&quot;\n    &#x2F;&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport &#123; ref, onMounted, onUnmounted &#125; from &#39;vue&#39;\nimport screenfull from &#39;screenfull&#39;\n\n&#x2F;&#x2F; 是否全屏\nconst isFullscreen &#x3D; ref(false)\n\n&#x2F;&#x2F; 监听变化\nconst change &#x3D; () &#x3D;&gt; &#123;\n  isFullscreen.value &#x3D; screenfull.isFullscreen\n&#125;\n\n&#x2F;&#x2F; 切换事件\nconst onToggle &#x3D; () &#x3D;&gt; &#123;\n  screenfull.toggle()\n&#125;\n\n&#x2F;&#x2F; 设置侦听器\nonMounted(() &#x3D;&gt; &#123;\n  screenfull.on(&#39;change&#39;, change)\n&#125;)\n\n&#x2F;&#x2F; 删除侦听器\nonUnmounted(() &#x3D;&gt; &#123;\n  screenfull.off(&#39;change&#39;, change)\n&#125;)\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;&lt;&#x2F;style&gt;\n</code></pre></li>\n</ol>\n<p><strong>在 <code>navbar</code> 中引入该组件：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;screenfull class&#x3D;&quot;right-menu-item hover-effect&quot; &#x2F;&gt;\nimport Screenfull from &#39;@&#x2F;components&#x2F;Screenfull&#39;</code></pre>\n\n\n\n<h2 id=\"5-22：headerSearch-原理及方案分析\"><a href=\"#5-22：headerSearch-原理及方案分析\" class=\"headerlink\" title=\"5-22：headerSearch 原理及方案分析\"></a>5-22：headerSearch 原理及方案分析</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>所谓 <code>headerSearch</code> 指 <strong>页面搜索</strong></p></blockquote>\n<p><strong>原理：</strong></p>\n<p><code>headerSearch</code> 是复杂后台系统中非常常见的一个功能，它可以：<strong>在指定搜索框中对当前应用中所有页面进行检索，以 <code>select</code> 的形式展示出被检索的页面，以达到快速进入的目的</strong></p>\n<p>那么明确好了 <code>headerSearch</code>  的作用之后，接下来我们来看一下对应的实现原理</p>\n<p>根据前面的目的我们可以发现，整个 <code>headerSearch</code> 其实可以分为三个核心的功能点：</p>\n<ol>\n<li>根据指定内容对所有页面进行检索</li>\n<li>以 <code>select</code> 形式展示检索出的页面</li>\n<li>通过检索页面可快速进入对应页面</li>\n</ol>\n<p>那么围绕着这三个核心的功能点，我们想要分析它的原理就非常简单了：<strong>根据指定内容检索所有页面，把检索出的页面以 <code>select</code> 展示，点击对应 <code>option</code> 可进入</strong></p>\n<p><strong>方案：</strong></p>\n<p>对照着三个核心功能点和原理，想要指定对应的实现方案是非常简单的一件事情了</p>\n<ol>\n<li>创建 <code>headerSearch</code> 组件，用作样式展示和用户输入内容获取</li>\n<li>获取所有的页面数据，用作被检索的数据源</li>\n<li>根据用户输入内容在数据源中进行 <a href=\"https://fusejs.io/\">模糊搜索</a> </li>\n<li>把搜索到的内容以 <code>select</code> 进行展示</li>\n<li>监听 <code>select</code> 的 <code>change</code> 事件，完成对应跳转</li>\n</ol>\n<h2 id=\"5-23：方案落地：创建-headerSearch-组件\"><a href=\"#5-23：方案落地：创建-headerSearch-组件\" class=\"headerlink\" title=\"5-23：方案落地：创建 headerSearch 组件\"></a>5-23：方案落地：创建 headerSearch 组件</h2><p>创建 <code>components/headerSearch/index</code> 组件：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div :class&#x3D;&quot;&#123; show: isShow &#125;&quot; class&#x3D;&quot;header-search&quot;&gt;\n    &lt;svg-icon\n      class-name&#x3D;&quot;search-icon&quot;\n      icon&#x3D;&quot;search&quot;\n      @click.stop&#x3D;&quot;onShowClick&quot;\n    &#x2F;&gt;\n    &lt;el-select\n      ref&#x3D;&quot;headerSearchSelectRef&quot;\n      class&#x3D;&quot;header-search-select&quot;\n      v-model&#x3D;&quot;search&quot;\n      filterable\n      default-first-option\n      remote\n      placeholder&#x3D;&quot;Search&quot;\n      :remote-method&#x3D;&quot;querySearch&quot;\n      @change&#x3D;&quot;onSelectChange&quot;\n    &gt;\n      &lt;el-option\n        v-for&#x3D;&quot;option in 5&quot;\n        :key&#x3D;&quot;option&quot;\n        :label&#x3D;&quot;option&quot;\n        :value&#x3D;&quot;option&quot;\n      &gt;&lt;&#x2F;el-option&gt;\n    &lt;&#x2F;el-select&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport &#123; ref &#125; from &#39;vue&#39;\n\n&#x2F;&#x2F; 控制 search 显示\nconst isShow &#x3D; ref(false)\n&#x2F;&#x2F; el-select 实例\nconst headerSearchSelectRef &#x3D; ref(null)\nconst onShowClick &#x3D; () &#x3D;&gt; &#123;\n  isShow.value &#x3D; !isShow.value\n  headerSearchSelectRef.value.focus()\n&#125;\n\n&#x2F;&#x2F; search 相关\nconst search &#x3D; ref(&#39;&#39;)\n&#x2F;&#x2F; 搜索方法\nconst querySearch &#x3D; () &#x3D;&gt; &#123;\n  console.log(&#39;querySearch&#39;)\n&#125;\n&#x2F;&#x2F; 选中回调\nconst onSelectChange &#x3D; () &#x3D;&gt; &#123;\n  console.log(&#39;onSelectChange&#39;)\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n.header-search &#123;\n  font-size: 0 !important;\n  .search-icon &#123;\n    cursor: pointer;\n    font-size: 18px;\n    vertical-align: middle;\n  &#125;\n  .header-search-select &#123;\n    font-size: 18px;\n    transition: width 0.2s;\n    width: 0;\n    overflow: hidden;\n    background: transparent;\n    border-radius: 0;\n    display: inline-block;\n    vertical-align: middle;\n\n    ::v-deep .el-input__inner &#123;\n      border-radius: 0;\n      border: 0;\n      padding-left: 0;\n      padding-right: 0;\n      box-shadow: none !important;\n      border-bottom: 1px solid #d9d9d9;\n      vertical-align: middle;\n    &#125;\n  &#125;\n  &amp;.show &#123;\n    .header-search-select &#123;\n      width: 210px;\n      margin-left: 10px;\n    &#125;\n  &#125;\n&#125;\n&lt;&#x2F;style&gt;\n</code></pre>\n\n<p>在 <code>navbar</code> 中导入该组件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;header-search class&#x3D;&quot;right-menu-item hover-effect&quot;&gt;&lt;&#x2F;header-search&gt;\nimport HeaderSearch from &#39;@&#x2F;components&#x2F;HeaderSearch&#39;</code></pre>\n\n<h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h2><p>在有了 <code>headerSearch</code> 之后，接下来就可以来处理对应的 <strong>检索数据源了</strong></p>\n<p><strong>检索数据源</strong> 表示：<strong>有哪些页面希望检索</strong></p>\n<p>那么对于我们当前的业务而言，我们希望被检索的页面其实就是左侧菜单中的页面，那么我们检索数据源即为：<strong>左侧菜单对应的数据源</strong></p>\n<p>根据以上原理，我们可以得出以下代码：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport &#123; ref, computed &#125; from &#39;vue&#39;\nimport &#123; filterRouters, generateMenus &#125; from &#39;@&#x2F;utils&#x2F;route&#39;\nimport &#123; useRouter &#125; from &#39;vue-router&#39;\n...\n&#x2F;&#x2F; 检索数据源\nconst router &#x3D; useRouter()\nconst searchPool &#x3D; computed(() &#x3D;&gt; &#123;\n  const filterRoutes &#x3D; filterRouters(router.getRoutes())\n  console.log(generateMenus(filterRoutes))\n  return generateMenus(filterRoutes)\n&#125;)\nconsole.log(searchPool)\n&lt;&#x2F;script&gt;</code></pre>\n\n\n\n<h2 id=\"5-25：方案落地：对检索数据源进行模糊搜索\"><a href=\"#5-25：方案落地：对检索数据源进行模糊搜索\" class=\"headerlink\" title=\"5-25：方案落地：对检索数据源进行模糊搜索\"></a>5-25：方案落地：对检索数据源进行模糊搜索</h2><p>如果我们想要进行  <a href=\"https://fusejs.io/\">模糊搜索</a>  的话，那么需要依赖一个第三方的库  <a href=\"https://fusejs.io/\">fuse.js</a> </p>\n<ol>\n<li><p>安装 <a href=\"https://fusejs.io/\">fuse.js</a></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install --save fuse.js@6.4.6</code></pre>\n</li>\n<li><p>初始化 <code>Fuse</code>，更多初始化配置项 <a href=\"https://fusejs.io/api/options.html\">可点击这里</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import Fuse from &#39;fuse.js&#39;\n\n&#x2F;**\n * 搜索库相关\n *&#x2F;\nconst fuse &#x3D; new Fuse(list, &#123;\n    &#x2F;&#x2F; 是否按优先级进行排序\n    shouldSort: true,\n    &#x2F;&#x2F; 匹配长度超过这个值的才会被认为是匹配的\n    minMatchCharLength: 1,\n    &#x2F;&#x2F; 将被搜索的键列表。 这支持嵌套路径、加权搜索、在字符串和对象数组中搜索。\n    &#x2F;&#x2F; name：搜索的键\n    &#x2F;&#x2F; weight：对应的权重\n    keys: [\n      &#123;\n        name: &#39;title&#39;,\n        weight: 0.7\n      &#125;,\n      &#123;\n        name: &#39;path&#39;,\n        weight: 0.3\n      &#125;\n    ]\n  &#125;)\n</code></pre>\n</li>\n<li><p>参考 <a href=\"https://fusejs.io/demo.html\">Fuse Demo</a> 与 最终效果，可以得出，我们最终期望得到如下的检索数据源结构</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">[\n    &#123;\n        &quot;path&quot;:&quot;&#x2F;my&quot;,\n        &quot;title&quot;:[\n            &quot;个人中心&quot;\n        ]\n    &#125;,\n    &#123;\n        &quot;path&quot;:&quot;&#x2F;user&quot;,\n        &quot;title&quot;:[\n            &quot;用户&quot;\n        ]\n    &#125;,\n    &#123;\n        &quot;path&quot;:&quot;&#x2F;user&#x2F;manage&quot;,\n        &quot;title&quot;:[\n            &quot;用户&quot;,\n            &quot;用户管理&quot;\n        ]\n    &#125;,\n    &#123;\n        &quot;path&quot;:&quot;&#x2F;user&#x2F;info&quot;,\n        &quot;title&quot;:[\n            &quot;用户&quot;,\n            &quot;用户信息&quot;\n        ]\n    &#125;,\n    &#123;\n        &quot;path&quot;:&quot;&#x2F;article&quot;,\n        &quot;title&quot;:[\n            &quot;文章&quot;\n        ]\n    &#125;,\n    &#123;\n        &quot;path&quot;:&quot;&#x2F;article&#x2F;ranking&quot;,\n        &quot;title&quot;:[\n            &quot;文章&quot;,\n            &quot;文章排名&quot;\n        ]\n    &#125;,\n    &#123;\n        &quot;path&quot;:&quot;&#x2F;article&#x2F;create&quot;,\n        &quot;title&quot;:[\n            &quot;文章&quot;,\n            &quot;创建文章&quot;\n        ]\n    &#125;\n]</code></pre>\n</li>\n<li><p>所以我们之前处理了的数据源并不符合我们的需要，所以我们需要对数据源进行重新处理</p>\n</li>\n</ol>\n<h2 id=\"5-26：方案落地：数据源重处理，生成-searchPool\"><a href=\"#5-26：方案落地：数据源重处理，生成-searchPool\" class=\"headerlink\" title=\"5-26：方案落地：数据源重处理，生成  searchPool\"></a>5-26：方案落地：数据源重处理，生成  searchPool</h2><p>在上一小节，我们明确了最终我们期望得到数据源结构，那么接下来我们就对重新计算数据源，生成对应的 <code>searchPoll</code></p>\n<p>创建 <code>compositions/HeaderSearch/FuseData.js</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import path from &#39;path&#39;\nimport i18n from &#39;@&#x2F;i18n&#39;\n&#x2F;**\n * 筛选出可供搜索的路由对象\n * @param routes 路由表\n * @param basePath 基础路径，默认为 &#x2F;\n * @param prefixTitle\n *&#x2F;\nexport const generateRoutes &#x3D; (routes, basePath &#x3D; &#39;&#x2F;&#39;, prefixTitle &#x3D; []) &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 创建 result 数据\n  let res &#x3D; []\n  &#x2F;&#x2F; 循环 routes 路由\n  for (const route of routes) &#123;\n    &#x2F;&#x2F; 创建包含 path 和 title 的 item\n    const data &#x3D; &#123;\n      path: path.resolve(basePath, route.path),\n      title: [...prefixTitle]\n    &#125;\n    &#x2F;&#x2F; 当前存在 meta 时，使用 i18n 解析国际化数据，组合成新的 title 内容\n    &#x2F;&#x2F; 动态路由不允许被搜索\n    &#x2F;&#x2F; 匹配动态路由的正则\n    const re &#x3D; &#x2F;.*\\&#x2F;:.*&#x2F;\n    if (route.meta &amp;&amp; route.meta.title &amp;&amp; !re.exec(route.path)) &#123;\n      const i18ntitle &#x3D; i18n.global.t(&#96;msg.route.$&#123;route.meta.title&#125;&#96;)\n      data.title &#x3D; [...data.title, i18ntitle]\n      res.push(data)\n    &#125;\n\n    &#x2F;&#x2F; 存在 children 时，迭代调用\n    if (route.children) &#123;\n      const tempRoutes &#x3D; generateRoutes(route.children, data.path, data.title)\n      if (tempRoutes.length &gt;&#x3D; 1) &#123;\n        res &#x3D; [...res, ...tempRoutes]\n      &#125;\n    &#125;\n  &#125;\n  return res\n&#125;\n</code></pre>\n\n<p>在 <code>headerSearch</code> 中导入 <code>generateRoutes</code></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport &#123; computed, ref &#125; from &#39;vue&#39;\nimport &#123; generateRoutes &#125; from &#39;.&#x2F;FuseData&#39;\nimport Fuse from &#39;fuse.js&#39;\nimport &#123; filterRouters &#125; from &#39;@&#x2F;utils&#x2F;route&#39;\nimport &#123; useRouter &#125; from &#39;vue-router&#39;\n\n...\n\n&#x2F;&#x2F; 检索数据源\nconst router &#x3D; useRouter()\nconst searchPool &#x3D; computed(() &#x3D;&gt; &#123;\n  const filterRoutes &#x3D; filterRouters(router.getRoutes())\n  return generateRoutes(filterRoutes)\n&#125;)\n&#x2F;**\n * 搜索库相关\n *&#x2F;\nconst fuse &#x3D; new Fuse(searchPool.value, &#123;\n  ...\n&#125;)\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>通过 <code>querySearch</code> 测试搜索结果</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 搜索方法\nconst querySearch &#x3D; query &#x3D;&gt; &#123;\n  console.log(fuse.search(query))\n&#125;</code></pre>\n\n<h2 id=\"5-27：方案落地：渲染检索数据\"><a href=\"#5-27：方案落地：渲染检索数据\" class=\"headerlink\" title=\"5-27：方案落地：渲染检索数据\"></a>5-27：方案落地：渲染检索数据</h2><p>数据源处理完成之后，最后我们就只需要完成:</p>\n<ol>\n<li>渲染检索出的数据</li>\n<li>完成对应跳转</li>\n</ol>\n<p>那么下面我们按照步骤进行实现：</p>\n<ol>\n<li><p>渲染检索出的数据</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;el-option\n      v-for&#x3D;&quot;option in searchOptions&quot;\n      :key&#x3D;&quot;option.item.path&quot;\n      :label&#x3D;&quot;option.item.title.join(&#39; &gt; &#39;)&quot;\n      :value&#x3D;&quot;option.item&quot;\n  &gt;&lt;&#x2F;el-option&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\n...\n&#x2F;&#x2F; 搜索结果\nconst searchOptions &#x3D; ref([])\n&#x2F;&#x2F; 搜索方法\nconst querySearch &#x3D; query &#x3D;&gt; &#123;\n  if (query !&#x3D;&#x3D; &#39;&#39;) &#123;\n    searchOptions.value &#x3D; fuse.search(query)\n  &#125; else &#123;\n    searchOptions.value &#x3D; []\n  &#125;\n&#125;\n...\n&lt;&#x2F;script&gt;\n</code></pre>\n\n\n</li>\n<li><p>完成对应跳转</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 选中回调\nconst onSelectChange &#x3D; val &#x3D;&gt; &#123;\n  router.push(val.path)\n&#125;</code></pre></li>\n</ol>\n<h2 id=\"5-28：方案落地：剩余问题处理\"><a href=\"#5-28：方案落地：剩余问题处理\" class=\"headerlink\" title=\"5-28：方案落地：剩余问题处理\"></a>5-28：方案落地：剩余问题处理</h2><p>到这里我们的 <code>headerSearch</code> 功能基本上就已经处理完成了，但是还存在一些小 <code>bug</code> ，那么最后这一小节我们就处理下这些剩余的 <code>bug</code></p>\n<ol>\n<li>在 <code>search</code> 打开时，点击 <code>body</code> 关闭 <code>search</code></li>\n<li>在 <code>search</code> 关闭时，清理 <code>searchOptions</code></li>\n<li><code>headerSearch</code> 应该具备国际化能力</li>\n</ol>\n<p>明确好问题之后，接下来我们进行处理</p>\n<p>首先我们先处理前前面两个问题：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 关闭 search 的处理事件\n *&#x2F;\nconst onClose &#x3D; () &#x3D;&gt; &#123;\n  headerSearchSelectRef.value.blur()\n  isShow.value &#x3D; false\n  searchOptions.value &#x3D; []\n&#125;\n&#x2F;**\n * 监听 search 打开，处理 close 事件\n *&#x2F;\nwatch(isShow, val &#x3D;&gt; &#123;\n  if (val) &#123;\n    document.body.addEventListener(&#39;click&#39;, onClose)\n  &#125; else &#123;\n    document.body.removeEventListener(&#39;click&#39;, onClose)\n  &#125;\n&#125;)</code></pre>\n\n<p>接下来是国际化的问题，想要处理这个问题非常简单，我们只需要：<strong>监听语言变化，重新计算数据源初始化 <code>fuse</code> 即可</strong></p>\n<ol>\n<li><p>在 <code>utils/i18n</code> 下，新建方法 <code>watchSwitchLang</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; watch &#125; from &#39;vue&#39;\nimport store from &#39;@&#x2F;store&#39;\n\n&#x2F;**\n *\n * @param  &#123;...any&#125; cbs 所有的回调\n *&#x2F;\nexport function watchSwitchLang(...cbs) &#123;\n  watch(\n    () &#x3D;&gt; store.getters.language,\n    () &#x3D;&gt; &#123;\n      cbs.forEach(cb &#x3D;&gt; cb(store.getters.language))\n    &#125;\n  )\n&#125;</code></pre>\n</li>\n<li><p>在 <code>headerSearch</code> 监听变化，重新赋值</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;script setup&gt;\n...\nimport &#123; watchSwitchLang &#125; from &#39;@&#x2F;utils&#x2F;i18n&#39;\n\n...\n\n&#x2F;&#x2F; 检索数据源\nconst router &#x3D; useRouter()\nlet searchPool &#x3D; computed(() &#x3D;&gt; &#123;\n  const filterRoutes &#x3D; filterRouters(router.getRoutes())\n  return generateRoutes(filterRoutes)\n&#125;)\n&#x2F;**\n * 搜索库相关\n *&#x2F;\nlet fuse\nconst initFuse &#x3D; searchPool &#x3D;&gt; &#123;\n  fuse &#x3D; new Fuse(searchPool, &#123;\n    ...\n&#125;\ninitFuse(searchPool.value)\n\n...\n\n&#x2F;&#x2F; 处理国际化\nwatchSwitchLang(() &#x3D;&gt; &#123;\n  searchPool &#x3D; computed(() &#x3D;&gt; &#123;\n    const filterRoutes &#x3D; filterRouters(router.getRoutes())\n    return generateRoutes(filterRoutes)\n  &#125;)\n  initFuse(searchPool.value)\n&#125;)\n&lt;&#x2F;script&gt;</code></pre></li>\n</ol>\n<h2 id=\"5-29：headerSearch-方案总结\"><a href=\"#5-29：headerSearch-方案总结\" class=\"headerlink\" title=\"5-29：headerSearch 方案总结\"></a>5-29：headerSearch 方案总结</h2><p>那么到这里整个的 <code>headerSearch</code> 我们就已经全部处理完成了，整个 <code>headerSearch</code> 我们只需要把握住三个核心的关键点</p>\n<ol>\n<li>根据指定内容对所有页面进行检索</li>\n<li>以 <code>select</code> 形式展示检索出的页面</li>\n<li>通过检索页面可快速进入对应页面</li>\n</ol>\n<p>保证大方向没有错误，那么具体的细节处理我们具体分析就可以了。</p>\n<p>关于细节的处理，可能比较复杂的地方有两个：</p>\n<ol>\n<li>模糊搜索</li>\n<li>检索数据源</li>\n</ol>\n<p>对于这两块，我们依赖于 <code>fuse.js</code> 进行了实现，大大简化了我们的业务处理流程。</p>\n<h2 id=\"5-30：tagsView-原理及方案分析\"><a href=\"#5-30：tagsView-原理及方案分析\" class=\"headerlink\" title=\"5-30：tagsView 原理及方案分析\"></a>5-30：tagsView 原理及方案分析</h2><p>所谓 <code>tagsView</code> 可以分成两部分来去看：</p>\n<ol>\n<li>tags</li>\n<li>view</li>\n</ol>\n<p>好像和废话一样是吧。那怎么分开看呢？</p>\n<p>首先我们先来看 <code>tags</code>：</p>\n<p>所谓 <code>tgas</code> 指的是：<strong>位于 <code>appmain</code> 之上的标签</strong></p>\n<p>那么现在我们忽略掉 <code>view</code>，现在只有一个要求：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在 <code>view</code> 之上渲染这个 <code>tag</code> </p></blockquote>\n<p>仅看这一个要求，很简单吧。</p>\n<p><strong>views：</strong></p>\n<p>明确好了 <code>tags</code> 之后，我们来看 <code>views</code>。</p>\n<p>脱离了 <code>tags</code> 只看 <code>views</code> 就更简单了，所谓 <code>views</code> ：<strong>指的就是一个用来渲染组件的位置</strong>，就像我们之前的 <code>Appmain</code> 一样，只不过这里的 <code>views</code> 可能稍微复杂一点，因为它需要在渲染的基础上增加：</p>\n<ol>\n<li>动画</li>\n<li>缓存</li>\n</ol>\n<p>这两个额外的功能。</p>\n<p>加上这两个功能之后可能会略显复杂，但是 <a href=\"https://next.router.vuejs.org/zh/guide/advanced/transitions.html#%E5%9F%BA%E4%BA%8E%E8%B7%AF%E7%94%B1%E7%9A%84%E5%8A%A8%E6%80%81%E8%BF%87%E6%B8%A1\">官网已经帮助我们处理了这个问题</a> </p>\n<p>所以 单看 <code>views</code> 也是一个很简单的功能。</p>\n<p>那么接下来我们需要做的就是把 <code>tags</code> 和 <code>view</code> 合并起来而已。</p>\n<p>那么明确好了原理之后，我们就来看 <strong>实现方案：</strong></p>\n<ol>\n<li>创建 <code>tagsView</code> 组件：用来处理 <code>tags</code> 的展示</li>\n<li>处理基于路由的动态过渡，在 <code>AppMain</code> 中进行：用于处理 <code>view</code> 的部分</li>\n</ol>\n<p>整个的方案就是这么两大部，但是其中我们还需要处理一些细节相关的，<strong>完整的方案为</strong>：</p>\n<ol>\n<li>监听路由变化，组成用于渲染 <code>tags</code> 的数据源</li>\n<li>创建 <code>tags</code> 组件，根据数据源渲染 <code>tag</code>，渲染出来的 <code>tags</code> 需要同时具备<ol>\n<li>国际化 <code>title</code></li>\n<li>路由跳转</li>\n</ol>\n</li>\n<li>处理鼠标右键效果，根据右键处理对应数据源</li>\n<li>处理基于路由的动态过渡</li>\n</ol>\n<p>那么明确好了方案之后，接下来我们根据方案进行处理即可。</p>\n<h2 id=\"5-31：方案落地：创建-tags-数据源\"><a href=\"#5-31：方案落地：创建-tags-数据源\" class=\"headerlink\" title=\"5-31：方案落地：创建 tags 数据源\"></a>5-31：方案落地：创建 tags 数据源</h2><p><code>tags</code> 的数据源分为两部分：</p>\n<ol>\n<li>保存数据：<code>appmain</code> 组件中进行</li>\n<li>展示数据：<code>tags</code> 组件中进行</li>\n</ol>\n<p>所以 <code>tags</code> 的数据我们最好把它保存到 <code>vuex</code> 中。</p>\n<ol>\n<li><p>在 <code>constant</code> 中新建常量</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; tags\nexport const TAGS_VIEW &#x3D; &#39;tagsView&#39;</code></pre>\n</li>\n<li><p>在 <code>store/app</code> 中创建 <code>tagsViewList</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; LANG, TAGS_VIEW &#125; from &#39;@&#x2F;constant&#39;\nimport &#123; getItem, setItem &#125; from &#39;@&#x2F;utils&#x2F;storage&#39;\nexport default &#123;\n  namespaced: true,\n  state: () &#x3D;&gt; (&#123;\n    ...\n    tagsViewList: getItem(TAGS_VIEW) || []\n  &#125;),\n  mutations: &#123;\n    ...\n    &#x2F;**\n     * 添加 tags\n     *&#x2F;\n    addTagsViewList(state, tag) &#123;\n      const isFind &#x3D; state.tagsViewList.find(item &#x3D;&gt; &#123;\n        return item.path &#x3D;&#x3D;&#x3D; tag.path\n      &#125;)\n    &#x2F;&#x2F; 处理重复\n      if (!isFind) &#123;\n        state.tagsViewList.push(tag)\n        setItem(TAGS_VIEW, state.tagsViewList)\n      &#125;\n    &#125;\n  &#125;,\n  actions: &#123;&#125;\n&#125;\n</code></pre>\n</li>\n<li><p>在 <code>appmain</code> 中监听路由的变化</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport &#123; watch &#125; from &#39;vue&#39;\nimport &#123; isTags &#125; from &#39;@&#x2F;utils&#x2F;tags&#39;\nimport &#123; generateTitle &#125; from &#39;@&#x2F;utils&#x2F;i18n&#39;\nimport &#123; useRoute &#125; from &#39;vue-router&#39;\nimport &#123; useStore &#125; from &#39;vuex&#39;\n\nconst route &#x3D; useRoute()\n\n&#x2F;**\n * 生成 title\n *&#x2F;\nconst getTitle &#x3D; route &#x3D;&gt; &#123;\n  let title &#x3D; &#39;&#39;\n  if (!route.meta) &#123;\n    &#x2F;&#x2F; 处理无 meta 的路由\n    const pathArr &#x3D; route.path.split(&#39;&#x2F;&#39;)\n    title &#x3D; pathArr[pathArr.length - 1]\n  &#125; else &#123;\n    title &#x3D; generateTitle(route.meta.title)\n  &#125;\n  return title\n&#125;\n\n&#x2F;**\n * 监听路由变化\n *&#x2F;\nconst store &#x3D; useStore()\nwatch(\n  route,\n  (to, from) &#x3D;&gt; &#123;\n    if (!isTags(to.path)) return\n    const &#123; fullPath, meta, name, params, path, query &#125; &#x3D; to\n    store.commit(&#39;app&#x2F;addTagsViewList&#39;, &#123;\n      fullPath,\n      meta,\n      name,\n      params,\n      path,\n      query,\n      title: getTitle(to)\n    &#125;)\n  &#125;,\n  &#123;\n    immediate: true\n  &#125;\n)\n&lt;&#x2F;script&gt;\n\n</code></pre>\n</li>\n<li><p>创建 <code>utils/tags</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const whiteList &#x3D; [&#39;&#x2F;login&#39;, &#39;&#x2F;import&#39;, &#39;&#x2F;404&#39;, &#39;&#x2F;401&#39;]\n\n&#x2F;**\n * path 是否需要被缓存\n * @param &#123;*&#125; path\n * @returns\n *&#x2F;\nexport function isTags(path) &#123;\n  return !whiteList.includes(path)\n&#125;\n</code></pre></li>\n</ol>\n<h2 id=\"5-32：方案落地：生成-tagsView\"><a href=\"#5-32：方案落地：生成-tagsView\" class=\"headerlink\" title=\"5-32：方案落地：生成 tagsView\"></a>5-32：方案落地：生成 tagsView</h2><p>目前数据已经被保存到 <code>store</code> 中，那么接下来我们就依赖数据渲染 <code>tags</code></p>\n<ol>\n<li><p>创建 <code>store/app</code> 中 <code>tagsViewList</code> 的快捷访问</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">tagsViewList: state &#x3D;&gt; state.app.tagsViewList</code></pre>\n</li>\n<li><p>创建 <code>components/tagsview</code></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;tags-view-container&quot;&gt;\n      &lt;router-link\n        class&#x3D;&quot;tags-view-item&quot;\n        :class&#x3D;&quot;isActive(tag) ? &#39;active&#39; : &#39;&#39;&quot;\n        :style&#x3D;&quot;&#123;\n          backgroundColor: isActive(tag) ? $store.getters.cssVar.menuBg : &#39;&#39;,\n          borderColor: isActive(tag) ? $store.getters.cssVar.menuBg : &#39;&#39;\n        &#125;&quot;\n        v-for&#x3D;&quot;(tag, index) in $store.getters.tagsViewList&quot;\n        :key&#x3D;&quot;tag.fullPath&quot;\n        :to&#x3D;&quot;&#123; path: tag.fullPath &#125;&quot;\n      &gt;\n        &#123;&#123; tag.title &#125;&#125;\n        &lt;i\n          v-show&#x3D;&quot;!isActive(tag)&quot;\n          class&#x3D;&quot;el-icon-close&quot;\n          @click.prevent.stop&#x3D;&quot;onCloseClick(index)&quot;\n        &#x2F;&gt;\n      &lt;&#x2F;router-link&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport &#123; useRoute &#125; from &#39;vue-router&#39;\nconst route &#x3D; useRoute()\n\n&#x2F;**\n * 是否被选中\n *&#x2F;\nconst isActive &#x3D; tag &#x3D;&gt; &#123;\n  return tag.path &#x3D;&#x3D;&#x3D; route.path\n&#125;\n\n&#x2F;**\n * 关闭 tag 的点击事件\n *&#x2F;\nconst onCloseClick &#x3D; index &#x3D;&gt; &#123;&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n.tags-view-container &#123;\n  height: 34px;\n  width: 100%;\n  background: #fff;\n  border-bottom: 1px solid #d8dce5;\n  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.12), 0 0 3px 0 rgba(0, 0, 0, 0.04);\n    .tags-view-item &#123;\n      display: inline-block;\n      position: relative;\n      cursor: pointer;\n      height: 26px;\n      line-height: 26px;\n      border: 1px solid #d8dce5;\n      color: #495060;\n      background: #fff;\n      padding: 0 8px;\n      font-size: 12px;\n      margin-left: 5px;\n      margin-top: 4px;\n      &amp;:first-of-type &#123;\n        margin-left: 15px;\n      &#125;\n      &amp;:last-of-type &#123;\n        margin-right: 15px;\n      &#125;\n      &amp;.active &#123;\n        color: #fff;\n        &amp;::before &#123;\n          content: &#39;&#39;;\n          background: #fff;\n          display: inline-block;\n          width: 8px;\n          height: 8px;\n          border-radius: 50%;\n          position: relative;\n          margin-right: 4px;\n        &#125;\n      &#125;\n      &#x2F;&#x2F; close 按钮\n      .el-icon-close &#123;\n        width: 16px;\n        height: 16px;\n        line-height: 10px;\n        vertical-align: 2px;\n        border-radius: 50%;\n        text-align: center;\n        transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);\n        transform-origin: 100% 50%;\n        &amp;:before &#123;\n          transform: scale(0.6);\n          display: inline-block;\n          vertical-align: -3px;\n        &#125;\n        &amp;:hover &#123;\n          background-color: #b4bccc;\n          color: #fff;\n        &#125;\n      &#125;\n    \n  &#125;\n&#125;\n&lt;&#x2F;style&gt;</code></pre>\n</li>\n<li><p>在 <code>layout/index</code> 中导入</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;div class&#x3D;&quot;fixed-header&quot;&gt;\n    &lt;!-- 顶部的 navbar --&gt;\n    &lt;navbar &#x2F;&gt;\n    &lt;!-- tags --&gt;\n    &lt;tags-view&gt;&lt;&#x2F;tags-view&gt;\n&lt;&#x2F;div&gt;\n\nimport TagsView from &#39;@&#x2F;components&#x2F;TagsView&#39;\n</code></pre></li>\n</ol>\n<h2 id=\"5-33：方案落地：tagsView-国际化处理\"><a href=\"#5-33：方案落地：tagsView-国际化处理\" class=\"headerlink\" title=\"5-33：方案落地：tagsView 国际化处理\"></a>5-33：方案落地：tagsView 国际化处理</h2><p><code>tagsView</code> 的国际化处理可以理解为修改现有 <code>tags</code> 的 <code>title</code>。</p>\n<p>所以我们只需要：</p>\n<ol>\n<li>监听到语言变化</li>\n<li>国际化对应的 <code>title</code> 即可</li>\n</ol>\n<p>根据方案，可生成如下代码：</p>\n<ol>\n<li><p>在 <code>store/app</code> 中，创建修改 <code>ttile</code> 的 <code>mutations</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n* 为指定的 tag 修改 title\n*&#x2F;\nchangeTagsView(state, &#123; index, tag &#125;) &#123;\n    state.tagsViewList[index] &#x3D; tag\n    setItem(TAGS_VIEW, state.tagsViewList)\n&#125;</code></pre>\n\n\n</li>\n<li><p>在 <code>appmain</code> 中监听语言变化</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; generateTitle, watchSwitchLang &#125; from &#39;@&#x2F;utils&#x2F;i18n&#39;\n\n&#x2F;**\n * 国际化 tags\n *&#x2F;\nwatchSwitchLang(() &#x3D;&gt; &#123;\n  store.getters.tagsViewList.forEach((route, index) &#x3D;&gt; &#123;\n    store.commit(&#39;app&#x2F;changeTagsView&#39;, &#123;\n      index,\n      tag: &#123;\n        ...route,\n        title: getTitle(route)\n      &#125;\n    &#125;)\n  &#125;)\n&#125;)</code></pre></li>\n</ol>\n<h2 id=\"5-34：方案落地：contextMenu-展示处理\"><a href=\"#5-34：方案落地：contextMenu-展示处理\" class=\"headerlink\" title=\"5-34：方案落地：contextMenu 展示处理\"></a>5-34：方案落地：contextMenu 展示处理</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/contextmenu_event\">contextMenu</a> 为 鼠标右键事件</p></blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/contextmenu_event\">contextMenu</a> 事件的处理分为两部分：</p>\n<ol>\n<li><code>contextMenu</code> 的展示</li>\n<li>右键项对应逻辑处理</li>\n</ol>\n<p>那么这一小节我们先处理第一部分：<code>contextMenu</code> 的展示：</p>\n<ol>\n<li><p>创建 <code>components/TagsView/ContextMenu</code> 组件，作为右键展示部分</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;ul class&#x3D;&quot;context-menu-container&quot;&gt;\n    &lt;li @click&#x3D;&quot;onRefreshClick&quot;&gt;\n      &#123;&#123; $t(&#39;msg.tagsView.refresh&#39;) &#125;&#125;\n    &lt;&#x2F;li&gt;\n    &lt;li @click&#x3D;&quot;onCloseRightClick&quot;&gt;\n      &#123;&#123; $t(&#39;msg.tagsView.closeRight&#39;) &#125;&#125;\n    &lt;&#x2F;li&gt;\n    &lt;li @click&#x3D;&quot;onCloseOtherClick&quot;&gt;\n      &#123;&#123; $t(&#39;msg.tagsView.closeOther&#39;) &#125;&#125;\n    &lt;&#x2F;li&gt;\n  &lt;&#x2F;ul&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport &#123; defineProps &#125; from &#39;vue&#39;\ndefineProps(&#123;\n  index: &#123;\n    type: Number,\n    required: true\n  &#125;\n&#125;)\n\nconst onRefreshClick &#x3D; () &#x3D;&gt; &#123;&#125;\n\nconst onCloseRightClick &#x3D; () &#x3D;&gt; &#123;&#125;\n\nconst onCloseOtherClick &#x3D; () &#x3D;&gt; &#123;&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n.context-menu-container &#123;\n  position: fixed;\n  background: #fff;\n  z-index: 3000;\n  list-style-type: none;\n  padding: 5px 0;\n  border-radius: 4px;\n  font-size: 12px;\n  font-weight: 400;\n  color: #333;\n  box-shadow: 2px 2px 3px 0 rgba(0, 0, 0, 0.3);\n  li &#123;\n    margin: 0;\n    padding: 7px 16px;\n    cursor: pointer;\n    &amp;:hover &#123;\n      background: #eee;\n    &#125;\n  &#125;\n&#125;\n&lt;&#x2F;style&gt;\n</code></pre>\n</li>\n<li><p>在 <code>tagsview </code> 中控制 <code>contextMenu</code> 的展示</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;tags-view-container&quot;&gt;\n    &lt;el-scrollbar class&#x3D;&quot;tags-view-wrapper&quot;&gt;\n      &lt;router-link\n        ...\n        @contextmenu.prevent&#x3D;&quot;openMenu($event, index)&quot;\n      &gt;\n        ...\n    &lt;&#x2F;el-scrollbar&gt;\n    &lt;context-menu\n      v-show&#x3D;&quot;visible&quot;\n      :style&#x3D;&quot;menuStyle&quot;\n      :index&#x3D;&quot;selectIndex&quot;\n    &gt;&lt;&#x2F;context-menu&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport ContextMenu from &#39;.&#x2F;ContextMenu.vue&#39;\nimport &#123; ref, reactive, watch &#125; from &#39;vue&#39;\nimport &#123; useRoute &#125; from &#39;vue-router&#39;\n...\n\n&#x2F;&#x2F; contextMenu 相关\nconst selectIndex &#x3D; ref(0)\nconst visible &#x3D; ref(false)\nconst menuStyle &#x3D; reactive(&#123;\n  left: 0,\n  top: 0\n&#125;)\n&#x2F;**\n * 展示 menu\n *&#x2F;\nconst openMenu &#x3D; (e, index) &#x3D;&gt; &#123;\n  const &#123; x, y &#125; &#x3D; e\n  menuStyle.left &#x3D; x + &#39;px&#39;\n  menuStyle.top &#x3D; y + &#39;px&#39;\n  selectIndex.value &#x3D; index\n  visible.value &#x3D; true\n&#125;\n\n\n&lt;&#x2F;script&gt;</code></pre></li>\n</ol>\n<h2 id=\"5-35：方案落地：contextMenu-事件处理\"><a href=\"#5-35：方案落地：contextMenu-事件处理\" class=\"headerlink\" title=\"5-35：方案落地：contextMenu 事件处理\"></a>5-35：方案落地：contextMenu 事件处理</h2><p>对于 <code>contextMenu</code> 的事件一共分为三个：</p>\n<ol>\n<li>刷新</li>\n<li>关闭右侧</li>\n<li>关闭所有</li>\n</ol>\n<p>但是不要忘记，我们之前 <strong>关闭单个 <code>tags</code></strong> 的事件还没有进行处理，所以这一小节我们一共需要处理 4 个对应的事件</p>\n<ol>\n<li><p>刷新事件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const router &#x3D; useRouter()\nconst onRefreshClick &#x3D; () &#x3D;&gt; &#123;\n  router.go(0)\n&#125;</code></pre>\n</li>\n<li><p>在 <code>store/app</code> 中，创建删除 <code>tags</code> 的 <code>mutations</code>，该 <code>mutations</code> 需要同时具备以下三个能力：</p>\n<ol>\n<li>删除 “右侧”</li>\n<li>删除 “其他”</li>\n<li>删除 “当前”</li>\n</ol>\n</li>\n<li><p>根据以上理论得出以下代码：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n     * 删除 tag\n     * @param &#123;type: &#39;other&#39;||&#39;right&#39;||&#39;index&#39;, index: index&#125; payload\n     *&#x2F;\n    removeTagsView(state, payload) &#123;\n      if (payload.type &#x3D;&#x3D;&#x3D; &#39;index&#39;) &#123;\n        state.tagsViewList.splice(payload.index, 1)\n        return\n      &#125; else if (payload.type &#x3D;&#x3D;&#x3D; &#39;other&#39;) &#123;\n        state.tagsViewList.splice(\n          payload.index + 1,\n          state.tagsViewList.length - payload.index + 1\n        )\n        state.tagsViewList.splice(0, payload.index)\n      &#125; else if (payload.type &#x3D;&#x3D;&#x3D; &#39;right&#39;) &#123;\n        state.tagsViewList.splice(\n          payload.index + 1,\n          state.tagsViewList.length - payload.index + 1\n        )\n      &#125;\n      setItem(TAGS_VIEW, state.tagsViewList)\n    &#125;,</code></pre>\n</li>\n<li><p>关闭右侧事件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const store &#x3D; useStore()\nconst onCloseRightClick &#x3D; () &#x3D;&gt; &#123;\n  store.commit(&#39;app&#x2F;removeTagsView&#39;, &#123;\n    type: &#39;right&#39;,\n    index: props.index\n  &#125;)\n&#125;</code></pre>\n</li>\n<li><p>关闭其他</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const onCloseOtherClick &#x3D; () &#x3D;&gt; &#123;\n  store.commit(&#39;app&#x2F;removeTagsView&#39;, &#123;\n    type: &#39;other&#39;,\n    index: props.index\n  &#125;)\n&#125;</code></pre>\n</li>\n<li><p>关闭当前（<code>tagsview</code>）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 关闭 tag 的点击事件\n *&#x2F;\nconst store &#x3D; useStore()\nconst onCloseClick &#x3D; index &#x3D;&gt; &#123;\n  store.commit(&#39;app&#x2F;removeTagsView&#39;, &#123;\n    type: &#39;index&#39;,\n    index: index\n  &#125;)\n&#125;</code></pre></li>\n</ol>\n<h2 id=\"5-36：方案落地：处理-contextMenu-的关闭行为\"><a href=\"#5-36：方案落地：处理-contextMenu-的关闭行为\" class=\"headerlink\" title=\"5-36：方案落地：处理 contextMenu 的关闭行为\"></a>5-36：方案落地：处理 contextMenu 的关闭行为</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 关闭 menu\n *&#x2F;\nconst closeMenu &#x3D; () &#x3D;&gt; &#123;\n  visible.value &#x3D; false\n&#125;\n\n&#x2F;**\n * 监听变化\n *&#x2F;\nwatch(visible, val &#x3D;&gt; &#123;\n  if (val) &#123;\n    document.body.addEventListener(&#39;click&#39;, closeMenu)\n  &#125; else &#123;\n    document.body.removeEventListener(&#39;click&#39;, closeMenu)\n  &#125;\n&#125;)</code></pre>\n\n\n\n<h2 id=\"5-37：方案落地：处理基于路由的动态过渡\"><a href=\"#5-37：方案落地：处理基于路由的动态过渡\" class=\"headerlink\" title=\"5-37：方案落地：处理基于路由的动态过渡\"></a>5-37：方案落地：处理基于路由的动态过渡</h2><p><a href=\"https://next.router.vuejs.org/zh/guide/advanced/transitions.html#%E5%9F%BA%E4%BA%8E%E8%B7%AF%E7%94%B1%E7%9A%84%E5%8A%A8%E6%80%81%E8%BF%87%E6%B8%A1\">处理基于路由的动态过渡</a>  官方已经给出了示例代码，结合 <code>router-view</code> 和 <code>transition</code> 我们可以非常方便的实现这个功能</p>\n<ol>\n<li><p>在 <code>appmain</code> 中处理对应代码逻辑</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;app-main&quot;&gt;\n    &lt;router-view v-slot&#x3D;&quot;&#123; Component, route &#125;&quot;&gt;\n      &lt;transition name&#x3D;&quot;fade-transform&quot; mode&#x3D;&quot;out-in&quot;&gt;\n        &lt;keep-alive&gt;\n          &lt;component :is&#x3D;&quot;Component&quot; :key&#x3D;&quot;route.path&quot; &#x2F;&gt;\n        &lt;&#x2F;keep-alive&gt;\n      &lt;&#x2F;transition&gt;\n    &lt;&#x2F;router-view&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;</code></pre>\n</li>\n<li><p>增加了 <code>tags</code> 之后，<code>app-main</code> 的位置需要进行以下处理</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n.app-main &#123;\n  min-height: calc(100vh - 50px - 43px);\n  ...\n  padding: 104px 20px 20px 20px;\n  ...\n&#125;\n&lt;&#x2F;style&gt;</code></pre>\n</li>\n<li><p>在 <code>styles/transition</code> 中增加动画渲染</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">&#x2F;* fade-transform *&#x2F;\n.fade-transform-leave-active,\n.fade-transform-enter-active &#123;\n  transition: all 0.5s;\n&#125;\n\n.fade-transform-enter-from &#123;\n  opacity: 0;\n  transform: translateX(-30px);\n&#125;\n\n.fade-transform-leave-to &#123;\n  opacity: 0;\n  transform: translateX(30px);\n&#125;</code></pre></li>\n</ol>\n<h2 id=\"5-38：tagsView-方案总结\"><a href=\"#5-38：tagsView-方案总结\" class=\"headerlink\" title=\"5-38：tagsView 方案总结\"></a>5-38：tagsView 方案总结</h2><p>那么到这里关于 <code>tagsView</code> 的内容我们就已经处理完成了。</p>\n<p>整个 <code>tagsView</code> 就像我们之前说的，拆开来看之后，会显得明确很多。</p>\n<p>整个 <code>tagsView</code> 整体来看就是三块大的内容：</p>\n<ol>\n<li><code>tags</code>：<code>tagsView</code> 组件</li>\n<li><code>contextMenu</code>：<code>contextMenu</code> 组件</li>\n<li><code>view</code>：<code>appmain</code> 组件</li>\n</ol>\n<p>再加上一部分的数据处理即可。</p>\n<p>最后关于 <code>tags</code> 的国际化部分，其实处理的方案有非常多，大家也可以在后面的 <strong>讨论题</strong> 中探讨一下关于 <strong>此处国家化</strong> 的实现，相信会有很多新的思路被打开的。</p>\n<h2 id=\"5-39：guide-原理及方案分析\"><a href=\"#5-39：guide-原理及方案分析\" class=\"headerlink\" title=\"5-39：guide 原理及方案分析\"></a>5-39：guide 原理及方案分析</h2><p>所谓 <code>guide</code> 指的就是 <strong>引导页</strong></p>\n<p>引导页是软件中经常见到的一个功能，无论是在后台项目还是前台或者是移动端项目中。</p>\n<p>那么对于引导页而言，它是如何实现的呢？我们来分析一下。</p>\n<p>通常情况下引导页是通过 <strong>聚焦</strong> 的方式，高亮一块视图，然后通过文字解释的形式来告知用户该功能的作用。</p>\n<p>所以说对于引导页而言，它的实现其实就是：<strong>页面样式</strong> 的实现。</p>\n<p>我们只需要可以做到：</p>\n<ol>\n<li>高亮某一块指定的样式</li>\n<li>在高亮的样式处通过文本展示内容</li>\n<li>用户可以进行下一次高亮或者关闭事件</li>\n</ol>\n<p>那么就可以实现对应的引导功能。</p>\n<p><strong>方案：</strong></p>\n<p>对于引导页来说，市面上有很多现成的轮子，所以我们不需要手动的去进行以上内容的处理，我们这里可以直接使用 <a href=\"https://kamranahmed.info/driver.js/\">driver.js</a> 进行引导页处理。</p>\n<p>基于 <a href=\"https://kamranahmed.info/driver.js/\">driver.js</a> 我们的实现方案如下：</p>\n<ol>\n<li>创建 <code>Guide</code> 组件：用于处理 <code>icon</code> 展示</li>\n<li>初始化 <a href=\"https://kamranahmed.info/driver.js/\">driver.js</a> </li>\n<li>指定 <a href=\"https://kamranahmed.info/driver.js/\">driver.js</a> 的 <code>steps</code></li>\n</ol>\n<h2 id=\"5-40：方案落地：生成-Guide\"><a href=\"#5-40：方案落地：生成-Guide\" class=\"headerlink\" title=\"5-40：方案落地：生成 Guide\"></a>5-40：方案落地：生成 Guide</h2><ol>\n<li>创建<code>components/Guide</code></li>\n</ol>\n   <pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;el-tooltip :content&#x3D;&quot;$t(&#39;msg.navBar.guide&#39;)&quot;&gt;\n      &lt;svg-icon icon&#x3D;&quot;guide&quot; &#x2F;&gt;\n    &lt;&#x2F;el-tooltip&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;&lt;&#x2F;script&gt;\n\n&lt;style scoped&gt;&lt;&#x2F;style&gt;\n</code></pre>\n\n<ol start=\"2\">\n<li><p>在 <code>navbar</code> 中导入该组件</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;guide class&#x3D;&quot;right-menu-item hover-effect&quot; &#x2F;&gt;\n\nimport Guide from &#39;@&#x2F;components&#x2F;Guide&#39;</code></pre></li>\n</ol>\n<h2 id=\"5-41：方案落地：Guide-业务逻辑处理\"><a href=\"#5-41：方案落地：Guide-业务逻辑处理\" class=\"headerlink\" title=\"5-41：方案落地：Guide 业务逻辑处理\"></a>5-41：方案落地：Guide 业务逻辑处理</h2><ol>\n<li><p>导入 <a href=\"https://kamranahmed.info/driver.js/\">driver.js</a> </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm i driver.js@0.9.8</code></pre>\n</li>\n<li><p>在 <code>guide.vue</code> 中初始化 <code>driiver</code></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport Driver from &#39;driver.js&#39;\nimport &#39;driver.js&#x2F;dist&#x2F;driver.min.css&#39;\nimport &#123; onMounted &#125; from &#39;vue&#39;\nimport &#123; useI18n &#125; from &#39;vue-i18n&#39;\n\nconst i18n &#x3D; useI18n()\n\nlet driver &#x3D; null\nonMounted(() &#x3D;&gt; &#123;\n  driver &#x3D; new Driver(&#123;\n    &#x2F;&#x2F; 禁止点击蒙版关闭\n    allowClose: false,\n    closeBtnText: i18n.t(&#39;msg.guide.close&#39;),\n    nextBtnText: i18n.t(&#39;msg.guide.next&#39;),\n    prevBtnText: i18n.t(&#39;msg.guide.prev&#39;)\n  &#125;)\n&#125;)\n&lt;&#x2F;script&gt;</code></pre>\n</li>\n<li><p>创建 <strong>步骤</strong> <code>steps.js</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 此处不要导入 @&#x2F;i18n 使用 i18n.global ，因为我们在 router 中 layout 不是按需加载，所以会在 Guide 会在 I18n 初始化完成之前被直接调用。导致 i18n 为 undefined\nconst steps &#x3D; i18n &#x3D;&gt; &#123;\n  return [\n    &#123;\n      element: &#39;#guide-start&#39;,\n      popover: &#123;\n        title: i18n.t(&#39;msg.guide.guideTitle&#39;),\n        description: i18n.t(&#39;msg.guide.guideDesc&#39;),\n        position: &#39;bottom-right&#39;\n      &#125;\n    &#125;,\n    &#123;\n      element: &#39;#guide-hamburger&#39;,\n      popover: &#123;\n        title: i18n.t(&#39;msg.guide.hamburgerTitle&#39;),\n        description: i18n.t(&#39;msg.guide.hamburgerDesc&#39;)\n      &#125;\n    &#125;,\n    &#123;\n      element: &#39;#guide-breadcrumb&#39;,\n      popover: &#123;\n        title: i18n.t(&#39;msg.guide.breadcrumbTitle&#39;),\n        description: i18n.t(&#39;msg.guide.breadcrumbDesc&#39;)\n      &#125;\n    &#125;,\n    &#123;\n      element: &#39;#guide-search&#39;,\n      popover: &#123;\n        title: i18n.t(&#39;msg.guide.searchTitle&#39;),\n        description: i18n.t(&#39;msg.guide.searchDesc&#39;),\n        position: &#39;bottom-right&#39;\n      &#125;\n    &#125;,\n    &#123;\n      element: &#39;#guide-full&#39;,\n      popover: &#123;\n        title: i18n.t(&#39;msg.guide.fullTitle&#39;),\n        description: i18n.t(&#39;msg.guide.fullDesc&#39;),\n        position: &#39;bottom-right&#39;\n      &#125;\n    &#125;,\n    &#123;\n      element: &#39;#guide-theme&#39;,\n      popover: &#123;\n        title: i18n.t(&#39;msg.guide.themeTitle&#39;),\n        description: i18n.t(&#39;msg.guide.themeDesc&#39;),\n        position: &#39;bottom-right&#39;\n      &#125;\n    &#125;,\n    &#123;\n      element: &#39;#guide-lang&#39;,\n      popover: &#123;\n        title: i18n.t(&#39;msg.guide.langTitle&#39;),\n        description: i18n.t(&#39;msg.guide.langDesc&#39;),\n        position: &#39;bottom-right&#39;\n      &#125;\n    &#125;,\n    &#123;\n      element: &#39;#guide-tags&#39;,\n      popover: &#123;\n        title: i18n.t(&#39;msg.guide.tagTitle&#39;),\n        description: i18n.t(&#39;msg.guide.tagDesc&#39;)\n      &#125;\n    &#125;,\n    &#123;\n      element: &#39;#guide-sidebar&#39;,\n      popover: &#123;\n        title: i18n.t(&#39;msg.guide.sidebarTitle&#39;),\n        description: i18n.t(&#39;msg.guide.sidebarDesc&#39;),\n        position: &#39;right-center&#39;\n      &#125;\n    &#125;\n  ]\n&#125;\nexport default steps</code></pre>\n</li>\n<li><p>在 <code>guide</code> 中导入“步骤”</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  ...\n  &lt;svg-icon icon&#x3D;&quot;guide&quot; @click&#x3D;&quot;onClick&quot; &#x2F;&gt;\n  ...\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\n...\nimport steps from &#39;.&#x2F;steps&#39;\n...\nconst onClick &#x3D; () &#x3D;&gt; &#123;\n  driver.defineSteps(steps(i18n))\n  driver.start()\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style scoped&gt;&lt;&#x2F;style&gt;\n</code></pre>\n</li>\n<li><p>为 <strong>引导高亮区域增加 ID</strong></p>\n</li>\n<li><p>在 <code>components/Guide/index</code> 中增加</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;svg-icon id&#x3D;&quot;guide-start&quot; icon&#x3D;&quot;guide&quot; @click&#x3D;&quot;onClick&quot; &#x2F;&gt;</code></pre>\n</li>\n<li><p>在 <code>components/Hamburger/index</code> 增加</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;svg-icon id&#x3D;&quot;guide-hamburger&quot; class&#x3D;&quot;hamburger&quot; :icon&#x3D;&quot;icon&quot;&gt;&lt;&#x2F;svg-icon&gt;</code></pre>\n</li>\n<li><p>在 <code>src/layout/components</code> 增加</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;breadcrumb id&#x3D;&quot;guide-breadcrumb&quot; class&#x3D;&quot;breadcrumb-container&quot; &#x2F;&gt;</code></pre>\n</li>\n<li><p>在 <code>components/HeaderSearch/index</code> 增加</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;svg-icon\n     id&#x3D;&quot;guide-search&quot;\n     class-name&#x3D;&quot;search-icon&quot;\n     icon&#x3D;&quot;search&quot;\n     @click.stop&#x3D;&quot;onShowClick&quot;\n   &#x2F;&gt;</code></pre>\n</li>\n<li><p>在 <code>components/Screenfull/index</code> 增加</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;svg-icon\n      id&#x3D;&quot;guide-full&quot;\n      :icon&#x3D;&quot;isFullscreen ? &#39;exit-fullscreen&#39; : &#39;fullscreen&#39;&quot;\n      @click&#x3D;&quot;onToggle&quot;\n    &#x2F;&gt;</code></pre>\n</li>\n<li><p>在 <code>components/ThemePicker/index</code> 增加</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;svg-icon id&#x3D;&quot;guide-theme&quot; icon&#x3D;&quot;change-theme&quot; &#x2F;&gt;</code></pre>\n</li>\n<li><p>在 <code>components/LangSelect/index</code> 增加</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;svg-icon id&#x3D;&quot;guide-lang&quot; icon&#x3D;&quot;language&quot; &#x2F;&gt;</code></pre>\n</li>\n<li><p>在 <code>layout/index</code> 增加</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;tags-view id&#x3D;&quot;guide-tags&quot;&gt;&lt;&#x2F;tags-view&gt;</code></pre>\n</li>\n<li><p>在 <code>layout/index</code> 增加</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;sidebar\n      id&#x3D;&quot;guide-sidebar&quot;\n      class&#x3D;&quot;sidebar-container&quot;\n      :style&#x3D;&quot;&#123; backgroundColor: $store.getters.cssVar.menuBg &#125;&quot;\n    &#x2F;&gt;</code></pre></li>\n</ol>\n<h2 id=\"5-42：总结\"><a href=\"#5-42：总结\" class=\"headerlink\" title=\"5-42：总结\"></a>5-42：总结</h2><p>那么到这里我们整个的 <strong>后台项目前端综合解决方案之通用功能开发</strong> 这一章节就算是处理完成了。</p>\n<p>在本章中我们对以下通用功能进行了处理：</p>\n<ol>\n<li>国际化</li>\n<li>动态换肤</li>\n<li><code>screenfull</code></li>\n<li><code>headerSearch</code></li>\n<li><code>tagView</code></li>\n<li><code>guide</code></li>\n</ol>\n<p>其中除了 <code>screenfull</code> 和 <code>guide</code> 之外其他的功能都是具备一定的复杂度的。</p>\n<p>但是只要我们可以根据功能分析出对应原理，就可以根据原理实现对应方案，有了方案就可以制定出对应的实现步骤。</p>\n<p>只要大的步骤没有错误，那么具体的细节功能实现只需要具体情况具体分析即可。</p>\n<p>不过大家要注意，对于这些实现方案而言，<strong>并非</strong> 只有我们项目中的这一种实现方式。大家也可以针对这些实现方案在咱们的 <strong>群里</strong> 或者 <strong>讨论区</strong> 中，和我们一起多多发言或者讨论。</p>\n","text":"第五章：通用功能开发5-01：开篇在后台项目的前端开发之中，存在着很多的通用业务功能，并且存在着一定的技术难度。 所以说就有很多人在面临这些功能的时候，大多数时都是采用 ctrl + c || v 的形式来进行实现。这就导致了虽然做过类似的功能，但是对这些功能的实现原理一知半解。...","link":"","photos":[],"count_time":{"symbolsCount":"62k","symbolsTime":"57 mins."},"categories":[{"name":"vue3.2后台管理系统","slug":"vue3-2后台管理系统","count":13,"path":"api/categories/vue3-2后台管理系统.json"}],"tags":[{"name":"后台","slug":"后台","count":12,"path":"api/tags/后台.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%94%E7%AB%A0%EF%BC%9A%E9%80%9A%E7%94%A8%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">第五章：通用功能开发</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-01%EF%BC%9A%E5%BC%80%E7%AF%87\"><span class=\"toc-text\">5-01：开篇</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-02%EF%BC%9A%E5%9B%BD%E9%99%85%E5%8C%96%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">5-02：国际化实现原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-03%EF%BC%9A%E5%9F%BA%E4%BA%8E-vue-i18n-V9-%E7%9A%84%E5%9B%BD%E9%99%85%E5%8C%96%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88%E5%88%86%E6%9E%90\"><span class=\"toc-text\">5-03：基于 vue-i18n V9  的国际化实现方案分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-04%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9A%E5%B0%81%E8%A3%85-langSelect-%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">5-04：方案落地：封装  langSelect  组件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-05%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9Aelement-plus-%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%84%E7%90%86\"><span class=\"toc-text\">5-05：方案落地：element-plus 国际化处理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-06%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80%E5%8C%85%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%84%E7%90%86\"><span class=\"toc-text\">5-06：方案落地：自定义语言包国际化处理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-07%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9A%E5%A4%84%E7%90%86%E9%A1%B9%E7%9B%AE%E5%9B%BD%E9%99%85%E5%8C%96%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">5-07：方案落地：处理项目国际化内容</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-08%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9Asidebar-%E4%B8%8E-%E9%9D%A2%E5%8C%85%E5%B1%91-%E5%8C%BA%E5%9F%9F%E7%9A%84%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%84%E7%90%86\"><span class=\"toc-text\">5-08：方案落地：sidebar 与 面包屑 区域的国际化处理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-09%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9A%E5%9B%BD%E9%99%85%E5%8C%96%E7%BC%93%E5%AD%98%E5%A4%84%E7%90%86\"><span class=\"toc-text\">5-09：方案落地：国际化缓存处理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-10%EF%BC%9A%E5%9B%BD%E9%99%85%E5%8C%96%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">5-10：国际化方案总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-11%EF%BC%9A%E5%8A%A8%E6%80%81%E6%8D%A2%E8%82%A4%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90\"><span class=\"toc-text\">5-11：动态换肤原理分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-12%EF%BC%9A%E5%8A%A8%E6%80%81%E6%8D%A2%E8%82%A4%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88%E5%88%86%E6%9E%90\"><span class=\"toc-text\">5-12：动态换肤实现方案分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-13%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9A%E5%88%9B%E5%BB%BA-ThemeSelect-%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">5-13：方案落地：创建  ThemeSelect 组件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-14%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9A%E5%88%9B%E5%BB%BA-SelectColor-%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">5-14：方案落地：创建  SelectColor 组件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-15%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9A%E5%A4%84%E7%90%86-element-plus-%E4%B8%BB%E9%A2%98%E5%8F%98%E6%9B%B4%E5%8E%9F%E7%90%86%E4%B8%8E%E6%AD%A5%E9%AA%A4%E5%88%86%E6%9E%90\"><span class=\"toc-text\">5-15：方案落地：处理 element-plus 主题变更原理与步骤分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-16%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9A%E5%A4%84%E7%90%86-element-plus-%E4%B8%BB%E9%A2%98%E5%8F%98%E6%9B%B4\"><span class=\"toc-text\">5-16：方案落地：处理 element-plus 主题变更</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-17%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9Aelement-plus-%E6%96%B0%E4%B8%BB%E9%A2%98%E7%9A%84%E7%AB%8B%E5%8D%B3%E7%94%9F%E6%95%88\"><span class=\"toc-text\">5-17：方案落地：element-plus 新主题的立即生效</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-18%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98%E5%8F%98%E6%9B%B4\"><span class=\"toc-text\">5-18：方案落地：自定义主题变更</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-19%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">5-19：自定义主题方案总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-20%EF%BC%9Ascreenfull-%E5%8E%9F%E7%90%86%E5%8F%8A%E6%96%B9%E6%A1%88%E5%88%86%E6%9E%90\"><span class=\"toc-text\">5-20：screenfull 原理及方案分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-21%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9Ascreenfull\"><span class=\"toc-text\">5-21：方案落地：screenfull</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-22%EF%BC%9AheaderSearch-%E5%8E%9F%E7%90%86%E5%8F%8A%E6%96%B9%E6%A1%88%E5%88%86%E6%9E%90\"><span class=\"toc-text\">5-22：headerSearch 原理及方案分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-23%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9A%E5%88%9B%E5%BB%BA-headerSearch-%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">5-23：方案落地：创建 headerSearch 组件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#-1\"><span class=\"toc-text\"></span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-25%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9A%E5%AF%B9%E6%A3%80%E7%B4%A2%E6%95%B0%E6%8D%AE%E6%BA%90%E8%BF%9B%E8%A1%8C%E6%A8%A1%E7%B3%8A%E6%90%9C%E7%B4%A2\"><span class=\"toc-text\">5-25：方案落地：对检索数据源进行模糊搜索</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-26%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%87%8D%E5%A4%84%E7%90%86%EF%BC%8C%E7%94%9F%E6%88%90-searchPool\"><span class=\"toc-text\">5-26：方案落地：数据源重处理，生成  searchPool</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-27%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9A%E6%B8%B2%E6%9F%93%E6%A3%80%E7%B4%A2%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">5-27：方案落地：渲染检索数据</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-28%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9A%E5%89%A9%E4%BD%99%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86\"><span class=\"toc-text\">5-28：方案落地：剩余问题处理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-29%EF%BC%9AheaderSearch-%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">5-29：headerSearch 方案总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-30%EF%BC%9AtagsView-%E5%8E%9F%E7%90%86%E5%8F%8A%E6%96%B9%E6%A1%88%E5%88%86%E6%9E%90\"><span class=\"toc-text\">5-30：tagsView 原理及方案分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-31%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9A%E5%88%9B%E5%BB%BA-tags-%E6%95%B0%E6%8D%AE%E6%BA%90\"><span class=\"toc-text\">5-31：方案落地：创建 tags 数据源</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-32%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9A%E7%94%9F%E6%88%90-tagsView\"><span class=\"toc-text\">5-32：方案落地：生成 tagsView</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-33%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9AtagsView-%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%84%E7%90%86\"><span class=\"toc-text\">5-33：方案落地：tagsView 国际化处理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-34%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9AcontextMenu-%E5%B1%95%E7%A4%BA%E5%A4%84%E7%90%86\"><span class=\"toc-text\">5-34：方案落地：contextMenu 展示处理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-35%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9AcontextMenu-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86\"><span class=\"toc-text\">5-35：方案落地：contextMenu 事件处理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-36%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9A%E5%A4%84%E7%90%86-contextMenu-%E7%9A%84%E5%85%B3%E9%97%AD%E8%A1%8C%E4%B8%BA\"><span class=\"toc-text\">5-36：方案落地：处理 contextMenu 的关闭行为</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-37%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9A%E5%A4%84%E7%90%86%E5%9F%BA%E4%BA%8E%E8%B7%AF%E7%94%B1%E7%9A%84%E5%8A%A8%E6%80%81%E8%BF%87%E6%B8%A1\"><span class=\"toc-text\">5-37：方案落地：处理基于路由的动态过渡</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-38%EF%BC%9AtagsView-%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">5-38：tagsView 方案总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-39%EF%BC%9Aguide-%E5%8E%9F%E7%90%86%E5%8F%8A%E6%96%B9%E6%A1%88%E5%88%86%E6%9E%90\"><span class=\"toc-text\">5-39：guide 原理及方案分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-40%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9A%E7%94%9F%E6%88%90-Guide\"><span class=\"toc-text\">5-40：方案落地：生成 Guide</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-41%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9AGuide-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E5%A4%84%E7%90%86\"><span class=\"toc-text\">5-41：方案落地：Guide 业务逻辑处理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-42%EF%BC%9A%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">5-42：总结</span></a></li></ol></li></ol>","author":{"name":"西非","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个跑路的设计师","socials":{"github":"https://github.com/xuhui-web","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/a18482157085","juejin":"https://juejin.cn/user/1535369026995422","customs":{}}},"mapped":true,"prev_post":{"title":"06vue3+ElementPlus综合实现","uid":"7e9c877cd1e65a897a0339a3e374ff44","slug":"vue3.2后台管理系统/06vue3+ElementPlus综合实现","date":"2022-08-22T16:02:44.000Z","updated":"2022-08-23T02:11:41.396Z","comments":true,"path":"api/articles/vue3.2后台管理系统/06vue3+ElementPlus综合实现.json","keywords":null,"cover":"/img/photo-1474903914960-c3f6602ebb5a.jpg","text":"第六章：vue3+ElementPlus综合实现6-1：开篇那么经过前面的学习，我们已经完成了： 编程规范 登录 layout 通用功能 这四个大的模块开发，那么接下来我们就可以进入到项目的业务模块开发之中，结合具体的业务来去分析方案，也是一个非常重要的能力。 那么这一章节，我们...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[{"name":"vue3.2后台管理系统","slug":"vue3-2后台管理系统","count":13,"path":"api/categories/vue3-2后台管理系统.json"}],"tags":[{"name":"后台","slug":"后台","count":12,"path":"api/tags/后台.json"}],"author":{"name":"西非","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个跑路的设计师","socials":{"github":"https://github.com/xuhui-web","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/a18482157085","juejin":"https://juejin.cn/user/1535369026995422","customs":{}}}},"next_post":{"title":"04搭建Layout架构","uid":"ded06061bffb24de88f886e4a5616cce","slug":"vue3.2后台管理系统/04搭建Layout架构","date":"2022-08-22T14:02:44.000Z","updated":"2022-08-24T02:34:58.267Z","comments":true,"path":"api/articles/vue3.2后台管理系统/04搭建Layout架构.json","keywords":null,"cover":"/img/photo-1545659681-6b0aba989615.jpg","text":"第四章：搭建Layout架构4-01：前言在上一章中我们处理完成登录之后，从这一章开始，我们就需要处理项目的 Layout 架构了。那么什么叫做 Layout 架构呢？ 我们来看这张图： 在这张图中，我们把页面分为了三个部分，分别是： 左侧的 Menu 菜单 顶部的 NavBar...","link":"","photos":[],"count_time":{"symbolsCount":"55k","symbolsTime":"50 mins."},"categories":[{"name":"vue3.2后台管理系统","slug":"vue3-2后台管理系统","count":13,"path":"api/categories/vue3-2后台管理系统.json"}],"tags":[{"name":"后台","slug":"后台","count":12,"path":"api/tags/后台.json"}],"author":{"name":"西非","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个跑路的设计师","socials":{"github":"https://github.com/xuhui-web","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/a18482157085","juejin":"https://juejin.cn/user/1535369026995422","customs":{}}}}}