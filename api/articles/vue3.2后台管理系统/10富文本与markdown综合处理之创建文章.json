{"title":"10富文本与markdown综合处理之创建文章","uid":"b1e9e78ac18c4b9597d3b65fe8a20c6a","slug":"vue3.2后台管理系统/10富文本与markdown综合处理之创建文章","date":"2022-08-22T20:02:44.000Z","updated":"2022-08-23T02:05:31.286Z","comments":true,"path":"api/articles/vue3.2后台管理系统/10富文本与markdown综合处理之创建文章.json","keywords":null,"cover":"/img/SplitShire-21-7016-1024x683.jpg","content":"<h1 id=\"第十章：富文本与markdown综合处理之创建文章\"><a href=\"#第十章：富文本与markdown综合处理之创建文章\" class=\"headerlink\" title=\"第十章：富文本与markdown综合处理之创建文章\"></a>第十章：富文本与markdown综合处理之创建文章</h1><h2 id=\"10-1：开篇\"><a href=\"#10-1：开篇\" class=\"headerlink\" title=\"10-1：开篇\"></a>10-1：开篇</h2><p>本章中我们的核心业务就是 <strong>编辑文章</strong>。</p>\n<p>而对于 <strong>编辑文章</strong> 而言提供了两种编辑方式：</p>\n<ol>\n<li>富文本</li>\n<li><code>markdown</code></li>\n</ol>\n<p>对于这两种编辑形式在现在的前端中都拥有非常多的第三方库，那么对于我们开发者而言，我们肯定也是从中去选择出一个适合我们当前业务的库来进行使用，从而实现出对应的编辑形式。</p>\n<p>那么对于我们本章的内容而言，主要就是分成了三个部分：</p>\n<ol>\n<li>辅助业务：创建文章、编辑文章</li>\n<li>富文本库：介绍 、使用</li>\n<li><code>markdown</code>：介绍、使用</li>\n</ol>\n<p>那么明确好了对应的内容之后，接下来我们就去进行对应的实现即可</p>\n<h2 id=\"10-2：辅助业务：创建文章基本结构实现\"><a href=\"#10-2：辅助业务：创建文章基本结构实现\" class=\"headerlink\" title=\"10-2：辅助业务：创建文章基本结构实现\"></a>10-2：辅助业务：创建文章基本结构实现</h2><p>那么首先我们先去完成 <strong>创建文章</strong> 的基本结构，主要分成三部分：</p>\n<ol>\n<li><code>article-create</code> 页面：基本结构</li>\n<li><code>Editor</code> 组件：富文本编辑器</li>\n<li><code>Markdown</code> 组件：<code>markdown</code> 编辑器</li>\n</ol>\n<p>那么明确好了之后，我们就去进行对应的实现：</p>\n<ol>\n<li><p>创建 <code>views/article-create/components/Editor</code></p>\n</li>\n<li><p>创建 <code>views/article-create/components/Markdown</code></p>\n</li>\n<li><p>在 <code>views/article-create</code> 完成基本结构</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;article-create&quot;&gt;\n    &lt;el-card&gt;\n      &lt;el-input\n        class&#x3D;&quot;title-input&quot;\n        :placeholder&#x3D;&quot;$t(&#39;msg.article.titlePlaceholder&#39;)&quot;\n        v-model&#x3D;&quot;title&quot;\n        maxlength&#x3D;&quot;20&quot;\n        clearable\n      &gt;\n      &lt;&#x2F;el-input&gt;\n      &lt;el-tabs v-model&#x3D;&quot;activeName&quot;&gt;\n        &lt;el-tab-pane :label&#x3D;&quot;$t(&#39;msg.article.markdown&#39;)&quot; name&#x3D;&quot;markdown&quot;&gt;\n          &lt;markdown&gt;&lt;&#x2F;markdown&gt;\n        &lt;&#x2F;el-tab-pane&gt;\n        &lt;el-tab-pane :label&#x3D;&quot;$t(&#39;msg.article.richText&#39;)&quot; name&#x3D;&quot;editor&quot;&gt;\n          &lt;editor&gt;&lt;&#x2F;editor&gt;\n        &lt;&#x2F;el-tab-pane&gt;\n      &lt;&#x2F;el-tabs&gt;\n    &lt;&#x2F;el-card&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport Editor from &#39;.&#x2F;components&#x2F;Editor.vue&#39;\nimport Markdown from &#39;.&#x2F;components&#x2F;Markdown.vue&#39;\nimport &#123; ref &#125; from &#39;vue&#39;\n\nconst activeName &#x3D; ref(&#39;markdown&#39;)\nconst title &#x3D; ref(&#39;&#39;)\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n.title-input &#123;\n  margin-bottom: 20px;\n&#125;\n&lt;&#x2F;style&gt;\n</code></pre></li>\n</ol>\n<h2 id=\"10-3：编辑库选择标准\"><a href=\"#10-3：编辑库选择标准\" class=\"headerlink\" title=\"10-3：编辑库选择标准\"></a>10-3：编辑库选择标准</h2><p>对于现在的前端编辑库（<code>markdown</code> 与 富文本）而言，如果仅从功能上来去看的话，那么其实都是相差无几的。</p>\n<p>随便从 <code>github</code> 中挑选编辑库，只要 <code>star</code> 在 <code>10K（保守些）</code> 以上的，编辑器之上的常用功能一应俱全。</p>\n<p>那么这样的话就会导致一个问题我们想要去选择一个编辑库的话，应该如何去进行选择呢？</p>\n<p>如果你现在想要去选择一个编辑库，那么可以从以下几点中进行选择：</p>\n<ol>\n<li><a href=\"https://www.runoob.com/w3cnote/open-source-license.html\">开源协议</a>：其中尽量选择 <code>MIT</code> 或者 <code>BSD</code> 协议的开源项目<img src=\"10富文本与markdown综合处理之创建文章/image-20211006194630048.png\" alt=\"image-20211006194630048\" style=\"zoom:67%;\" /></li>\n<li>功能：功能需要满足基本需求</li>\n<li><code>issue</code>：通过 <code>issue</code> 查看作者对该库的维护程度<img src=\"/post/vue3.2%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/10%E5%AF%8C%E6%96%87%E6%9C%AC%E4%B8%8Emarkdown%E7%BB%BC%E5%90%88%E5%A4%84%E7%90%86%E4%B9%8B%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0/image-20211006194612197.png\" class=\"\" title=\"image-20211006194612197\"></li>\n<li>文档：文档越详尽越好，最好提供了中文文档（英文好的可以忽略）</li>\n<li>国产的：或许你 <code>朋友的朋友的朋友</code> 就是这个库的作者</li>\n</ol>\n<p>那么根据以上几点，我选择了以下的编辑器库：</p>\n<ol>\n<li><code>markdown</code> 编辑器：<a href=\"https://github.com/nhn/tui.editor\">tui.editor</a></li>\n<li>富文本编辑器：<a href=\"https://github.com/wangeditor-team/wangEditor\">wangEditor</a></li>\n</ol>\n<p>那么最后给大家推荐一些编辑器库，大家可以进行一些参考：</p>\n<ol>\n<li><code>markdown</code> 编辑器：<ol>\n<li><a href=\"https://github.com/nhn/tui.editor\">tui.editor</a>：<code>Markdown</code> 所见即所得编辑器-高效且可扩展，使用MIT开源协议。</li>\n<li><a href=\"https://github.com/lepture/editor\">editor</a>：纯文本 <code>markdown</code> 编辑器</li>\n<li><a href=\"https://github.com/pandao/editor.md\">editor.md</a>：开源可嵌入的在线<code>markdown</code>编辑器(组件)，基于 <code>CodeMirror</code> &amp; <code>jQuery</code> &amp; <code>Marked</code>。国产</li>\n<li><a href=\"https://github.com/adam-p/markdown-here\">markdown-here</a>：谷歌开源，但是已经 <strong>多年不更新</strong> 了</li>\n<li><a href=\"https://github.com/benweet/stackedit\">stackedit</a>：基于<code>PageDown</code>，<code>Stack Overflow</code>和其他Stack Exchange站点使用的<code>Markdown</code>库的功能齐全的开源Markdown编辑器。<strong>两年未更新了</strong></li>\n<li><a href=\"https://github.com/markdown-it/markdown-it\">markdown-it</a>：可配置语法，可添加、替换规则。<strong>挺长时间未更新了</strong></li>\n</ol>\n</li>\n<li>富文本编辑器：<ol>\n<li><a href=\"https://github.com/wangeditor-team/wangEditor\">wangEditor</a>：国产、文档详尽、更新快速</li>\n<li><a href=\"https://github.com/tinymce/tinymce\">tinymce</a>：对 <code>IE6+</code> 和 <code>Firefox1.5+</code> 都有着非常良好的支持</li>\n<li><a href=\"https://github.com/quilljs/quill\">quill</a>：代码高亮功能、视频加载功能、公式处理比较强。</li>\n<li><a href=\"https://github.com/ckeditor/ckeditor5\">ckeditor5</a>：编辑能力强</li>\n<li><a href=\"https://froala.com/wysiwyg-editor/\">wysiwyg-editor</a>：<strong>收费的</strong> ， 就是牛</li>\n</ol>\n</li>\n</ol>\n<p>以上列举出的编辑器，大家可以进行一些参考</p>\n<h2 id=\"10-4：新建文章：markdown-实现\"><a href=\"#10-4：新建文章：markdown-实现\" class=\"headerlink\" title=\"10-4：新建文章：markdown 实现\"></a>10-4：新建文章：markdown 实现</h2><p>我们通过 <a href=\"https://github.com/nhn/tui.editor\">tui.editor</a> 实现 <code>markdown</code> 的编辑功能：</p>\n<ol>\n<li><p>下载 <a href=\"https://github.com/nhn/tui.editor\">tui.editor</a></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm i @toast-ui&#x2F;editor@3.0.2</code></pre>\n</li>\n<li><p>渲染基本结构</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;markdown-container&quot;&gt;\n    &lt;!-- 渲染区 --&gt;\n    &lt;div id&#x3D;&quot;markdown-box&quot;&gt;&lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;bottom&quot;&gt;\n      &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;onSubmitClick&quot;&gt;&#123;&#123;\n        $t(&#39;msg.article.commit&#39;)\n      &#125;&#125;&lt;&#x2F;el-button&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport &#123;&#125; from &#39;vue&#39;\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n.markdown-container &#123;\n  .bottom &#123;\n    margin-top: 20px;\n    text-align: right;\n  &#125;\n&#125;\n&lt;&#x2F;style&gt;\n</code></pre>\n</li>\n<li><p>初始化 <code>editor</code> ，处理国际化内容</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport MkEditor from &#39;@toast-ui&#x2F;editor&#39;\nimport &#39;@toast-ui&#x2F;editor&#x2F;dist&#x2F;toastui-editor.css&#39;\nimport &#39;@toast-ui&#x2F;editor&#x2F;dist&#x2F;i18n&#x2F;zh-cn&#39;\nimport &#123; onMounted &#125; from &#39;vue&#39;\nimport &#123; useStore &#125; from &#39;vuex&#39;\n\n&#x2F;&#x2F; Editor实例\nlet mkEditor\n&#x2F;&#x2F; 处理离开页面切换语言导致 dom 无法被获取\nlet el\nonMounted(() &#x3D;&gt; &#123;\n  el &#x3D; document.querySelector(&#39;#markdown-box&#39;)\n  initEditor()\n&#125;)\n\nconst store &#x3D; useStore()\nconst initEditor &#x3D; () &#x3D;&gt; &#123;\n  mkEditor &#x3D; new MkEditor(&#123;\n    el,\n    height: &#39;500px&#39;,\n    previewStyle: &#39;vertical&#39;,\n    language: store.getters.language &#x3D;&#x3D;&#x3D; &#39;zh&#39; ? &#39;zh-CN&#39; : &#39;en&#39;\n  &#125;)\n\n  mkEditor.getMarkdown()\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n</li>\n<li><p>在语言改变时，重置 <code>editor</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; watchSwitchLang &#125; from &#39;@&#x2F;utils&#x2F;i18n&#39;\n\nwatchSwitchLang(() &#x3D;&gt; &#123;\n  if (!el) return\n  const htmlStr &#x3D; mkEditor.getHTML()\n  mkEditor.destroy()\n  initEditor()\n  mkEditor.setHTML(htmlStr)\n&#125;)</code></pre></li>\n</ol>\n<h2 id=\"10-5：新建文章：markdown-文章提交\"><a href=\"#10-5：新建文章：markdown-文章提交\" class=\"headerlink\" title=\"10-5：新建文章：markdown 文章提交\"></a>10-5：新建文章：markdown 文章提交</h2><ol>\n<li><p>在 <code>api/article</code> 中，定义创建文章接口</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 创建文章\n *&#x2F;\nexport const createArticle &#x3D; (data) &#x3D;&gt; &#123;\n  return request(&#123;\n    url: &#39;&#x2F;article&#x2F;create&#39;,\n    method: &#39;POST&#39;,\n    data\n  &#125;)\n&#125;</code></pre>\n</li>\n<li><p>因为 <code>markdown</code> 或者是 富文本 最终都会处理提交事件，所以我们可以把这两件事情合并到一个模块中实现：</p>\n</li>\n<li><p>创建 <code>article-create/components/commit.js</code> </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; createArticle &#125; from &#39;@&#x2F;api&#x2F;article&#39;\nimport &#123; ElMessage &#125; from &#39;element-plus&#39;\nimport i18n from &#39;@&#x2F;i18n&#39;\nconst t &#x3D; i18n.global.t\n\nexport const commitArticle &#x3D; async (data) &#x3D;&gt; &#123;\n  const res &#x3D; await createArticle(data)\n  ElMessage.success(t(&#39;msg.article.createSuccess&#39;))\n  return res\n&#125;\n</code></pre>\n</li>\n<li><p>在 <code>markdown.vue</code> 中导入该方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; commitArticle &#125; from &#39;.&#x2F;commit&#39;\n</code></pre>\n</li>\n<li><p>触发按钮提交事件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const props &#x3D; defineProps(&#123;\n  title: &#123;\n    required: true,\n    type: String\n  &#125;\n&#125;)\n\nconst emits &#x3D; defineEmits([&#39;onSuccess&#39;])\n...\n&#x2F;&#x2F; 处理提交\nconst onSubmitClick &#x3D; async () &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 创建文章\n  await commitArticle(&#123;\n    title: props.title,\n    content: mkEditor.getHTML()\n  &#125;)\n\n  mkEditor.reset()\n  emits(&#39;onSuccess&#39;)\n&#125;</code></pre>\n</li>\n<li><p>在 <code>article-create</code> 中传递 <code>title</code>，处理 <code>onSuccess</code> 事件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 创建成功\nconst onSuccess &#x3D; () &#x3D;&gt; &#123;\n  title.value &#x3D; &#39;&#39;\n&#125;</code></pre></li>\n</ol>\n<h2 id=\"10-6：新建文章：markdown-文章编辑\"><a href=\"#10-6：新建文章：markdown-文章编辑\" class=\"headerlink\" title=\"10-6：新建文章：markdown 文章编辑\"></a>10-6：新建文章：markdown 文章编辑</h2><ol>\n<li><p>在 <code>article-detail</code> 中点击编辑按钮，进入创建文章页面</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 编辑\nconst router &#x3D; useRouter()\nconst onEditClick &#x3D; () &#x3D;&gt; &#123;\n  router.push(&#96;&#x2F;article&#x2F;editor&#x2F;$&#123;articleId&#125;&#96;)\n&#125;</code></pre>\n</li>\n<li><p>在 <code>article-craete</code> 中，处理 <strong>编辑</strong> 相关操作</p>\n</li>\n<li><p>获取当前文章数据</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 处理编辑相关\nconst route &#x3D; useRoute()\nconst articleId &#x3D; route.params.id\nconst detail &#x3D; ref(&#123;&#125;)\nconst getArticleDetail &#x3D; async () &#x3D;&gt; &#123;\n  detail.value &#x3D; await articleDetail(articleId)\n  &#x2F;&#x2F; 标题赋值\n  title.value &#x3D; detail.value.title\n&#125;\nif (articleId) &#123;\n  getArticleDetail()\n&#125;</code></pre>\n</li>\n<li><p>把获取到的数据传递给 <code>markdown</code> 组件</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;markdown\n    :title&#x3D;&quot;title&quot;\n    :detail&#x3D;&quot;detail&quot;\n    @onSuccess&#x3D;&quot;onSuccess&quot;\n&gt;&lt;&#x2F;markdown&gt;</code></pre>\n</li>\n<li><p>在 <code>markdown</code> 中接收该数据</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const props &#x3D; defineProps(&#123;\n ...\n  detail: &#123;\n    type: Object\n  &#125;\n&#125;)</code></pre>\n</li>\n<li><p>检测数据变化，存在 <code>detail</code> 时，把 <code>detail</code> 赋值给 <code>mkEditor</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 编辑相关\nwatch(\n  () &#x3D;&gt; props.detail,\n  (val) &#x3D;&gt; &#123;\n    if (val &amp;&amp; val.content) &#123;\n      mkEditor.setHTML(val.content)\n    &#125;\n  &#125;,\n  &#123;\n    immediate: true\n  &#125;\n)</code></pre>\n</li>\n<li><p>创建 <strong>编辑文章</strong> 接口</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 编辑文章详情\n *&#x2F;\nexport const articleEdit &#x3D; (data) &#x3D;&gt; &#123;\n  return request(&#123;\n    url: &#39;&#x2F;article&#x2F;edit&#39;,\n    method: &#39;POST&#39;,\n    data\n  &#125;)\n&#125;</code></pre>\n</li>\n<li><p>在 <code>commit.js</code> 中生成 <strong>编辑文章</strong> 方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export const editArticle &#x3D; async data &#x3D;&gt; &#123;\n  const res &#x3D; await articleEdit(data)\n  ElMessage.success(t(&#39;msg.article.editorSuccess&#39;))\n  return res\n&#125;</code></pre>\n</li>\n<li><p>在 <code>markdown</code> 中处理提交按钮事件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 处理提交\nconst onSubmitClick &#x3D; async () &#x3D;&gt; &#123;\n  if (props.detail &amp;&amp; props.detail._id) &#123;\n    &#x2F;&#x2F; 编辑文章\n    await editArticle(&#123;\n      id: props.detail._id,\n      title: props.title,\n      content: mkEditor.getHTML()\n    &#125;)\n  &#125; else &#123;\n    &#x2F;&#x2F; 创建文章\n    await commitArticle(&#123;\n      title: props.title,\n      content: mkEditor.getHTML()\n    &#125;)\n  &#125;\n\n  mkEditor.reset()\n  emits(&#39;onSuccess&#39;)\n&#125;</code></pre></li>\n</ol>\n<h2 id=\"10-7：新建文章：富文本-实现\"><a href=\"#10-7：新建文章：富文本-实现\" class=\"headerlink\" title=\"10-7：新建文章：富文本 实现\"></a>10-7：新建文章：富文本 实现</h2><p>富文本我们使用 <a href=\"https://github.com/wangeditor-team/wangEditor\">wangEditor</a>，所以我们得先去下载 <a href=\"https://github.com/wangeditor-team/wangEditor\">wangEditor</a></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm i wangeditor@4.7.6</code></pre>\n\n<p>安装完成之后，我们就去实现对应的代码逻辑：</p>\n<ol>\n<li><p>创建基本组件结构</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;editor-container&quot;&gt;\n    &lt;div id&#x3D;&quot;editor-box&quot;&gt;&lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;bottom&quot;&gt;\n      &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;onSubmitClick&quot;&gt;&#123;&#123;\n        $t(&#39;msg.article.commit&#39;)\n      &#125;&#125;&lt;&#x2F;el-button&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport &#123;&#125; from &#39;vue&#39;\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n.editor-container &#123;\n  .bottom &#123;\n    margin-top: 20px;\n    text-align: right;\n  &#125;\n&#125;\n&lt;&#x2F;style&gt;\n</code></pre>\n</li>\n<li><p>初始化 <code>wangEditor</code></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport E from &#39;wangeditor&#39;\nimport &#123; onMounted &#125; from &#39;vue&#39;\n\n&#x2F;&#x2F; Editor实例\nlet editor\n&#x2F;&#x2F; 处理离开页面切换语言导致 dom 无法被获取\nlet el\nonMounted(() &#x3D;&gt; &#123;\n  el &#x3D; document.querySelector(&#39;#editor-box&#39;)\n  initEditor()\n&#125;)\n\nconst initEditor &#x3D; () &#x3D;&gt; &#123;\n  editor &#x3D; new E(el)\n  editor.config.zIndex &#x3D; 1\n  &#x2F;&#x2F; 菜单栏提示\n  editor.config.showMenuTooltips &#x3D; true\n  editor.config.menuTooltipPosition &#x3D; &#39;down&#39;\n  editor.create()\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n</li>\n<li><p><code>wangEditor</code>  的 <a href=\"https://www.wangeditor.com/doc/pages/12-%E5%A4%9A%E8%AF%AD%E8%A8%80/\">国际化处理</a>，官网支持 <a href=\"https://www.i18next.com/\">i18next</a>，所以想要处理 <code>wangEditor</code> 的国际化，那么我们需要安装 <a href=\"https://www.i18next.com/\">i18next</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">npm i --save i18next@20.4.0</code></pre>\n</li>\n<li><p>对 <code>wangEditor</code> 进行国际化处理</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import i18next from &#39;i18next&#39;\nimport &#123; useStore &#125; from &#39;vuex&#39;\n\nconst store &#x3D; useStore()\n...\nconst initEditor &#x3D; () &#x3D;&gt; &#123;\n  ...\n\n  &#x2F;&#x2F; 国际化相关处理\n  editor.config.lang &#x3D; store.getters.language &#x3D;&#x3D;&#x3D; &#39;zh&#39; ? &#39;zh-CN&#39; : &#39;en&#39;\n  editor.i18next &#x3D; i18next\n\n  editor.create()\n&#125;</code></pre>\n</li>\n<li><p>处理提交事件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; onMounted, defineProps, defineEmits &#125; from &#39;vue&#39;\nimport &#123; commitArticle &#125; from &#39;.&#x2F;commit&#39;\n\nconst props &#x3D; defineProps(&#123;\n  title: &#123;\n    required: true,\n    type: String\n  &#125;\n&#125;)\n\nconst emits &#x3D; defineEmits([&#39;onSuccess&#39;])\n...\nconst onSubmitClick &#x3D; async () &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 创建文章\n  await commitArticle(&#123;\n    title: props.title,\n    content: editor.txt.html()\n  &#125;)\n\n  editor.txt.html(&#39;&#39;)\n  emits(&#39;onSuccess&#39;)\n&#125;</code></pre>\n</li>\n<li><p>不要忘记在 <code>article-create</code> 中处理对应事件</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;editor\n    :title&#x3D;&quot;title&quot;\n    :detail&#x3D;&quot;detail&quot;\n    @onSuccess&#x3D;&quot;onSuccess&quot;\n&gt;&lt;&#x2F;editor&gt;</code></pre>\n</li>\n<li><p>最后处理编辑</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const props &#x3D; defineProps(&#123;\n  ...\n  detail: &#123;\n    type: Object\n  &#125;\n&#125;)\n\n&#x2F;&#x2F; 编辑相关\nwatch(\n  () &#x3D;&gt; props.detail,\n  (val) &#x3D;&gt; &#123;\n    if (val &amp;&amp; val.content) &#123;\n      editor.txt.html(val.content)\n    &#125;\n  &#125;,\n  &#123;\n    immediate: true\n  &#125;\n)\n\nconst onSubmitClick &#x3D; async () &#x3D;&gt; &#123;\n  if (props.detail &amp;&amp; props.detail._id) &#123;\n    &#x2F;&#x2F; 编辑文章\n    await editArticle(&#123;\n      id: props.detail._id,\n      title: props.title,\n      content: editor.txt.html()\n    &#125;)\n  &#125; else &#123;\n    &#x2F;&#x2F; 创建文章\n    await commitArticle(&#123;\n      title: props.title,\n      content: editor.txt.html()\n    &#125;)\n  &#125;\n\n  editor.txt.html(&#39;&#39;)\n  emits(&#39;onSuccess&#39;)\n&#125;</code></pre></li>\n</ol>\n<h2 id=\"10-8：总结\"><a href=\"#10-8：总结\" class=\"headerlink\" title=\"10-8：总结\"></a>10-8：总结</h2><p>本章节中我们的核心重点就是 <strong>编辑库</strong> 的选择</p>\n<p>常用的编辑库其实主要就分成了这么两种：</p>\n<ol>\n<li><code>markdown</code></li>\n<li>富文本</li>\n</ol>\n<p>那么对于大家而言，不一定非要使用我们在课程中使用的这两个编辑器库。</p>\n<p>因为对于编辑器库而言，它的使用方式都是大同小异的，大家只需要根据我们 <strong>《编辑器库选择标准》</strong> 来选择使用自己当前情况的编辑器库即可</p>\n","feature":true,"text":"第十章：富文本与markdown综合处理之创建文章10-1：开篇本章中我们的核心业务就是 编辑文章。 而对于 编辑文章 而言提供了两种编辑方式： 富文本 markdown 对于这两种编辑形式在现在的前端中都拥有非常多的第三方库，那么对于我们开发者而言，我们肯定也是从中去选择出一个...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"vue3.2后台管理系统","slug":"vue3-2后台管理系统","count":12,"path":"api/categories/vue3-2后台管理系统.json"}],"tags":[{"name":"后台","slug":"后台","count":12,"path":"api/tags/后台.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%8D%81%E7%AB%A0%EF%BC%9A%E5%AF%8C%E6%96%87%E6%9C%AC%E4%B8%8Emarkdown%E7%BB%BC%E5%90%88%E5%A4%84%E7%90%86%E4%B9%8B%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0\"><span class=\"toc-text\">第十章：富文本与markdown综合处理之创建文章</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-1%EF%BC%9A%E5%BC%80%E7%AF%87\"><span class=\"toc-text\">10-1：开篇</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-2%EF%BC%9A%E8%BE%85%E5%8A%A9%E4%B8%9A%E5%8A%A1%EF%BC%9A%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">10-2：辅助业务：创建文章基本结构实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-3%EF%BC%9A%E7%BC%96%E8%BE%91%E5%BA%93%E9%80%89%E6%8B%A9%E6%A0%87%E5%87%86\"><span class=\"toc-text\">10-3：编辑库选择标准</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-4%EF%BC%9A%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%EF%BC%9Amarkdown-%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">10-4：新建文章：markdown 实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-5%EF%BC%9A%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%EF%BC%9Amarkdown-%E6%96%87%E7%AB%A0%E6%8F%90%E4%BA%A4\"><span class=\"toc-text\">10-5：新建文章：markdown 文章提交</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-6%EF%BC%9A%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%EF%BC%9Amarkdown-%E6%96%87%E7%AB%A0%E7%BC%96%E8%BE%91\"><span class=\"toc-text\">10-6：新建文章：markdown 文章编辑</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-7%EF%BC%9A%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%EF%BC%9A%E5%AF%8C%E6%96%87%E6%9C%AC-%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">10-7：新建文章：富文本 实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-8%EF%BC%9A%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">10-8：总结</span></a></li></ol></li></ol>","author":{"name":"西非","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个跑路的设计师","socials":{"github":"https://github.com/xuhui-web","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/a18482157085","juejin":"https://juejin.cn/user/1535369026995422","customs":{}}},"mapped":true,"prev_post":{"title":"11项目部署之通用方案","uid":"ceaf92ec45e058e81b36404611c06d3e","slug":"vue3.2后台管理系统/11项目部署之通用方案","date":"2022-08-22T21:02:44.000Z","updated":"2022-08-23T02:05:49.385Z","comments":true,"path":"api/articles/vue3.2后台管理系统/11项目部署之通用方案.json","keywords":null,"cover":"/img/SplitShire-21-7162-1024x683.jpg","text":"第十一章：项目部署之通用方案11-1：开篇那么到这里我们的整个课程就已经接近尾声了。 最后我们就需要来看一下项目的打包和发布功能，这两个功能也就是我们本章节的主要功能。 11-2：项目构建过程分析与实现本小节我们主要围绕着三个问题来去讲： 为什么需要打包项目？ 打包之后项目可以通...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"vue3.2后台管理系统","slug":"vue3-2后台管理系统","count":12,"path":"api/categories/vue3-2后台管理系统.json"}],"tags":[{"name":"后台","slug":"后台","count":12,"path":"api/tags/后台.json"}],"author":{"name":"西非","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个跑路的设计师","socials":{"github":"https://github.com/xuhui-web","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/a18482157085","juejin":"https://juejin.cn/user/1535369026995422","customs":{}}},"feature":true},"next_post":{"title":"09动态表格渲染方案之文章排名业务实现","uid":"003ef1fc8e383b34a44488d3579cdaee","slug":"vue3.2后台管理系统/09动态表格渲染方案之文章排名业务实现","date":"2022-08-22T19:02:44.000Z","updated":"2022-08-23T02:05:17.886Z","comments":true,"path":"api/articles/vue3.2后台管理系统/09动态表格渲染方案之文章排名业务实现.json","keywords":null,"cover":"/img/SplitShire-21-5282-1024x683.jpg","text":"第九章：动态表格渲染方案之文章排名业务实现9-01：开篇对于 文章排名 而言，核心的内容是围绕着表格处理来进行的。对应的核心业务主要有两个： 文章排名切换 动态表格渲染 这两个核心业务配合着其他的一些辅助功能： 文章排名页面展示 文章详情页面展示 共同组成了咱们这一大章的内容 9...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[{"name":"vue3.2后台管理系统","slug":"vue3-2后台管理系统","count":12,"path":"api/categories/vue3-2后台管理系统.json"}],"tags":[{"name":"后台","slug":"后台","count":12,"path":"api/tags/后台.json"}],"author":{"name":"西非","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个跑路的设计师","socials":{"github":"https://github.com/xuhui-web","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/a18482157085","juejin":"https://juejin.cn/user/1535369026995422","customs":{}}}}}