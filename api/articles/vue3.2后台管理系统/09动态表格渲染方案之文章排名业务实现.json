{"title":"09动态表格渲染方案之文章排名业务实现","uid":"003ef1fc8e383b34a44488d3579cdaee","slug":"vue3.2后台管理系统/09动态表格渲染方案之文章排名业务实现","date":"2022-08-22T19:02:44.000Z","updated":"2022-08-23T02:05:17.886Z","comments":true,"path":"api/articles/vue3.2后台管理系统/09动态表格渲染方案之文章排名业务实现.json","keywords":null,"cover":"/img/SplitShire-21-5282-1024x683.jpg","content":"<h1 id=\"第九章：动态表格渲染方案之文章排名业务实现\"><a href=\"#第九章：动态表格渲染方案之文章排名业务实现\" class=\"headerlink\" title=\"第九章：动态表格渲染方案之文章排名业务实现\"></a>第九章：动态表格渲染方案之文章排名业务实现</h1><h2 id=\"9-01：开篇\"><a href=\"#9-01：开篇\" class=\"headerlink\" title=\"9-01：开篇\"></a>9-01：开篇</h2><p>对于 <strong>文章排名</strong> 而言，核心的内容是围绕着表格处理来进行的。对应的核心业务主要有两个：</p>\n<ol>\n<li>文章排名切换</li>\n<li>动态表格渲染</li>\n</ol>\n<p>这两个核心业务配合着其他的一些辅助功能：</p>\n<ol>\n<li>文章排名页面展示</li>\n<li>文章详情页面展示</li>\n</ol>\n<p>共同组成了咱们这一大章的内容</p>\n<h2 id=\"9-02：辅助业务：文章排名页面渲染\"><a href=\"#9-02：辅助业务：文章排名页面渲染\" class=\"headerlink\" title=\"9-02：辅助业务：文章排名页面渲染\"></a>9-02：辅助业务：文章排名页面渲染</h2><p>整个 <strong>文章排名</strong> 的页面渲染分成三个部分：</p>\n<ol>\n<li>顶部的动态展示区域</li>\n<li>中间的 <code>table</code> 列表展示区域</li>\n<li>底部的分页展示区域</li>\n</ol>\n<p>那么在这一小节中，我们先去渲染第 2、3 两部分：</p>\n<ol>\n<li><p>创建 <code>api/article</code> 文件定义数据获取接口</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import request from &#39;@&#x2F;utils&#x2F;request&#39;\n\n&#x2F;**\n * 获取列表数据\n *&#x2F;\nexport const getArticleList &#x3D; data &#x3D;&gt; &#123;\n  return request(&#123;\n    url: &#39;&#x2F;article&#x2F;list&#39;,\n    params: data\n  &#125;)\n&#125;\n</code></pre>\n</li>\n<li><p>在 <code>article-ranking</code> 中获取对应数据</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;script setup&gt;\nimport &#123; ref, onActivated &#125; from &#39;vue&#39;\nimport &#123; getArticleList &#125; from &#39;@&#x2F;api&#x2F;article&#39;\nimport &#123; watchSwitchLang &#125; from &#39;@&#x2F;utils&#x2F;i18n&#39;\n\n&#x2F;&#x2F; 数据相关\nconst tableData &#x3D; ref([])\nconst total &#x3D; ref(0)\nconst page &#x3D; ref(1)\nconst size &#x3D; ref(10)\n\n&#x2F;&#x2F; 获取数据的方法\nconst getListData &#x3D; async () &#x3D;&gt; &#123;\n  const result &#x3D; await getArticleList(&#123;\n    page: page.value,\n    size: size.value\n  &#125;)\n  tableData.value &#x3D; result.list\n  total.value &#x3D; result.total\n&#125;\ngetListData()\n&#x2F;&#x2F; 监听语言切换\nwatchSwitchLang(getListData)\n&#x2F;&#x2F; 处理数据不重新加载的问题\nonActivated(getListData)\n&lt;&#x2F;script&gt;</code></pre>\n</li>\n<li><p>根据数据渲染视图</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;article-ranking-container&quot;&gt;\n    &lt;el-card&gt;\n      &lt;el-table ref&#x3D;&quot;tableRef&quot; :data&#x3D;&quot;tableData&quot; border&gt;\n        &lt;el-table-column\n          :label&#x3D;&quot;$t(&#39;msg.article.ranking&#39;)&quot;\n          prop&#x3D;&quot;ranking&quot;\n        &gt;&lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column\n          :label&#x3D;&quot;$t(&#39;msg.article.title&#39;)&quot;\n          prop&#x3D;&quot;title&quot;\n        &gt;&lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column\n          :label&#x3D;&quot;$t(&#39;msg.article.author&#39;)&quot;\n          prop&#x3D;&quot;author&quot;\n        &gt;&lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column\n          :label&#x3D;&quot;$t(&#39;msg.article.publicDate&#39;)&quot;\n          prop&#x3D;&quot;publicDate&quot;\n        &gt;\n        &lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column\n          :label&#x3D;&quot;$t(&#39;msg.article.desc&#39;)&quot;\n          prop&#x3D;&quot;desc&quot;\n        &gt;&lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column :label&#x3D;&quot;$t(&#39;msg.article.action&#39;)&quot;&gt;\n          &lt;el-button type&#x3D;&quot;primary&quot; size&#x3D;&quot;mini&quot; @click&#x3D;&quot;onShowClick(row)&quot;&gt;&#123;&#123;\n            $t(&#39;msg.article.show&#39;)\n          &#125;&#125;&lt;&#x2F;el-button&gt;\n          &lt;el-button type&#x3D;&quot;danger&quot; size&#x3D;&quot;mini&quot; @click&#x3D;&quot;onRemoveClick(row)&quot;&gt;&#123;&#123;\n            $t(&#39;msg.article.remove&#39;)\n          &#125;&#125;&lt;&#x2F;el-button&gt;\n        &lt;&#x2F;el-table-column&gt;\n      &lt;&#x2F;el-table&gt;\n\n      &lt;el-pagination\n        class&#x3D;&quot;pagination&quot;\n        @size-change&#x3D;&quot;handleSizeChange&quot;\n        @current-change&#x3D;&quot;handleCurrentChange&quot;\n        :current-page&#x3D;&quot;page&quot;\n        :page-sizes&#x3D;&quot;[5, 10, 50, 100, 200]&quot;\n        :page-size&#x3D;&quot;size&quot;\n        layout&#x3D;&quot;total, sizes, prev, pager, next, jumper&quot;\n        :total&#x3D;&quot;total&quot;\n      &gt;\n      &lt;&#x2F;el-pagination&gt;\n    &lt;&#x2F;el-card&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\n...\n&#x2F;**\n * size 改变触发\n *&#x2F;\nconst handleSizeChange &#x3D; currentSize &#x3D;&gt; &#123;\n  size.value &#x3D; currentSize\n  getListData()\n&#125;\n\n&#x2F;**\n * 页码改变触发\n *&#x2F;\nconst handleCurrentChange &#x3D; currentPage &#x3D;&gt; &#123;\n  page.value &#x3D; currentPage\n  getListData()\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n.article-ranking-container &#123;\n  .header &#123;\n    margin-bottom: 20px;\n    .dynamic-box &#123;\n      display: flex;\n      align-items: center;\n      .title &#123;\n        margin-right: 20px;\n        font-size: 14px;\n        font-weight: bold;\n      &#125;\n    &#125;\n  &#125;\n\n  ::v-deep .el-table__row &#123;\n    cursor: pointer;\n  &#125;\n\n  .pagination &#123;\n    margin-top: 20px;\n    text-align: center;\n  &#125;\n&#125;\n&lt;&#x2F;style&gt;\n</code></pre></li>\n</ol>\n<h2 id=\"9-03：相对时间与时间国际化处理\"><a href=\"#9-03：相对时间与时间国际化处理\" class=\"headerlink\" title=\"9-03：相对时间与时间国际化处理\"></a>9-03：相对时间与时间国际化处理</h2><p>在 <strong>发布时间</strong> 列中，我们希望展示相对时间，并且希望相对时间具备国际化的能力。那么我们就去需要到 <code>filters</code> 中对 <code>dayjs</code> 进行处理</p>\n<ol>\n<li><p>定义相对时间的处理方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">...\nimport rt from &#39;dayjs&#x2F;plugin&#x2F;relativeTime&#39;\n\n...\n\n&#x2F;&#x2F; 加载相对时间插件\ndayjs.extend(rt)\nfunction relativeTime(val) &#123;\n  if (!isNaN(val)) &#123;\n    val &#x3D; parseInt(val)\n  &#125;\n  return dayjs().to(dayjs(val))\n&#125;\n\nexport default app &#x3D;&gt; &#123;\n  app.config.globalProperties.$filters &#x3D; &#123;\n    ...\n    relativeTime\n  &#125;\n&#125;\n</code></pre>\n</li>\n<li><p>在 <code>article-ranking</code> 中使用相对时间</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;el-table-column :label&#x3D;&quot;$t(&#39;msg.article.publicDate&#39;)&quot;&gt;\n          &lt;template #default&#x3D;&quot;&#123;row&#125;&quot;&gt;\n            &#123;&#123; $filters.relativeTime(row.publicDate) &#125;&#125;\n          &lt;&#x2F;template&gt;\n        &lt;&#x2F;el-table-column&gt;</code></pre>\n</li>\n<li><p>接下来来处理国际化内容</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">...\n&#x2F;&#x2F; 语言包\nimport &#39;dayjs&#x2F;locale&#x2F;zh-cn&#39;\nimport store from &#39;@&#x2F;store&#39;\n\n...\nfunction relativeTime(val) &#123;\n ...\n  return dayjs()\n    .locale(store.getters.language &#x3D;&#x3D;&#x3D; &#39;zh&#39; ? &#39;zh-cn&#39; : &#39;en&#39;)\n    .to(dayjs(val))\n&#125;\n\n</code></pre></li>\n</ol>\n<h2 id=\"9-04：动态表格原理与实现分析\"><a href=\"#9-04：动态表格原理与实现分析\" class=\"headerlink\" title=\"9-04：动态表格原理与实现分析\"></a>9-04：动态表格原理与实现分析</h2><p>所谓动态表格指的是：<strong>根据列的勾选，动态展示表格中的列</strong></p>\n<p>那么我们同样把这一句话拆开来去看：</p>\n<ol>\n<li>展示可勾选的列</li>\n<li>动态展示表格的列</li>\n</ol>\n<p>那么我们先来看第一部分 <strong>展示可勾选的列：</strong></p>\n<p>可勾选的列通过 <code>el-checkbox</code> 来进行渲染。</p>\n<p>所以只要我们有对应的数据，那么渲染自然也没有对应的难度。</p>\n<p>然后我们来看 <strong>动态展示表格的列：</strong></p>\n<p>所谓 <strong>动态展示表格的列</strong> 指的就是 <strong>动态的渲染 <code>el-table-column</code></strong> ，那么怎么进行动态渲染<code>el-table-column</code>呢？</p>\n<p>我们来看现在的 <code>el-table-column</code> 的渲染，在页面中我们写入了大量的 <code>el-table-column</code> 组件，那么对于这样的组件，我们想一下可不可以通过 <code>v-for</code> 进行渲染？</p>\n<p>依赖于数据，通过 <code>v-for</code> 渲染  <code>el-table-column</code> ，当数据改变时 <code>el-table-column</code> 的渲染自然也就发生了变化，这样我们是不是就完成了 <strong>动态的渲染 <code>el-table-column</code></strong> 功能了？</p>\n<p>所以以上两个功能，最核心的部分就是 <strong>列数据的指定</strong>，只要有了对应的数据，那么对应的渲染也就非常简单了。</p>\n<p>所以我们总结一下对应的实现步骤：</p>\n<ol>\n<li>构建列数据（核心）</li>\n<li>根据数据，通过 <code>el-checkbox</code> 渲染可勾选的列</li>\n<li>根据数据，通过 <code>v-for</code> 动态渲染  <code>el-table-column</code></li>\n</ol>\n<h2 id=\"9-05：方案落地：动态列数据构建\"><a href=\"#9-05：方案落地：动态列数据构建\" class=\"headerlink\" title=\"9-05：方案落地：动态列数据构建\"></a>9-05：方案落地：动态列数据构建</h2><p>因为我们要在 <code>article-ranking</code> 中处理多个业务，如果我们把所有的业务处理都写到 <code>article-ranking</code> 中，那么对应的组件就过于复杂了，所以说我们把所有的 <strong>动态列表</strong> 相关的业务放入到 <code>article-ranking/dynamic</code> 文件夹中</p>\n<ol>\n<li><p>创建 <code>article-ranking/dynamic/DynamicData</code> 文件，用来指定初始的 <strong>列数据</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import i18n from &#39;@&#x2F;i18n&#39;\n\nconst t &#x3D; i18n.global.t\n\nexport default () &#x3D;&gt; [\n  &#123;\n    label: t(&#39;msg.article.ranking&#39;),\n    prop: &#39;ranking&#39;\n  &#125;,\n  &#123;\n    label: t(&#39;msg.article.title&#39;),\n    prop: &#39;title&#39;\n  &#125;,\n  &#123;\n    label: t(&#39;msg.article.author&#39;),\n    prop: &#39;author&#39;\n  &#125;,\n  &#123;\n    label: t(&#39;msg.article.publicDate&#39;),\n    prop: &#39;publicDate&#39;\n  &#125;,\n  &#123;\n    label: t(&#39;msg.article.desc&#39;),\n    prop: &#39;desc&#39;\n  &#125;,\n  &#123;\n    label: t(&#39;msg.article.action&#39;),\n    prop: &#39;action&#39;\n  &#125;\n]</code></pre>\n</li>\n<li><p>创建 <code>article-ranking/dynamic/index</code> 文件，对外暴露出</p>\n<ol>\n<li>动态列数据</li>\n<li>被勾选的动态列数据</li>\n<li>table 的列数据</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import getDynamicData from &#39;.&#x2F;DynamicData&#39;\nimport &#123; watchSwitchLang &#125; from &#39;@&#x2F;utils&#x2F;i18n&#39;\nimport &#123; watch, ref &#125; from &#39;vue&#39;\n\n&#x2F;&#x2F; 暴露出动态列数据\nexport const dynamicData &#x3D; ref(getDynamicData())\n\n&#x2F;&#x2F; 监听 语言变化\nwatchSwitchLang(() &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 重新获取国际化的值\n  dynamicData.value &#x3D; getDynamicData()\n  &#x2F;&#x2F; 重新处理被勾选的列数据\n  initSelectDynamicLabel()\n&#125;)\n\n&#x2F;&#x2F; 创建被勾选的动态列数据\nexport const selectDynamicLabel &#x3D; ref([])\n&#x2F;&#x2F; 默认全部勾选\nconst initSelectDynamicLabel &#x3D; () &#x3D;&gt; &#123;\n  selectDynamicLabel.value &#x3D; dynamicData.value.map(item &#x3D;&gt; item.label)\n&#125;\ninitSelectDynamicLabel()\n\n&#x2F;&#x2F; 声明 table 的列数据\nexport const tableColumns &#x3D; ref([])\n&#x2F;&#x2F; 监听选中项的变化，根据选中项动态改变 table 列数据的值\nwatch(\n  selectDynamicLabel,\n  val &#x3D;&gt; &#123;\n    tableColumns.value &#x3D; []\n    &#x2F;&#x2F; 遍历选中项\n    const selectData &#x3D; dynamicData.value.filter(item &#x3D;&gt; &#123;\n      return val.includes(item.label)\n    &#125;)\n    tableColumns.value.push(...selectData)\n  &#125;,\n  &#123;\n    immediate: true\n  &#125;\n)</code></pre></li>\n</ol>\n<h2 id=\"9-06：方案落地：实现动态表格能力\"><a href=\"#9-06：方案落地：实现动态表格能力\" class=\"headerlink\" title=\"9-06：方案落地：实现动态表格能力\"></a>9-06：方案落地：实现动态表格能力</h2><p>那么现在有了数据之后，我们就可以实现对应的动态表格功能了</p>\n<ol>\n<li><p>在 <code>article-ranking</code> 中渲染 <strong>动态表格的 <code>check</code></strong></p>\n</li>\n<li><p>导入动态表格的 <code>check</code> 数据</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; dynamicData, selectDynamicLabel &#125; from &#39;.&#x2F;dynamic&#39;</code></pre>\n</li>\n<li><p>完成动态表格的 <code>check</code> 渲染</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;el-card class&#x3D;&quot;header&quot;&gt;\n  &lt;div class&#x3D;&quot;dynamic-box&quot;&gt;\n    &lt;span class&#x3D;&quot;title&quot;&gt;&#123;&#123; $t(&#39;msg.article.dynamicTitle&#39;) &#125;&#125;&lt;&#x2F;span&gt;\n    &lt;el-checkbox-group v-model&#x3D;&quot;selectDynamicLabel&quot;&gt;\n      &lt;el-checkbox\n        v-for&#x3D;&quot;(item, index) in dynamicData&quot;\n        :label&#x3D;&quot;item.label&quot;\n        :key&#x3D;&quot;index&quot;\n        &gt;&#123;&#123; item.label &#125;&#125;&lt;&#x2F;el-checkbox\n      &gt;\n    &lt;&#x2F;el-checkbox-group&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;el-card&gt;</code></pre>\n</li>\n<li><p>导入动态列数据</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; ... tableColumns &#125; from &#39;.&#x2F;dynamic&#39;</code></pre>\n</li>\n<li><p>完成动态列渲染</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;el-table ref&#x3D;&quot;tableRef&quot; :data&#x3D;&quot;tableData&quot; border&gt;\n  &lt;el-table-column\n    v-for&#x3D;&quot;(item, index) in tableColumns&quot;\n    :key&#x3D;&quot;index&quot;\n    :prop&#x3D;&quot;item.prop&quot;\n    :label&#x3D;&quot;item.label&quot;\n  &gt;\n    &lt;template #default&#x3D;&quot;&#123; row &#125;&quot; v-if&#x3D;&quot;item.prop &#x3D;&#x3D;&#x3D; &#39;publicDate&#39;&quot;&gt;\n      &#123;&#123; $filters.relativeTime(row.publicDate) &#125;&#125;\n    &lt;&#x2F;template&gt;\n    &lt;template #default&#x3D;&quot;&#123; row &#125;&quot; v-else-if&#x3D;&quot;item.prop &#x3D;&#x3D;&#x3D; &#39;action&#39;&quot;&gt;\n      &lt;el-button type&#x3D;&quot;primary&quot; size&#x3D;&quot;mini&quot; @click&#x3D;&quot;onShowClick(row)&quot;&gt;&#123;&#123;\n        $t(&#39;msg.article.show&#39;)\n      &#125;&#125;&lt;&#x2F;el-button&gt;\n      &lt;el-button type&#x3D;&quot;danger&quot; size&#x3D;&quot;mini&quot; @click&#x3D;&quot;onRemoveClick(row)&quot;&gt;&#123;&#123;\n        $t(&#39;msg.article.remove&#39;)\n      &#125;&#125;&lt;&#x2F;el-button&gt;\n    &lt;&#x2F;template&gt;\n  &lt;&#x2F;el-table-column&gt;\n&lt;&#x2F;el-table&gt;</code></pre></li>\n</ol>\n<h2 id=\"9-07：动态表格实现总结\"><a href=\"#9-07：动态表格实现总结\" class=\"headerlink\" title=\"9-07：动态表格实现总结\"></a>9-07：动态表格实现总结</h2><p>对于动态表格而言，没有涉及到新的技术点，主要是对现有技术的一个灵活使用。</p>\n<p>把动态表格拆开来去看，主要就是分成了两部分：</p>\n<ol>\n<li>展示可勾选的列</li>\n<li>动态展示表格的列</li>\n</ol>\n<p>那么对于这两部分而言，核心的就是 <strong>数据</strong>。只要我们可以实现对应的数据，那么想要实现这两个功能就非常的简单了。</p>\n<h2 id=\"9-08：拖拽排序原理与实现分析\"><a href=\"#9-08：拖拽排序原理与实现分析\" class=\"headerlink\" title=\"9-08：拖拽排序原理与实现分析\"></a>9-08：拖拽排序原理与实现分析</h2><p>那么接下来我们来实现 <strong>表格拖动排序</strong> 的功能</p>\n<p>对于这个功能，我们需要先来分析一下它的具体业务：</p>\n<ol>\n<li>鼠标在某一行中按下</li>\n<li>移动鼠标位置</li>\n<li>产生对应的替换样式</li>\n<li>鼠标抬起，表格行顺序发生变化</li>\n</ol>\n<p>依据以上的业务，那么实现该功能的核心就在于：<strong>监听鼠标事件，完成对应的 UI 视图处理</strong></p>\n<p>具体来说：</p>\n<ol>\n<li>监听鼠标的按下事件</li>\n<li>监听鼠标的移动事件</li>\n<li>生成对应的 <code>UI</code> 样式</li>\n<li>监听鼠标的抬起事件</li>\n</ol>\n<p>那么对于以上的原理而言，想要落实到具体的代码中，其实还是比较复杂的。</p>\n<p>但是在现在的前端开发中，只要有对应的需求，那么在大多数的情况下都会存在对应的轮子（并且不止一个）。所以说咱们这里依然会借助对应的轮子来去实现。</p>\n<p>这个轮子就是 <a href=\"https://www.npmjs.com/package/sortablejs\">sortablejs</a>：用于在列表中实现拖动排序</p>\n<p>那么我们整个 <strong>拖动排序</strong> 的核心实现，就是围绕着 <a href=\"https://www.npmjs.com/package/sortablejs\">sortablejs</a> 来进行的</p>\n<p>那么以此，我们得出最终的实现方案：</p>\n<ol>\n<li>利用 <a href=\"https://www.npmjs.com/package/sortablejs\">sortablejs</a> 实现表格拖拽功能</li>\n<li>在拖拽完成后，调用接口完成排序</li>\n</ol>\n<h2 id=\"9-09：方案落地：实现表格拖拽功能\"><a href=\"#9-09：方案落地：实现表格拖拽功能\" class=\"headerlink\" title=\"9-09：方案落地：实现表格拖拽功能\"></a>9-09：方案落地：实现表格拖拽功能</h2><ol>\n<li><p>下载 sortablejs</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm i sortablejs@1.14.0</code></pre>\n</li>\n<li><p>创建 <code>article-ranking/sortable/index</code> 文件，完成 <code>sortable</code> 初始化</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; ref &#125; from &#39;vue&#39;\nimport Sortable from &#39;sortablejs&#39;\n\n&#x2F;&#x2F; 排序相关\nexport const tableRef &#x3D; ref(null)\n\n&#x2F;**\n * 初始化排序\n *&#x2F;\nexport const initSortable &#x3D; (tableData, cb) &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 设置拖拽效果\n  const el &#x3D; tableRef.value.$el.querySelectorAll(\n    &#39;.el-table__body-wrapper &gt; table &gt; tbody&#39;\n  )[0]\n  &#x2F;&#x2F; 1. 要拖拽的元素\n  &#x2F;&#x2F; 2. 配置对象\n  Sortable.create(el, &#123;\n    &#x2F;&#x2F; 拖拽时类名\n    ghostClass: &#39;sortable-ghost&#39;,\n    &#x2F;&#x2F; 拖拽结束的回调方法\n    onEnd(event) &#123;&#125;\n  &#125;)\n&#125;</code></pre>\n</li>\n<li><p>在 <code>article-ranking</code> 中导入 <code>tableRef, initSortable</code>，并完成初始化</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; tableRef, initSortable &#125; from &#39;.&#x2F;sortable&#39;\n\n&#x2F;&#x2F; 表格拖拽相关\nonMounted(() &#x3D;&gt; &#123;\n  initSortable(tableData, getListData)\n&#125;)</code></pre>\n</li>\n<li><p>指定拖拽时的样式</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">::v-deep .sortable-ghost &#123;\n  opacity: 0.6;\n  color: #fff !important;\n  background: #304156 !important;\n&#125;</code></pre></li>\n</ol>\n<h2 id=\"9-10：方案落地：完成拖拽后的排序\"><a href=\"#9-10：方案落地：完成拖拽后的排序\" class=\"headerlink\" title=\"9-10：方案落地：完成拖拽后的排序\"></a>9-10：方案落地：完成拖拽后的排序</h2><p>完成拖拽后的排序主要是在 <strong>拖拽结束的回调方法</strong> 中进行。</p>\n<p>我们需要在 拖拽结束的回调方法中调用对应的服务端接口完成持久化的排序</p>\n<ol>\n<li><p>在 <code>api/article</code> 中定义排序接口</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 修改排序\n *&#x2F;\nexport const articleSort &#x3D; data &#x3D;&gt; &#123;\n  return request(&#123;\n    url: &#39;&#x2F;article&#x2F;sort&#39;,\n    method: &#39;POST&#39;,\n    data\n  &#125;)\n&#125;</code></pre>\n</li>\n<li><p>在拖拽结束的回调方法中调用接口</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 拖拽结束的回调方法\nasync onEnd(event) &#123;\n  const &#123; newIndex, oldIndex &#125; &#x3D; event\n  &#x2F;&#x2F; 修改数据\n  await articleSort(&#123;\n    initRanking: tableData.value[oldIndex].ranking,\n    finalRanking: tableData.value[newIndex].ranking\n  &#125;)\n  ElMessage.success(&#123;\n    message: i18n.global.t(&#39;msg.article.sortSuccess&#39;),\n    type: &#39;success&#39;\n  &#125;)\n  &#x2F;&#x2F; 直接重新获取数据无法刷新 table！！\n  tableData.value &#x3D; []\n  &#x2F;&#x2F; 重新获取数据\n  cb &amp;&amp; cb()\n&#125;</code></pre></li>\n</ol>\n<h2 id=\"9-11：拖拽排序方案总结\"><a href=\"#9-11：拖拽排序方案总结\" class=\"headerlink\" title=\"9-11：拖拽排序方案总结\"></a>9-11：拖拽排序方案总结</h2><p>整个拖拽排序的功能我们围绕着 <a href=\"https://www.npmjs.com/package/sortablejs\">sortablejs</a> 来去进行实现。</p>\n<p><a href=\"https://www.npmjs.com/package/sortablejs\">sortablejs</a> 提供了对于 <code>table</code> 的一个排序能力，我们只需要利用这个能力，并且在拖拽完成之后，对数据的排序进行一个持久化的存储即可。</p>\n<h2 id=\"9-12：辅助业务：文章删除\"><a href=\"#9-12：辅助业务：文章删除\" class=\"headerlink\" title=\"9-12：辅助业务：文章删除\"></a>9-12：辅助业务：文章删除</h2><ol>\n<li><p>定义删除接口</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 删除文章\n *&#x2F;\nexport const deleteArticle &#x3D; articleId &#x3D;&gt; &#123;\n  return request(&#123;\n    url: &#96;&#x2F;article&#x2F;delete&#x2F;$&#123;articleId&#125;&#96;\n  &#125;)\n&#125;</code></pre>\n\n\n</li>\n<li><p>为删除按钮添加点击事件</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;el-button type&#x3D;&quot;danger&quot; size&#x3D;&quot;mini&quot; @click&#x3D;&quot;onRemoveClick(row)&quot;&gt;&#123;&#123;\n              $t(&#39;msg.article.remove&#39;)\n            &#125;&#125;&lt;&#x2F;el-button&gt;</code></pre>\n</li>\n<li><p>处理删除操作</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 删除用户\nconst i18n &#x3D; useI18n()\nconst onRemoveClick &#x3D; row &#x3D;&gt; &#123;\n  ElMessageBox.confirm(\n    i18n.t(&#39;msg.article.dialogTitle1&#39;) +\n      row.title +\n      i18n.t(&#39;msg.article.dialogTitle2&#39;),\n    &#123;\n      type: &#39;warning&#39;\n    &#125;\n  ).then(async () &#x3D;&gt; &#123;\n    await deleteArticle(row._id)\n    ElMessage.success(i18n.t(&#39;msg.article.removeSuccess&#39;))\n    &#x2F;&#x2F; 重新渲染数据\n    getListData()\n  &#125;)\n&#125;</code></pre></li>\n</ol>\n<h2 id=\"9-13：辅助业务：文章详情展示\"><a href=\"#9-13：辅助业务：文章详情展示\" class=\"headerlink\" title=\"9-13：辅助业务：文章详情展示\"></a>9-13：辅助业务：文章详情展示</h2><p>对于文章详情的展示而言，主要是为了配合 <strong>创建文章</strong> 的功能而产生的。</p>\n<p>文章详情中包含一个 <strong>编辑</strong> 按钮，用于对文章的编辑功能。与 <strong>创建文章</strong> 配合，达到相辅相成的目的。</p>\n<p>但是现在 <strong>创建文章</strong> 尚未实现，所以 <strong>编辑文章</strong> 也就暂时无从谈起，所以说我们此时仅先实现 <strong>文章详情展示</strong> 的功能，后续在完成了 <strong>创建文章</strong> 之后，再去实现 <strong>文章编辑</strong></p>\n<ol>\n<li><p>在 <code>api/article</code> 中定义获取文章详情接口</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 获取文章详情\n *&#x2F;\nexport const articleDetail &#x3D; (articleId) &#x3D;&gt; &#123;\n  return request(&#123;\n    url: &#96;&#x2F;article&#x2F;$&#123;articleId&#125;&#96;\n  &#125;)\n&#125;</code></pre>\n</li>\n<li><p>在 <code>article-detail</code> 中获取文章详情数据</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport &#123; ref &#125; from &#39;vue&#39;\nimport &#123; useRoute &#125; from &#39;vue-router&#39;\nimport &#123; articleDetail &#125; from &#39;@&#x2F;api&#x2F;article&#39;\n\n&#x2F;&#x2F; 获取数据\nconst route &#x3D; useRoute()\nconst articleId &#x3D; route.params.id\nconst detail &#x3D; ref(&#123;&#125;)\nconst getArticleDetail &#x3D; async () &#x3D;&gt; &#123;\n  detail.value &#x3D; await articleDetail(articleId)\n&#125;\ngetArticleDetail()\n&lt;&#x2F;script&gt;</code></pre>\n</li>\n<li><p>根据数据渲染视图</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;article-detail-container&quot;&gt;\n    &lt;h2 class&#x3D;&quot;title&quot;&gt;&#123;&#123; detail.title &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;div class&#x3D;&quot;header&quot;&gt;\n      &lt;span class&#x3D;&quot;author&quot;\n        &gt;&#123;&#123; $t(&#39;msg.article.author&#39;) &#125;&#125;：&#123;&#123; detail.author &#125;&#125;&lt;&#x2F;span\n      &gt;\n      &lt;span class&#x3D;&quot;time&quot;\n        &gt;&#123;&#123; $t(&#39;msg.article.publicDate&#39;) &#125;&#125;：&#123;&#123;\n          $filters.relativeTime(detail.publicDate)\n        &#125;&#125;&lt;&#x2F;span\n      &gt;\n      &lt;el-button type&#x3D;&quot;text&quot; class&#x3D;&quot;edit&quot; @click&#x3D;&quot;onEditClick&quot;&gt;&#123;&#123;\n        $t(&#39;msg.article.edit&#39;)\n      &#125;&#125;&lt;&#x2F;el-button&gt;\n    &lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;content&quot; v-html&#x3D;&quot;detail.content&quot;&gt;&lt;&#x2F;div&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n...\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;\n.article-detail-container &#123;\n  .title &#123;\n    font-size: 22px;\n    text-align: center;\n    padding: 12px 0;\n  &#125;\n  .header &#123;\n    padding: 26px 0;\n    .author &#123;\n      font-size: 14px;\n      color: #555666;\n      margin-right: 20px;\n    &#125;\n    .time &#123;\n      font-size: 14px;\n      color: #999aaa;\n      margin-right: 20px;\n    &#125;\n    .edit &#123;\n      float: right;\n    &#125;\n  &#125;\n  .content &#123;\n    font-size: 14px;\n    padding: 20px 0;\n    border-top: 1px solid #d4d4d4;\n  &#125;\n&#125;\n&lt;&#x2F;style&gt;\n</code></pre>\n</li>\n<li><p>点击进入详情页面</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 查看按钮点击事件\n *&#x2F;\nconst router &#x3D; useRouter()\nconst onShowClick &#x3D; row &#x3D;&gt; &#123;\n  router.push(&#96;&#x2F;article&#x2F;$&#123;row._id&#125;&#96;)\n&#125;</code></pre></li>\n</ol>\n<h2 id=\"9-14：总结\"><a href=\"#9-14：总结\" class=\"headerlink\" title=\"9-14：总结\"></a>9-14：总结</h2><p>那么到这里我们整个的 <strong>动态表格</strong> 渲染的功能就算是全部完成了，整个 <strong>动态表格</strong> 功能围绕着：</p>\n<ol>\n<li>文章排名切换</li>\n<li>动态表格渲染</li>\n</ol>\n<p>这两个核心进行开发，整体的一个逻辑应该并不算复杂</p>\n","text":"第九章：动态表格渲染方案之文章排名业务实现9-01：开篇对于 文章排名 而言，核心的内容是围绕着表格处理来进行的。对应的核心业务主要有两个： 文章排名切换 动态表格渲染 这两个核心业务配合着其他的一些辅助功能： 文章排名页面展示 文章详情页面展示 共同组成了咱们这一大章的内容 9...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[{"name":"vue3.2后台管理系统","slug":"vue3-2后台管理系统","count":12,"path":"api/categories/vue3-2后台管理系统.json"}],"tags":[{"name":"后台","slug":"后台","count":12,"path":"api/tags/后台.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B9%9D%E7%AB%A0%EF%BC%9A%E5%8A%A8%E6%80%81%E8%A1%A8%E6%A0%BC%E6%B8%B2%E6%9F%93%E6%96%B9%E6%A1%88%E4%B9%8B%E6%96%87%E7%AB%A0%E6%8E%92%E5%90%8D%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">第九章：动态表格渲染方案之文章排名业务实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-01%EF%BC%9A%E5%BC%80%E7%AF%87\"><span class=\"toc-text\">9-01：开篇</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-02%EF%BC%9A%E8%BE%85%E5%8A%A9%E4%B8%9A%E5%8A%A1%EF%BC%9A%E6%96%87%E7%AB%A0%E6%8E%92%E5%90%8D%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93\"><span class=\"toc-text\">9-02：辅助业务：文章排名页面渲染</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-03%EF%BC%9A%E7%9B%B8%E5%AF%B9%E6%97%B6%E9%97%B4%E4%B8%8E%E6%97%B6%E9%97%B4%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%84%E7%90%86\"><span class=\"toc-text\">9-03：相对时间与时间国际化处理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-04%EF%BC%9A%E5%8A%A8%E6%80%81%E8%A1%A8%E6%A0%BC%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90\"><span class=\"toc-text\">9-04：动态表格原理与实现分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-05%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9A%E5%8A%A8%E6%80%81%E5%88%97%E6%95%B0%E6%8D%AE%E6%9E%84%E5%BB%BA\"><span class=\"toc-text\">9-05：方案落地：动态列数据构建</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-06%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9A%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E8%A1%A8%E6%A0%BC%E8%83%BD%E5%8A%9B\"><span class=\"toc-text\">9-06：方案落地：实现动态表格能力</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-07%EF%BC%9A%E5%8A%A8%E6%80%81%E8%A1%A8%E6%A0%BC%E5%AE%9E%E7%8E%B0%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">9-07：动态表格实现总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-08%EF%BC%9A%E6%8B%96%E6%8B%BD%E6%8E%92%E5%BA%8F%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90\"><span class=\"toc-text\">9-08：拖拽排序原理与实现分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-09%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9A%E5%AE%9E%E7%8E%B0%E8%A1%A8%E6%A0%BC%E6%8B%96%E6%8B%BD%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">9-09：方案落地：实现表格拖拽功能</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-10%EF%BC%9A%E6%96%B9%E6%A1%88%E8%90%BD%E5%9C%B0%EF%BC%9A%E5%AE%8C%E6%88%90%E6%8B%96%E6%8B%BD%E5%90%8E%E7%9A%84%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">9-10：方案落地：完成拖拽后的排序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-11%EF%BC%9A%E6%8B%96%E6%8B%BD%E6%8E%92%E5%BA%8F%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">9-11：拖拽排序方案总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-12%EF%BC%9A%E8%BE%85%E5%8A%A9%E4%B8%9A%E5%8A%A1%EF%BC%9A%E6%96%87%E7%AB%A0%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">9-12：辅助业务：文章删除</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-13%EF%BC%9A%E8%BE%85%E5%8A%A9%E4%B8%9A%E5%8A%A1%EF%BC%9A%E6%96%87%E7%AB%A0%E8%AF%A6%E6%83%85%E5%B1%95%E7%A4%BA\"><span class=\"toc-text\">9-13：辅助业务：文章详情展示</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-14%EF%BC%9A%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">9-14：总结</span></a></li></ol></li></ol>","author":{"name":"西非","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个跑路的设计师","socials":{"github":"https://github.com/xuhui-web","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/a18482157085","juejin":"https://juejin.cn/user/1535369026995422","customs":{}}},"mapped":true,"prev_post":{"title":"10富文本与markdown综合处理之创建文章","uid":"b1e9e78ac18c4b9597d3b65fe8a20c6a","slug":"vue3.2后台管理系统/10富文本与markdown综合处理之创建文章","date":"2022-08-22T20:02:44.000Z","updated":"2022-08-23T02:05:31.286Z","comments":true,"path":"api/articles/vue3.2后台管理系统/10富文本与markdown综合处理之创建文章.json","keywords":null,"cover":"/img/SplitShire-21-7016-1024x683.jpg","text":"第十章：富文本与markdown综合处理之创建文章10-1：开篇本章中我们的核心业务就是 编辑文章。 而对于 编辑文章 而言提供了两种编辑方式： 富文本 markdown 对于这两种编辑形式在现在的前端中都拥有非常多的第三方库，那么对于我们开发者而言，我们肯定也是从中去选择出一个...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"vue3.2后台管理系统","slug":"vue3-2后台管理系统","count":12,"path":"api/categories/vue3-2后台管理系统.json"}],"tags":[{"name":"后台","slug":"后台","count":12,"path":"api/tags/后台.json"}],"author":{"name":"西非","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个跑路的设计师","socials":{"github":"https://github.com/xuhui-web","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/a18482157085","juejin":"https://juejin.cn/user/1535369026995422","customs":{}}},"feature":true},"next_post":{"title":"08分级分控权限管理","uid":"afeb731b4a15e87120e5289a564db893","slug":"vue3.2后台管理系统/08分级分控权限管理","date":"2022-08-22T18:02:44.000Z","updated":"2022-08-23T02:02:53.000Z","comments":true,"path":"api/articles/vue3.2后台管理系统/08分级分控权限管理.json","keywords":null,"cover":"/img/SplitShire-21-4361.jpg","text":"第八章：分级分控权限管理8-01：开篇那么从这一章开始我们就来解决我们的权限控制问题。 本章以权限控制为主，整个章节会分成三部分来去讲解： 权限理论：明确什么是 RBAC 权限控制体现 辅助业务：完善 用户、角色、权限 三个页面功能 核心功能：落地实现 RBAC 权限控制系统 列...","link":"","photos":[],"count_time":{"symbolsCount":"28k","symbolsTime":"25 mins."},"categories":[{"name":"vue3.2后台管理系统","slug":"vue3-2后台管理系统","count":12,"path":"api/categories/vue3-2后台管理系统.json"}],"tags":[{"name":"后台","slug":"后台","count":12,"path":"api/tags/后台.json"}],"author":{"name":"西非","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个跑路的设计师","socials":{"github":"https://github.com/xuhui-web","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/a18482157085","juejin":"https://juejin.cn/user/1535369026995422","customs":{}}}}}