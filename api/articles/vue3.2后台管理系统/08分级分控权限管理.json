{"title":"08分级分控权限管理","uid":"afeb731b4a15e87120e5289a564db893","slug":"vue3.2后台管理系统/08分级分控权限管理","date":"2022-08-22T18:02:44.000Z","updated":"2022-08-23T02:02:53.000Z","comments":true,"path":"api/articles/vue3.2后台管理系统/08分级分控权限管理.json","keywords":null,"cover":"/img/SplitShire-21-4361.jpg","content":"<h1 id=\"第八章：分级分控权限管理\"><a href=\"#第八章：分级分控权限管理\" class=\"headerlink\" title=\"第八章：分级分控权限管理\"></a>第八章：分级分控权限管理</h1><h2 id=\"8-01：开篇\"><a href=\"#8-01：开篇\" class=\"headerlink\" title=\"8-01：开篇\"></a>8-01：开篇</h2><p>那么从这一章开始我们就来解决我们的权限控制问题。</p>\n<p>本章以权限控制为主，整个章节会分成三部分来去讲解：</p>\n<ol>\n<li>权限理论：明确什么是 <code>RBAC</code> 权限控制体现</li>\n<li>辅助业务：完善 用户、角色、权限 三个页面功能</li>\n<li>核心功能：落地实现 <code>RBAC</code> 权限控制系统</li>\n</ol>\n<p>列举出来这三部分的目的是为了让大家能够对本章的内容有个清楚的认知，那么接下来我们就先来看第一部分 <strong>权限理论</strong></p>\n<h2 id=\"8-02：权限理论：RBAC-权限控制体系\"><a href=\"#8-02：权限理论：RBAC-权限控制体系\" class=\"headerlink\" title=\"8-02：权限理论：RBAC 权限控制体系\"></a>8-02：权限理论：RBAC 权限控制体系</h2><p>权限控制在开发中一直是一个比较复杂的问题，甚至有很多同学对什么是权限控制还不是很了解。所以我们需要先来统一一下认知，明确项目中的权限控制系统。</p>\n<p>在我们当前的项目中，我们可以通过：</p>\n<ol>\n<li>员工管理为用户指定角色</li>\n<li>通过角色列表为角色指定权限</li>\n<li>通过权限列表查看当前项目所有权限</li>\n</ol>\n<p>那么换句话而言，以上三条就制定了一个用户由：<strong>用户 -&gt; 角色 -&gt; 权限</strong> 的一个分配关系。</p>\n<p>当我们通过角色为某一个用户指定到不同的权限之后，那么该用户就会在 <strong>项目中体会到不同权限的功能</strong></p>\n<p>那么这样的一套关系就是我们的 <strong>RBAC 权限控制体系</strong>，也就是 <strong>基于 角色的权限 控制 用户的访问</strong></p>\n<p>通过以下图片可以很好的说明这种权限控制体系的含义：</p>\n<img src=\"/post/vue3.2%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/08%E5%88%86%E7%BA%A7%E5%88%86%E6%8E%A7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/image-20210930154951194.png\" class=\"\" title=\"图片来自：https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;44bfd8d6184b\">\n\n\n\n<h2 id=\"8-03：辅助业务：角色列表展示\"><a href=\"#8-03：辅助业务：角色列表展示\" class=\"headerlink\" title=\"8-03：辅助业务：角色列表展示\"></a>8-03：辅助业务：角色列表展示</h2><p>那么明确好了 <code>RBAC</code> 的概念之后，接下来我们就可以来去实现我们的辅助业务了，所谓辅助业务具体指的就是：</p>\n<ol>\n<li>员工管理（用户列表）<ol>\n<li>为用户分配角色</li>\n</ol>\n</li>\n<li>角色列表<ol>\n<li>角色列表展示</li>\n<li>为角色分配权限</li>\n</ol>\n</li>\n<li>权限列表<ol>\n<li>权限列表展示</li>\n</ol>\n</li>\n</ol>\n<p>那么这一小节我们就先来实现其中的 <strong>角色列表展示</strong></p>\n<ol>\n<li><p>创建 <code>api/role</code> 接口文件：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import request from &#39;@&#x2F;utils&#x2F;request&#39;\n\n&#x2F;**\n * 获取所有角色\n *&#x2F;\nexport const roleList &#x3D; () &#x3D;&gt; &#123;\n  return request(&#123;\n    url: &#39;&#x2F;role&#x2F;list&#39;\n  &#125;)\n&#125;\n</code></pre>\n</li>\n<li><p>在 <code>views/role-list</code> 中获取数据</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; roleList &#125; from &#39;@&#x2F;api&#x2F;role&#39;\nimport &#123; watchSwitchLang &#125; from &#39;@&#x2F;utils&#x2F;i18n&#39;\nimport &#123; ref &#125; from &#39;vue&#39;\n\nconst allRoles &#x3D; ref([])\nconst getRoleList &#x3D; async () &#x3D;&gt; &#123;\n  allRoles.value &#x3D; await roleList()\n&#125;\ngetRoleList()\nwatchSwitchLang(getRoleList)</code></pre>\n</li>\n<li><p>通过 <a href=\"https://element-plus.org/zh-CN/component/table.html\">el-table</a> 进行数据展示</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;&quot;&gt;\n    &lt;el-card&gt;\n      &lt;el-table :data&#x3D;&quot;allRoles&quot; border style&#x3D;&quot;width: 100%&quot;&gt;\n        &lt;el-table-column :label&#x3D;&quot;$t(&#39;msg.role.index&#39;)&quot; type&#x3D;&quot;index&quot; width&#x3D;&quot;120&quot;&gt;\n        &lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column :label&#x3D;&quot;$t(&#39;msg.role.name&#39;)&quot; prop&#x3D;&quot;title&quot;&gt;\n        &lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column :label&#x3D;&quot;$t(&#39;msg.role.desc&#39;)&quot; prop&#x3D;&quot;describe&quot;&gt;\n        &lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column\n          :label&#x3D;&quot;$t(&#39;msg.role.action&#39;)&quot;\n          prop&#x3D;&quot;action&quot;\n          width&#x3D;&quot;260&quot;\n        &gt;\n          &lt;el-button type&#x3D;&quot;primary&quot; size&#x3D;&quot;mini&quot;&gt;\n            &#123;&#123; $t(&#39;msg.role.assignPermissions&#39;) &#125;&#125;\n          &lt;&#x2F;el-button&gt;\n        &lt;&#x2F;el-table-column&gt;\n      &lt;&#x2F;el-table&gt;\n    &lt;&#x2F;el-card&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;</code></pre></li>\n</ol>\n<h2 id=\"8-04：辅助业务：权限列表展示\"><a href=\"#8-04：辅助业务：权限列表展示\" class=\"headerlink\" title=\"8-04：辅助业务：权限列表展示\"></a>8-04：辅助业务：权限列表展示</h2><ol>\n<li><p>创建 <code>api/permission</code> 文件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import request from &#39;@&#x2F;utils&#x2F;request&#39;\n\n&#x2F;**\n * 获取所有权限\n *&#x2F;\nexport const permissionList &#x3D; () &#x3D;&gt; &#123;\n  return request(&#123;\n    url: &#39;&#x2F;permission&#x2F;list&#39;\n  &#125;)\n&#125;\n</code></pre>\n</li>\n<li><p>在 <code>views/permission-list</code> 获取数据</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport &#123; permissionList &#125; from &#39;@&#x2F;api&#x2F;permission&#39;\nimport &#123; watchSwitchLang &#125; from &#39;@&#x2F;utils&#x2F;i18n&#39;\nimport &#123; ref &#125; from &#39;vue&#39;\n&#x2F;**\n * 权限分级：\n * 1. 一级权限为页面权限\n *  permissionMark 对应 路由名称\n * 2. 二级权限为功能权限\n *  permissionMark 对应 功能权限表\n *&#x2F;\n&#x2F;&#x2F; 所有权限\nconst allPermission &#x3D; ref([])\nconst getPermissionList &#x3D; async () &#x3D;&gt; &#123;\n  allPermission.value &#x3D; await permissionList()\n&#125;\ngetPermissionList()\nwatchSwitchLang(getPermissionList)\n&lt;&#x2F;script&gt;</code></pre>\n</li>\n<li><p>通过 <a href=\"https://element-plus.org/zh-CN/component/table.html\">el-table</a> 进行数据展示</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;&quot;&gt;\n    &lt;el-card&gt;\n      &lt;el-table\n        :data&#x3D;&quot;allPermission&quot;\n        style&#x3D;&quot;width: 100%; margin-bottom: 20px&quot;\n        row-key&#x3D;&quot;id&quot;\n        border\n        default-expand-all\n        :tree-props&#x3D;&quot;&#123; children: &#39;children&#39;, hasChildren: &#39;hasChildren&#39; &#125;&quot;\n      &gt;\n        &lt;el-table-column\n          prop&#x3D;&quot;permissionName&quot;\n          :label&#x3D;&quot;$t(&#39;msg.permission.name&#39;)&quot;\n          width&#x3D;&quot;180&quot;\n        &gt;\n        &lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column\n          prop&#x3D;&quot;permissionMark&quot;\n          :label&#x3D;&quot;$t(&#39;msg.permission.mark&#39;)&quot;\n          width&#x3D;&quot;180&quot;\n        &gt;\n        &lt;&#x2F;el-table-column&gt;\n        &lt;el-table-column\n          prop&#x3D;&quot;permissionDesc&quot;\n          :label&#x3D;&quot;$t(&#39;msg.permission.desc&#39;)&quot;\n        &gt;\n        &lt;&#x2F;el-table-column&gt;\n      &lt;&#x2F;el-table&gt;\n    &lt;&#x2F;el-card&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;</code></pre></li>\n</ol>\n<h2 id=\"8-05：辅助业务：为用户分配角色\"><a href=\"#8-05：辅助业务：为用户分配角色\" class=\"headerlink\" title=\"8-05：辅助业务：为用户分配角色\"></a>8-05：辅助业务：为用户分配角色</h2><ol>\n<li><p>创建为用户分配角色弹出层 <code>views/user-manage/components/roles</code></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;el-dialog\n    :title&#x3D;&quot;$t(&#39;msg.excel.roleDialogTitle&#39;)&quot;\n    :model-value&#x3D;&quot;modelValue&quot;\n    @close&#x3D;&quot;closed&quot;\n  &gt;\n    内容\n\n    &lt;template #footer&gt;\n      &lt;span class&#x3D;&quot;dialog-footer&quot;&gt;\n        &lt;el-button @click&#x3D;&quot;closed&quot;&gt;&#123;&#123; $t(&#39;msg.universal.cancel&#39;) &#125;&#125;&lt;&#x2F;el-button&gt;\n        &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;onConfirm&quot;&gt;&#123;&#123;\n          $t(&#39;msg.universal.confirm&#39;)\n        &#125;&#125;&lt;&#x2F;el-button&gt;\n      &lt;&#x2F;span&gt;\n    &lt;&#x2F;template&gt;\n  &lt;&#x2F;el-dialog&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport &#123; defineProps, defineEmits &#125; from &#39;vue&#39;\ndefineProps(&#123;\n  modelValue: &#123;\n    type: Boolean,\n    required: true\n  &#125;\n&#125;)\nconst emits &#x3D; defineEmits([&#39;update:modelValue&#39;])\n\n&#x2F;**\n  确定按钮点击事件\n *&#x2F;\nconst onConfirm &#x3D; async () &#x3D;&gt; &#123;\n  closed()\n&#125;\n\n&#x2F;**\n * 关闭\n *&#x2F;\nconst closed &#x3D; () &#x3D;&gt; &#123;\n  emits(&#39;update:modelValue&#39;, false)\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;&lt;&#x2F;style&gt;\n</code></pre>\n</li>\n<li><p>在 <code>user-manage</code> 中点击查看，展示弹出层</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;roles-dialog v-model&#x3D;&quot;roleDialogVisible&quot;&gt;&lt;&#x2F;roles-dialog&gt;\n\nimport RolesDialog from &#39;.&#x2F;components&#x2F;roles.vue&#39;\n\n&#x2F;**\n * 查看角色的点击事件\n *&#x2F;\nconst roleDialogVisible &#x3D; ref(false)\nconst onShowRoleClick &#x3D; row &#x3D;&gt; &#123;\n  roleDialogVisible.value &#x3D; true\n&#125;</code></pre>\n</li>\n<li><p>在弹出层中我们需要利用 <a href=\"https://element-plus.org/zh-CN/component/checkbox.html\">el-checkbox</a> 进行数据展示，此时数据分为两种：</p>\n<ol>\n<li>所有角色（已存在）</li>\n<li>用户当前角色</li>\n</ol>\n</li>\n<li><p>所以我们需要先获取对应数据</p>\n</li>\n<li><p>在 <code>api/user-manage</code> 中定义获取用户当前角色接口</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 获取指定用户角色\n *&#x2F;\nexport const userRoles &#x3D; (id) &#x3D;&gt; &#123;\n  return request(&#123;\n    url: &#96;&#x2F;user-manage&#x2F;role&#x2F;$&#123;id&#125;&#96;\n  &#125;)\n&#125;</code></pre>\n</li>\n<li><p>在 <code>roles</code> 组件中获取所有角色数据</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; defineProps, defineEmits, ref &#125; from &#39;vue&#39;\nimport &#123; roleList &#125; from &#39;@&#x2F;api&#x2F;role&#39;\nimport &#123; watchSwitchLang &#125; from &#39;@&#x2F;utils&#x2F;i18n&#39;\n...\n\n&#x2F;&#x2F; 所有角色\nconst allRoleList &#x3D; ref([])\n&#x2F;&#x2F; 获取所有角色数据的方法\nconst getListData &#x3D; async () &#x3D;&gt; &#123;\n  allRoleList.value &#x3D; await roleList()\n&#125;\ngetListData()\nwatchSwitchLang(getListData)\n\n&#x2F;&#x2F; 当前用户角色\nconst userRoleTitleList &#x3D; ref([])</code></pre>\n</li>\n<li><p>利用 <a href=\"https://element-plus.org/zh-CN/component/checkbox.html\">el-checkbox</a> 渲染所有角色</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;el-checkbox-group v-model&#x3D;&quot;userRoleTitleList&quot;&gt;\n  &lt;el-checkbox\n    v-for&#x3D;&quot;item in allRoleList&quot;\n    :key&#x3D;&quot;item.id&quot;\n    :label&#x3D;&quot;item.title&quot;\n  &gt;&lt;&#x2F;el-checkbox&gt;\n&lt;&#x2F;el-checkbox-group&gt;</code></pre>\n</li>\n<li><p>接下来渲染选中项，即：用户当前角色</p>\n</li>\n<li><p>调用 <code>userRoles</code> 接口需要 <strong>当前用户 ID</strong>，所以我们需要定义对应的 <code>props</code></p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">const props &#x3D; defineProps(&#123;\n  ...\n  userId: &#123;\n    type: String,\n    required: true\n  &#125;\n&#125;)</code></pre>\n</li>\n<li><p>接下来我们可以根据 <code>userId</code> 获取数据，但是这里大家要注意：<strong>因为该 <code>userId</code> 需要在 <code>user-manage</code> 用户点击之后获取当前点击行的 <code>id</code>。所以在 <code>roles</code> 组件的初始状态下，获取到的 <code>userId</code> 为 <code>null</code> 。</strong> 因此我们想要根据 <code>userId</code> 获取用户当前角色数据，我们需要 <code>watch userId</code> 在 <code>userId</code> 有值的前提下，获取数据</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 当前用户角色\nconst userRoleTitleList &#x3D; ref([])\n&#x2F;&#x2F; 获取当前用户角色\nconst getUserRoles &#x3D; async () &#x3D;&gt; &#123;\n  const res &#x3D; await userRoles(props.userId)\n  userRoleTitleList.value &#x3D; res.role.map(item &#x3D;&gt; item.title)\n&#125;\nwatch(\n  () &#x3D;&gt; props.userId,\n  val &#x3D;&gt; &#123;\n    if (val) getUserRoles()\n  &#125;\n)</code></pre>\n</li>\n<li><p>在 <code>user-manage</code> 中传递数据</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;roles-dialog\n      v-model&#x3D;&quot;roleDialogVisible&quot;\n      :userId&#x3D;&quot;selectUserId&quot;\n    &gt;&lt;&#x2F;roles-dialog&gt;\n    \nconst selectUserId &#x3D; ref(&#39;&#39;)\nconst onShowRoleClick &#x3D; row &#x3D;&gt; &#123;\n  selectUserId.value &#x3D; row._id\n&#125;</code></pre>\n</li>\n<li><p>在 <code>dialog</code> 关闭时重置 <code>selectUserId</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 保证每次打开重新获取用户角色数据\nwatch(roleDialogVisible, val &#x3D;&gt; &#123;\n  if (!val) selectUserId.value &#x3D; &#39;&#39;\n&#125;)</code></pre>\n</li>\n<li><p>在 <code>api/user-manage</code> 中定义分配角色接口</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 分用户分配角色\n *&#x2F;\nexport const updateRole &#x3D; (id, roles) &#x3D;&gt; &#123;\n  return request(&#123;\n    url: &#96;&#x2F;user-manage&#x2F;update-role&#x2F;$&#123;id&#125;&#96;,\n    method: &#39;POST&#39;,\n    data: &#123;\n      roles\n    &#125;\n  &#125;)\n&#125;</code></pre>\n</li>\n<li><p>点击确定调用接口</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n  确定按钮点击事件\n *&#x2F;\nconst i18n &#x3D; useI18n()\nconst onConfirm &#x3D; async () &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 处理数据结构\n  const roles &#x3D; userRoleTitleList.value.map(title &#x3D;&gt; &#123;\n    return allRoleList.value.find(role &#x3D;&gt; role.title &#x3D;&#x3D;&#x3D; title)\n  &#125;)\n\n  await updateRole(props.userId, roles)\n\n  ElMessage.success(i18n.t(&#39;msg.role.updateRoleSuccess&#39;))\n  closed()\n&#125;</code></pre>\n</li>\n<li><p>修改成功后，发送事件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const emits &#x3D; defineEmits([&#39;update:modelValue&#39;, &#39;updateRole&#39;])\n\nconst onConfirm &#x3D; async () &#x3D;&gt; &#123;\n  ...\n  &#x2F;&#x2F; 角色更新成功\n  emits(&#39;updateRole&#39;)\n&#125;</code></pre>\n</li>\n<li><p>在 <code>user-manage</code> 中监听角色更新成功事件，重新获取数据</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;roles-dialog\n      v-model&#x3D;&quot;roleDialogVisible&quot;\n      :userId&#x3D;&quot;selectUserId&quot;\n      @updateRole&#x3D;&quot;getListData&quot;\n    &gt;&lt;&#x2F;roles-dialog&gt;</code></pre></li>\n</ol>\n<h2 id=\"8-06：辅助业务：为角色指定权限\"><a href=\"#8-06：辅助业务：为角色指定权限\" class=\"headerlink\" title=\"8-06：辅助业务：为角色指定权限\"></a>8-06：辅助业务：为角色指定权限</h2><p>为角色指定权限通过 <strong>弹出层中的 <a href=\"https://element-plus.org/zh-CN/component/tree.html\">树形控件</a> 处理</strong>，整体的流程与上一小节相差无几。</p>\n<ol>\n<li><p>创建 为角色指定权限弹出层</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;el-dialog\n    :title&#x3D;&quot;$t(&#39;msg.excel.roleDialogTitle&#39;)&quot;\n    :model-value&#x3D;&quot;modelValue&quot;\n    @close&#x3D;&quot;closed&quot;\n  &gt;\n    内容\n\n    &lt;template #footer&gt;\n      &lt;span class&#x3D;&quot;dialog-footer&quot;&gt;\n        &lt;el-button @click&#x3D;&quot;closed&quot;&gt;&#123;&#123; $t(&#39;msg.universal.cancel&#39;) &#125;&#125;&lt;&#x2F;el-button&gt;\n        &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;onConfirm&quot;&gt;&#123;&#123;\n          $t(&#39;msg.universal.confirm&#39;)\n        &#125;&#125;&lt;&#x2F;el-button&gt;\n      &lt;&#x2F;span&gt;\n    &lt;&#x2F;template&gt;\n  &lt;&#x2F;el-dialog&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\nimport &#123; defineProps, defineEmits &#125; from &#39;vue&#39;\ndefineProps(&#123;\n  modelValue: &#123;\n    type: Boolean,\n    required: true\n  &#125;\n&#125;)\nconst emits &#x3D; defineEmits([&#39;update:modelValue&#39;])\n\n&#x2F;**\n  确定按钮点击事件\n *&#x2F;\nconst onConfirm &#x3D; async () &#x3D;&gt; &#123;\n  closed()\n&#125;\n\n&#x2F;**\n * 关闭\n *&#x2F;\nconst closed &#x3D; () &#x3D;&gt; &#123;\n  emits(&#39;update:modelValue&#39;, false)\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n</li>\n<li><p>在 <code>roles-list</code> 中点击查看，展示弹出层</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;&quot;&gt;\n    &lt;el-card&gt;\n      &lt;el-table :data&#x3D;&quot;allRoles&quot; border style&#x3D;&quot;width: 100%&quot;&gt;\n        ...\n        &lt;el-table-column\n          ...\n          #default&#x3D;&quot;&#123; row &#125;&quot;\n        &gt;\n          &lt;el-button\n            type&#x3D;&quot;primary&quot;\n            size&#x3D;&quot;mini&quot;\n            @click&#x3D;&quot;onDistributePermissionClick(row)&quot;\n          &gt;\n            &#123;&#123; $t(&#39;msg.role.assignPermissions&#39;) &#125;&#125;\n          &lt;&#x2F;el-button&gt;\n        &lt;&#x2F;el-table-column&gt;\n      &lt;&#x2F;el-table&gt;\n    &lt;&#x2F;el-card&gt;\n\n    &lt;distribute-permission\n      v-model&#x3D;&quot;distributePermissionVisible&quot;\n    &gt;&lt;&#x2F;distribute-permission&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\n...\nimport DistributePermission from &#39;.&#x2F;components&#x2F;DistributePermission.vue&#39;\n\n...\n\n&#x2F;**\n * 分配权限\n *&#x2F;\nconst distributePermissionVisible &#x3D; ref(false)\nconst onDistributePermissionClick &#x3D; row &#x3D;&gt; &#123;\n  distributePermissionVisible.value &#x3D; true\n&#125;\n&lt;&#x2F;script&gt;\n</code></pre>\n</li>\n<li><p>在弹出层中我们需要利用 <a href=\"https://element-plus.org/zh-CN/component/tree.html\">el-tree</a> 进行数据展示，此时数据分为两种：</p>\n<ol>\n<li>所有权限（已存在）</li>\n<li>角色对应的权限</li>\n</ol>\n</li>\n<li><p>所以我们需要先获取对应数据</p>\n</li>\n<li><p>在 <code>api/role</code> 中定义获取角色当前权限</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 获取指定角色的权限\n *&#x2F;\nexport const rolePermission &#x3D; (roleId) &#x3D;&gt; &#123;\n  return request(&#123;\n    url: &#96;&#x2F;role&#x2F;permission&#x2F;$&#123;roleId&#125;&#96;\n  &#125;)\n&#125;</code></pre>\n</li>\n<li><p>在 <code>DistributePermission</code> 组件中获取所有权限数据</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;script setup&gt;\nimport &#123; defineProps, defineEmits, ref &#125; from &#39;vue&#39;\nimport &#123; permissionList &#125; from &#39;@&#x2F;api&#x2F;permission&#39;\nimport &#123; watchSwitchLang &#125; from &#39;@&#x2F;utils&#x2F;i18n&#39;\n...\n\n&#x2F;&#x2F; 所有权限\nconst allPermission &#x3D; ref([])\nconst getPermissionList &#x3D; async () &#x3D;&gt; &#123;\n  allPermission.value &#x3D; await permissionList()\n&#125;\ngetPermissionList()\nwatchSwitchLang(getPermissionList)\n\n...\n&lt;&#x2F;script&gt;</code></pre>\n</li>\n<li><p>使用  <a href=\"https://element-plus.org/zh-CN/component/tree.html\">el-tree</a> 渲染权限数据</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  ...\n    &lt;el-tree\n      ref&#x3D;&quot;treeRef&quot;\n      :data&#x3D;&quot;allPermission&quot;\n      show-checkbox\n      check-strictly\n      node-key&#x3D;&quot;id&quot;\n      default-expand-all\n      :props&#x3D;&quot;defaultProps&quot;\n    &gt;\n    &lt;&#x2F;el-tree&gt;\n...\n&lt;&#x2F;template&gt;\n\n&lt;script setup&gt;\n...\n&#x2F;&#x2F; 属性结构配置\nconst defaultProps &#x3D; &#123;\n  children: &#39;children&#39;,\n  label: &#39;permissionName&#39;\n&#125;\n...\n&lt;&#x2F;script&gt;\n</code></pre>\n</li>\n<li><p>接下来渲染选中项，即：角色当前权限</p>\n</li>\n<li><p>调用 <code>rolePermission</code> 接口需要 <strong>当前角色 ID</strong>，所以我们需要定义对应的 <code>props</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const props &#x3D; defineProps(&#123;\n  modelValue: &#123;\n    type: Boolean,\n    required: true\n  &#125;,\n  roleId: &#123;\n    type: String,\n    required: true\n  &#125;\n&#125;)</code></pre>\n</li>\n<li><p>在 <code>role-list</code> 中传递角色ID</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">    &lt;distribute-permission\n      v-model&#x3D;&quot;distributePermissionVisible&quot;\n      :roleId&#x3D;&quot;selectRoleId&quot;\n    &gt;&lt;&#x2F;distribute-permission&gt;\n    \n    \n&#x2F;**\n * 分配权限\n *&#x2F;\nconst selectRoleId &#x3D; ref(&#39;&#39;)\nconst onDistributePermissionClick &#x3D; row &#x3D;&gt; &#123;\n  selectRoleId.value &#x3D; row.id\n&#125;</code></pre>\n</li>\n<li><p>调用 <code>rolePermission</code> 接口获取数据</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; rolePermission &#125; from &#39;@&#x2F;api&#x2F;role&#39;\n\n\n&#x2F;&#x2F; 获取当前用户角色的权限\nconst getRolePermission &#x3D; async () &#x3D;&gt; &#123;\n  const checkedKeys &#x3D; await rolePermission(props.roleId)\n  console.log(checkedKeys)\n&#125;\n\nwatch(\n  () &#x3D;&gt; props.roleId,\n  val &#x3D;&gt; &#123;\n    if (val) getRolePermission()\n  &#125;\n)\n</code></pre>\n</li>\n<li><p>根据获取到的数据渲染选中的 <code>tree</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; tree 节点\nconst treeRef &#x3D; ref(null)\n\n&#x2F;&#x2F; 获取当前用户角色的权限\nconst getRolePermission &#x3D; async () &#x3D;&gt; &#123;\n  const checkedKeys &#x3D; await rolePermission(props.roleId)\n  treeRef.value.setCheckedKeys(checkedKeys)\n&#125;</code></pre>\n</li>\n<li><p>在 <code>api/role</code> 中定义分配权限接口</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 为角色修改权限\n *&#x2F;\nexport const distributePermission &#x3D; (data) &#x3D;&gt; &#123;\n  return request(&#123;\n    url: &#39;&#x2F;role&#x2F;distribute-permission&#39;,\n    method: &#39;POST&#39;,\n    data\n  &#125;)\n&#125;\n</code></pre>\n</li>\n<li><p>点击确定调用接口</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; rolePermission, distributePermission &#125; from &#39;@&#x2F;api&#x2F;role&#39;\nimport &#123; useI18n &#125; from &#39;vue-i18n&#39;\nimport &#123; ElMessage &#125; from &#39;element-plus&#39;\n\n&#x2F;**\n  确定按钮点击事件\n *&#x2F;\nconst i18n &#x3D; useI18n()\nconst onConfirm &#x3D; async () &#x3D;&gt; &#123;\n  await distributePermission(&#123;\n    roleId: props.roleId,\n    permissions: treeRef.value.getCheckedKeys()\n  &#125;)\n  ElMessage.success(i18n.t(&#39;msg.role.updateRoleSuccess&#39;))\n  closed()\n&#125;\n</code></pre></li>\n</ol>\n<h2 id=\"8-07：基于-RBAC-的权限控制体系原理与实现分析\"><a href=\"#8-07：基于-RBAC-的权限控制体系原理与实现分析\" class=\"headerlink\" title=\"8-07：基于 RBAC 的权限控制体系原理与实现分析\"></a>8-07：基于 RBAC 的权限控制体系原理与实现分析</h2><p>那么接下来就进入我们本章中的核心内容 <strong>基于 RBAC 的权限控制</strong> ，在之前我们的 <strong>权限理论</strong> 这一小节的时候说过 <code>RBAC</code> 是基于 <strong>用户 -&gt; 角色 -&gt; 权限</strong> 的 <strong>基于 角色的权限 控制 用户的访问</strong> 的体系。</p>\n<p>在这套体系中，最基层的就是 <strong>权限部分</strong> 。那么这个权限部分在我们的项目中具体的呈现是什么呢？那么下面我们就来看一下：</p>\n<ol>\n<li>我们可以先为 <strong>员工角色</strong> 指定 <strong>空权限</strong></li>\n<li>然后为我们的 <strong>测试用户</strong> 指定指定 <strong>员工角色</strong></li>\n<li>此时我们重新登录 <strong>测试用户</strong></li>\n<li>可以发现左侧菜单中仅存在 <strong>个人中心</strong> 页面</li>\n<li>然后我们重新登录 <strong>超级管理员</strong> 账号</li>\n<li>为 <strong>员工角色</strong> 指定 <strong>员工管理 &amp;&amp; 分配角色</strong> 权限</li>\n<li>然后为我们的 <strong>测试用户</strong> 指定指定 <strong>员工角色</strong></li>\n<li>此时我们重新登录 <strong>测试用户</strong></li>\n<li>可以发现左侧菜单中多出 <strong>员工管理</strong> 页面，并且页面中仅存在指定的 <strong>分配角色</strong> 功能</li>\n</ol>\n<p>以上就是我们权限系统中的具体呈现。</p>\n<p>那么由此呈现我们可以看出，整个权限系统其实分成了两部分：</p>\n<ol>\n<li>页面权限：比如 员工管理</li>\n<li>功能权限：比如 分配角色</li>\n</ol>\n<p>其中 <strong>页面权限</strong> 表示：当前用户可以访问的页面</p>\n<p><strong>功能权限</strong> 表示：当前用户可以访问的权限功能（PS：并非所有功能有需要权限）</p>\n<p>那么明确好了以上内容之后，接下来我们来看下，以上功能如何进行实现呢？</p>\n<p>首先我们先来看 <strong>页面权限：</strong></p>\n<p>所谓页面权限包含两部分内容：</p>\n<ol>\n<li>用户可看到的：左侧 <code>menu</code> 菜单的 <code>item</code> 展示</li>\n<li>用户看不到的：路由表配置</li>\n</ol>\n<p>我们知道 <strong>左侧 <code>menu</code> 菜单是根据路由表自动生成的。</strong> 所以以上第一部分的内容其实就是由第二部分引起的。</p>\n<p>那么我们就可以来看一下 <strong>路由表配置了</strong>。</p>\n<p>不知道大家还记不记得，之前我们设置路由表的时候，把路由表分成了两部分：</p>\n<ol>\n<li>私有路由表 <code>privateRoutes</code>：依据权限进行动态配置的</li>\n<li>公开路由表 <code>publicRoutes</code>：无权限要求的</li>\n</ol>\n<p>那么想要实现我们的  <strong>页面权限</strong> 核心的点就是在我们的 <strong>私有路由表 <code>privateRoutes</code></strong></p>\n<p>那么在 <strong>私有路由表 <code>privateRoutes</code></strong> 这里我们能做什么呢？</p>\n<p>时刻记住我们最终的目的，我们期望的是：<strong>不同的权限进入系统可以看到不同的路由</strong> 。那么换句话而言是不是就是：<strong>根据不同的权限数据，生成不同的私有路由表？</strong></p>\n<p>对于 <code>vue-router 4</code> 而言，提供了 <a href=\"https://next.router.vuejs.org/zh/api/#addroute\">addRoute API</a> ，可以 <strong>动态添加路由到路由表中</strong>，那么我们就可以利用这个 <code>API</code> 生成不同的路由表数据。</p>\n<p>那么现在我们来总结一下以上所说的内容：</p>\n<ol>\n<li>页面权限实现的核心在于 <strong>路由表配置</strong></li>\n<li>路由表配置的核心在于 <strong>私有路由表 <code>privateRoutes</code></strong></li>\n<li>私有路由表 <code>privateRoutes</code> 的核心在于 <strong><a href=\"https://next.router.vuejs.org/zh/api/#addroute\">addRoute API</a></strong></li>\n</ol>\n<p>那么简单一句话总结，我们只需要：**根据不同的权限数据，利用  <a href=\"https://next.router.vuejs.org/zh/api/#addroute\">addRoute API</a> 生成不同的私有路由表 ** 即可实现 <strong>页面权限</strong> 功能</p>\n<p>那么接下来我们来明确  <strong>功能权限：</strong></p>\n<p> <strong>功能权限</strong> 的难度低于页面权限，所谓功能权限指的只有一点：</p>\n<ol>\n<li>根据不同的 <strong>权限数据</strong>，展示不同的 <strong>功能按钮</strong></li>\n</ol>\n<p>那么看这一条，依据我们刚才所说的 <strong>页面权限</strong> 经验，估计大家就应该比较好理解了。</p>\n<p>对于 <strong>功能权限</strong> 而言，我们只需要：<strong>根据权限数据，隐藏功能按钮</strong> 即可</p>\n<p>那么到这里我们已经分析完了 <strong>页面权限</strong> 与 <strong>功能权限</strong> </p>\n<p>那么接下来我们就可以分别来看一下两者的实现方案了。</p>\n<p>首先我们来看 <strong>页面权限：</strong></p>\n<p>整个 <strong>页面权限</strong> 实现分为以下几步：</p>\n<ol>\n<li>获取 <strong>权限数据</strong></li>\n<li><strong>私有路由表</strong> 不再被直接加入到 <code>routes</code> 中</li>\n<li>利用 <a href=\"https://next.router.vuejs.org/zh/api/#addroute\">addRoute API</a> 动态添加路由到 <strong>路由表</strong> 中</li>\n</ol>\n<p>接下来是 <strong>功能权限：</strong></p>\n<p>整个 <strong>功能权限</strong> 实现分为以下几步：</p>\n<ol>\n<li>获取 <strong>权限数据</strong></li>\n<li>定义 <strong>隐藏按钮方式</strong>（通过指令）</li>\n<li>依据数据隐藏按钮</li>\n</ol>\n<h2 id=\"8-08：业务落地：定义页面权限控制动作，实现页面权限受控\"><a href=\"#8-08：业务落地：定义页面权限控制动作，实现页面权限受控\" class=\"headerlink\" title=\"8-08：业务落地：定义页面权限控制动作，实现页面权限受控\"></a>8-08：业务落地：定义页面权限控制动作，实现页面权限受控</h2><p>那么这一小节我们来实现 <strong>页面权限</strong></p>\n<p>首先我们先来明确前两步的内容：</p>\n<ol>\n<li><p>页面权限数据在 <strong><code>userInfo -&gt; permission -&gt; menus</code> 之中</strong></p>\n</li>\n<li><p><strong>私有路由表</strong> 不再被直接加入到 <code>routes</code> 中</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export const privateRoutes &#x3D; [...]\nexport const publicRoutes &#x3D; [...]\n\nconst router &#x3D; createRouter(&#123;\n  history: createWebHashHistory(),\n  routes: publicRoutes\n&#125;)</code></pre></li>\n</ol>\n<p>最后我们来实现第三步：利用 <a href=\"https://next.router.vuejs.org/zh/api/#addroute\">addRoute API</a> 动态添加路由到 <strong>路由表</strong> 中</p>\n<ol>\n<li><p>定义添加的动作，该动作我们通过一个新的 <code>vuex</code> 模块进行</p>\n</li>\n<li><p>创建 <code>store/modules/permission</code> 模块</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 专门处理权限路由的模块\nimport &#123; publicRoutes, privateRoutes &#125; from &#39;@&#x2F;router&#39;\nexport default &#123;\n  namespaced: true,\n  state: &#123;\n    &#x2F;&#x2F; 路由表：初始拥有静态路由权限\n    routes: publicRoutes\n  &#125;,\n  mutations: &#123;\n    &#x2F;**\n     * 增加路由\n     *&#x2F;\n    setRoutes(state, newRoutes) &#123;\n      &#x2F;&#x2F; 永远在静态路由的基础上增加新路由\n      state.routes &#x3D; [...publicRoutes, ...newRoutes]\n    &#125;\n  &#125;,\n  actions: &#123;\n    &#x2F;**\n     * 根据权限筛选路由\n     *&#x2F;\n    filterRoutes(context, menus) &#123;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n</li>\n<li><p>那么 <code>filterRoutes</code> 这个动作我们怎么制作呢？</p>\n</li>\n<li><p>我们可以为每个权限路由指定一个 <code>name</code>，每个 <code>name</code> 对应一个 <strong>页面权限</strong></p>\n</li>\n<li><p>通过 <code>name</code> 与 <strong>页面权限</strong> 匹配的方式筛选出对应的权限路由</p>\n</li>\n<li><p>所以我们需要对现有的私有路由表进行重制</p>\n</li>\n<li><p>创建 <code>router/modules</code> 文件夹</p>\n</li>\n<li><p>写入 5 个页面权限路由</p>\n</li>\n<li><p><code>UserManage.js</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import layout from &#39;@&#x2F;layout&#39;\n\nexport default &#123;\n  path: &#39;&#x2F;user&#39;,\n  component: layout,\n  redirect: &#39;&#x2F;user&#x2F;manage&#39;,\n  name: &#39;userManage&#39;,\n  meta: &#123;\n    title: &#39;user&#39;,\n    icon: &#39;personnel&#39;\n  &#125;,\n  children: [\n    &#123;\n      path: &#39;&#x2F;user&#x2F;manage&#39;,\n      component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;user-manage&#x2F;index&#39;),\n      meta: &#123;\n        title: &#39;userManage&#39;,\n        icon: &#39;personnel-manage&#39;\n      &#125;\n    &#125;,\n    &#123;\n      path: &#39;&#x2F;user&#x2F;info&#x2F;:id&#39;,\n      name: &#39;userInfo&#39;,\n      component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;user-info&#x2F;index&#39;),\n      props: true,\n      meta: &#123;\n        title: &#39;userInfo&#39;\n      &#125;\n    &#125;,\n    &#123;\n      path: &#39;&#x2F;user&#x2F;import&#39;,\n      name: &#39;import&#39;,\n      component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;import&#x2F;index&#39;),\n      meta: &#123;\n        title: &#39;excelImport&#39;\n      &#125;\n    &#125;\n  ]\n&#125;\n</code></pre>\n</li>\n<li><p><code>RoleList.js</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import layout from &#39;@&#x2F;layout&#39;\n\nexport default &#123;\n  path: &#39;&#x2F;user&#39;,\n  component: layout,\n  redirect: &#39;&#x2F;user&#x2F;manage&#39;,\n  name: &#39;roleList&#39;,\n  meta: &#123;\n    title: &#39;user&#39;,\n    icon: &#39;personnel&#39;\n  &#125;,\n  children: [\n    &#123;\n      path: &#39;&#x2F;user&#x2F;role&#39;,\n      component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;role-list&#x2F;index&#39;),\n      meta: &#123;\n        title: &#39;roleList&#39;,\n        icon: &#39;role&#39;\n      &#125;\n    &#125;\n  ]\n&#125;\n</code></pre>\n</li>\n<li><p><code>PermissionList.js</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import layout from &#39;@&#x2F;layout&#39;\n\nexport default &#123;\n  path: &#39;&#x2F;user&#39;,\n  component: layout,\n  redirect: &#39;&#x2F;user&#x2F;manage&#39;,\n  name: &#39;roleList&#39;,\n  meta: &#123;\n    title: &#39;user&#39;,\n    icon: &#39;personnel&#39;\n  &#125;,\n  children: [\n    &#123;\n      path: &#39;&#x2F;user&#x2F;permission&#39;,\n      component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;permission-list&#x2F;index&#39;),\n      meta: &#123;\n        title: &#39;permissionList&#39;,\n        icon: &#39;permission&#39;\n      &#125;\n    &#125;\n  ]\n&#125;\n</code></pre>\n</li>\n<li><p><code>Article.js</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import layout from &#39;@&#x2F;layout&#39;\n\nexport default &#123;\n  path: &#39;&#x2F;article&#39;,\n  component: layout,\n  redirect: &#39;&#x2F;article&#x2F;ranking&#39;,\n  name: &#39;articleRanking&#39;,\n  meta: &#123; title: &#39;article&#39;, icon: &#39;article&#39; &#125;,\n  children: [\n    &#123;\n      path: &#39;&#x2F;article&#x2F;ranking&#39;,\n      component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;article-ranking&#x2F;index&#39;),\n      meta: &#123;\n        title: &#39;articleRanking&#39;,\n        icon: &#39;article-ranking&#39;\n      &#125;\n    &#125;,\n    &#123;\n      path: &#39;&#x2F;article&#x2F;:id&#39;,\n      component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;article-detail&#x2F;index&#39;),\n      meta: &#123;\n        title: &#39;articleDetail&#39;\n      &#125;\n    &#125;\n  ]\n&#125;\n</code></pre>\n</li>\n<li><p><code>ArticleCreate.js</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import layout from &#39;@&#x2F;layout&#39;\n\nexport default &#123;\n  path: &#39;&#x2F;article&#39;,\n  component: layout,\n  redirect: &#39;&#x2F;article&#x2F;ranking&#39;,\n  name: &#39;articleCreate&#39;,\n  meta: &#123; title: &#39;article&#39;, icon: &#39;article&#39; &#125;,\n  children: [\n    &#123;\n      path: &#39;&#x2F;article&#x2F;create&#39;,\n      component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;article-create&#x2F;index&#39;),\n      meta: &#123;\n        title: &#39;articleCreate&#39;,\n        icon: &#39;article-create&#39;\n      &#125;\n    &#125;,\n    &#123;\n      path: &#39;&#x2F;article&#x2F;editor&#x2F;:id&#39;,\n      component: () &#x3D;&gt; import(&#39;@&#x2F;views&#x2F;article-create&#x2F;index&#39;),\n      meta: &#123;\n        title: &#39;articleEditor&#39;\n      &#125;\n    &#125;\n  ]\n&#125;\n</code></pre>\n</li>\n<li><p>以上内容存放于 <strong>课程资料 -&gt; 动态路由表</strong> 中</p>\n</li>\n<li><p>在 <code>router/index</code> 中合并这些路由到 <code>privateRoutes</code> 中</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import ArticleCreaterRouter from &#39;.&#x2F;modules&#x2F;ArticleCreate&#39;\nimport ArticleRouter from &#39;.&#x2F;modules&#x2F;Article&#39;\nimport PermissionListRouter from &#39;.&#x2F;modules&#x2F;PermissionList&#39;\nimport RoleListRouter from &#39;.&#x2F;modules&#x2F;RoleList&#39;\nimport UserManageRouter from &#39;.&#x2F;modules&#x2F;UserManage&#39;\n\nexport const asyncRoutes &#x3D; [\n  RoleListRouter,\n  UserManageRouter,\n  PermissionListRouter,\n  ArticleCreaterRouter,\n  ArticleRouter\n]</code></pre>\n</li>\n<li><p>此时所有的 <strong>权限页面</strong> 都拥有一个名字，这个名字与 <strong>权限数据</strong> 匹配</p>\n</li>\n<li><p>所以我们就可以据此生成 <strong>权限路由表数据</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 根据权限筛选路由\n *&#x2F;\nfilterRoutes(context, menus) &#123;\n  const routes &#x3D; []\n  &#x2F;&#x2F; 路由权限匹配\n  menus.forEach(key &#x3D;&gt; &#123;\n    &#x2F;&#x2F; 权限名 与 路由的 name 匹配\n    routes.push(...privateRoutes.filter(item &#x3D;&gt; item.name &#x3D;&#x3D;&#x3D; key))\n  &#125;)\n  &#x2F;&#x2F; 最后添加 不匹配路由进入 404\n  routes.push(&#123;\n    path: &#39;&#x2F;:catchAll(.*)&#39;,\n    redirect: &#39;&#x2F;404&#39;\n  &#125;)\n  context.commit(&#39;setRoutes&#39;, routes)\n  return routes\n&#125;</code></pre>\n</li>\n<li><p>在 <code>store/index</code> 中设置该 <code>modules</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">...\nexport default createStore(&#123;\n  getters,\n  modules: &#123;\n    ...\n    permission\n  &#125;\n&#125;)\n</code></pre>\n\n\n</li>\n<li><p>在 <code>src/permission</code> 中，获取用户数据之后调用该动作</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 判断用户资料是否获取\n      &#x2F;&#x2F; 若不存在用户信息，则需要获取用户信息\n      if (!store.getters.hasUserInfo) &#123;\n        &#x2F;&#x2F; 触发获取用户信息的 action，并获取用户当前权限\n        const &#123; permission &#125; &#x3D; await store.dispatch(&#39;user&#x2F;getUserInfo&#39;)\n        &#x2F;&#x2F; 处理用户权限，筛选出需要添加的权限\n        const filterRoutes &#x3D; await store.dispatch(\n          &#39;permission&#x2F;filterRoutes&#39;,\n          permission.menus\n        )\n        &#x2F;&#x2F; 利用 addRoute 循环添加\n        filterRoutes.forEach(item &#x3D;&gt; &#123;\n          router.addRoute(item)\n        &#125;)\n        &#x2F;&#x2F; 添加完动态路由之后，需要在进行一次主动跳转\n        return next(to.path)\n      &#125;\n      next()</code></pre>\n</li>\n<li><p>因为我们主动获取了 <code>getUserInfo</code> 动作的返回值，所以不要忘记在 <code>getUserInfo</code> 中 <code>return res</code></p>\n</li>\n</ol>\n<p>那么到这里，当我们更换用户之后，刷新页面，路由表即可动态生成。</p>\n<p>但是此时大家应该可以发现，如果不刷新页面得话，左侧菜单是不会自动改变的？那么这是怎么回事呢？大家可以先思考一下这个问题，然后我们下一节再来处理。</p>\n<h2 id=\"8-09：业务落地：重置路由表数据\"><a href=\"#8-09：业务落地：重置路由表数据\" class=\"headerlink\" title=\"8-09：业务落地：重置路由表数据\"></a>8-09：业务落地：重置路由表数据</h2><p>在上一小节中我们遇到了一个问题：重新登录权限账户，不刷新页面，左侧菜单不会自动改变。</p>\n<p>那么出现这个问题的原因其实非常简单：<strong>退出登录时，添加的路由表并未被删除</strong></p>\n<p>所以想要解决这个问题，我们只需要在退出登录时，删除动态添加的路由表即可。</p>\n<p>那么删除动态添加的路由可以使用 <a href=\"https://next.router.vuejs.org/zh/api/#removeroute\">removeRoute</a> 方法进行。</p>\n<ol>\n<li><p>在 <code>router/index</code> 中定义 <code>resetRouter</code> 方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;**\n * 初始化路由表\n *&#x2F;\nexport function resetRouter() &#123;\n  if (\n    store.getters.userInfo &amp;&amp;\n    store.getters.userInfo.permission &amp;&amp;\n    store.getters.userInfo.permission.menus\n  ) &#123;\n    const menus &#x3D; store.getters.userInfo.permission.menus\n    menus.forEach((menu) &#x3D;&gt; &#123;\n      router.removeRoute(menu)\n    &#125;)\n  &#125;</code></pre>\n</li>\n<li><p>在退出登录的动作下，触发该方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import router, &#123; resetRouter &#125; from &#39;@&#x2F;router&#39;\n\nlogout(context) &#123;\n      resetRouter()\n      ...\n    &#125;</code></pre></li>\n</ol>\n<h2 id=\"8-10：业务落地：创建功能受控指令\"><a href=\"#8-10：业务落地：创建功能受控指令\" class=\"headerlink\" title=\"8-10：业务落地：创建功能受控指令\"></a>8-10：业务落地：创建功能受控指令</h2><p>在前面分析 <strong>功能权限</strong> 时，我们说过，实现功能权限的核心在于 <strong>根据数据隐藏功能按钮</strong>，那么隐藏的方式我们可以通过指令进行。</p>\n<p>所以首先我们先去创建这样一个指令（<a href=\"https://v3.cn.vuejs.org/guide/custom-directive.html#%E7%AE%80%E4%BB%8B\">vue3 自定义指令</a>）</p>\n<ol>\n<li><p>我们期望最终可以通过这样格式的指令进行功能受控 <code>v-permission=&quot;[&#39;importUser&#39;]&quot;</code></p>\n</li>\n<li><p>以此创建对应的自定义指令 <code>directives/permission</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import store from &#39;@&#x2F;store&#39;\n\nfunction checkPermission(el, binding) &#123;\n  &#x2F;&#x2F; 获取绑定的值，此处为权限\n  const &#123; value &#125; &#x3D; binding\n  &#x2F;&#x2F; 获取所有的功能指令\n  const points &#x3D; store.getters.userInfo.permission.points\n  &#x2F;&#x2F; 当传入的指令集为数组时\n  if (value &amp;&amp; value instanceof Array) &#123;\n    &#x2F;&#x2F; 匹配对应的指令\n    const hasPermission &#x3D; points.some(point &#x3D;&gt; &#123;\n      return value.includes(point)\n    &#125;)\n    &#x2F;&#x2F; 如果无法匹配，则表示当前用户无该指令，那么删除对应的功能按钮\n    if (!hasPermission) &#123;\n      el.parentNode &amp;&amp; el.parentNode.removeChild(el)\n    &#125;\n  &#125; else &#123;\n    &#x2F;&#x2F; eslint-disabled-next-line\n    throw new Error(&#39;v-permission value is [&quot;admin&quot;,&quot;editor&quot;]&#39;)\n  &#125;\n&#125;\n\nexport default &#123;\n  &#x2F;&#x2F; 在绑定元素的父组件被挂载后调用\n  mounted(el, binding) &#123;\n    checkPermission(el, binding)\n  &#125;,\n  &#x2F;&#x2F; 在包含组件的 VNode 及其子组件的 VNode 更新后调用\n  update(el, binding) &#123;\n    checkPermission(el, binding)\n  &#125;\n&#125;\n</code></pre>\n</li>\n<li><p>在 <code>directives/index</code> 中绑定该指令</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">...\nimport permission from &#39;.&#x2F;permission&#39;\n\nexport default (app) &#x3D;&gt; &#123;\n  ...\n  app.directive(&#39;permission&#39;, permission)\n&#125;\n</code></pre>\n</li>\n<li><p>在所有功能中，添加该指令</p>\n</li>\n<li><p><code>views/role-list/index</code></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;el-button\n    ...\n    v-permission&#x3D;&quot;[&#39;distributePermission&#39;]&quot;\n&gt;\n&#123;&#123; $t(&#39;msg.role.assignPermissions&#39;) &#125;&#125;\n&lt;&#x2F;el-button&gt;</code></pre>\n</li>\n<li><p><code>views/user-manage/index</code></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;el-button\n    ...\n    v-permission&#x3D;&quot;[&#39;importUser&#39;]&quot;\n&gt;\n&#123;&#123; $t(&#39;msg.excel.importExcel&#39;) &#125;&#125;&lt;&#x2F;el-button\n        &gt;</code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;el-button\n    ...\n    v-permission&#x3D;&quot;[&#39;distributeRole&#39;]&quot;\n&gt;&#123;&#123; $t(&#39;msg.excel.showRole&#39;) &#125;&#125;&lt;&#x2F;el-button\n&gt;</code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;el-button\n    ...\n    v-permission&#x3D;&quot;[&#39;removeUser&#39;]&quot;\n&gt;&#123;&#123; $t(&#39;msg.excel.remove&#39;) &#125;&#125;&lt;&#x2F;el-button\n&gt;</code></pre></li>\n</ol>\n<h2 id=\"8-11：总结\"><a href=\"#8-11：总结\" class=\"headerlink\" title=\"8-11：总结\"></a>8-11：总结</h2><p>那么到这里我们整个权限受控的章节就算是全部完成了。</p>\n<p>整个这一大章中，核心就是 <strong><code>RBAC</code>的权限受控体系</strong> 。围绕着 <strong>用户-&gt;角色-&gt;权限</strong> 的体系是现在在包含权限控制的系统中使用率最广的一种方式。</p>\n<p>那么怎么针对于权限控制的方案而言，除了课程中提到的这种方案之外，其实还有很多其他的方案，大家可以在我们的话题讨论中踊跃发言，多多讨论。</p>\n","text":"第八章：分级分控权限管理8-01：开篇那么从这一章开始我们就来解决我们的权限控制问题。 本章以权限控制为主，整个章节会分成三部分来去讲解： 权限理论：明确什么是 RBAC 权限控制体现 辅助业务：完善 用户、角色、权限 三个页面功能 核心功能：落地实现 RBAC 权限控制系统 列...","link":"","photos":[],"count_time":{"symbolsCount":"28k","symbolsTime":"25 mins."},"categories":[{"name":"vue3.2后台管理系统","slug":"vue3-2后台管理系统","count":13,"path":"api/categories/vue3-2后台管理系统.json"}],"tags":[{"name":"后台","slug":"后台","count":12,"path":"api/tags/后台.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%85%AB%E7%AB%A0%EF%BC%9A%E5%88%86%E7%BA%A7%E5%88%86%E6%8E%A7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">第八章：分级分控权限管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-01%EF%BC%9A%E5%BC%80%E7%AF%87\"><span class=\"toc-text\">8-01：开篇</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-02%EF%BC%9A%E6%9D%83%E9%99%90%E7%90%86%E8%AE%BA%EF%BC%9ARBAC-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%E4%BD%93%E7%B3%BB\"><span class=\"toc-text\">8-02：权限理论：RBAC 权限控制体系</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-03%EF%BC%9A%E8%BE%85%E5%8A%A9%E4%B8%9A%E5%8A%A1%EF%BC%9A%E8%A7%92%E8%89%B2%E5%88%97%E8%A1%A8%E5%B1%95%E7%A4%BA\"><span class=\"toc-text\">8-03：辅助业务：角色列表展示</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-04%EF%BC%9A%E8%BE%85%E5%8A%A9%E4%B8%9A%E5%8A%A1%EF%BC%9A%E6%9D%83%E9%99%90%E5%88%97%E8%A1%A8%E5%B1%95%E7%A4%BA\"><span class=\"toc-text\">8-04：辅助业务：权限列表展示</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-05%EF%BC%9A%E8%BE%85%E5%8A%A9%E4%B8%9A%E5%8A%A1%EF%BC%9A%E4%B8%BA%E7%94%A8%E6%88%B7%E5%88%86%E9%85%8D%E8%A7%92%E8%89%B2\"><span class=\"toc-text\">8-05：辅助业务：为用户分配角色</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-06%EF%BC%9A%E8%BE%85%E5%8A%A9%E4%B8%9A%E5%8A%A1%EF%BC%9A%E4%B8%BA%E8%A7%92%E8%89%B2%E6%8C%87%E5%AE%9A%E6%9D%83%E9%99%90\"><span class=\"toc-text\">8-06：辅助业务：为角色指定权限</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-07%EF%BC%9A%E5%9F%BA%E4%BA%8E-RBAC-%E7%9A%84%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90\"><span class=\"toc-text\">8-07：基于 RBAC 的权限控制体系原理与实现分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-08%EF%BC%9A%E4%B8%9A%E5%8A%A1%E8%90%BD%E5%9C%B0%EF%BC%9A%E5%AE%9A%E4%B9%89%E9%A1%B5%E9%9D%A2%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%E5%8A%A8%E4%BD%9C%EF%BC%8C%E5%AE%9E%E7%8E%B0%E9%A1%B5%E9%9D%A2%E6%9D%83%E9%99%90%E5%8F%97%E6%8E%A7\"><span class=\"toc-text\">8-08：业务落地：定义页面权限控制动作，实现页面权限受控</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-09%EF%BC%9A%E4%B8%9A%E5%8A%A1%E8%90%BD%E5%9C%B0%EF%BC%9A%E9%87%8D%E7%BD%AE%E8%B7%AF%E7%94%B1%E8%A1%A8%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">8-09：业务落地：重置路由表数据</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-10%EF%BC%9A%E4%B8%9A%E5%8A%A1%E8%90%BD%E5%9C%B0%EF%BC%9A%E5%88%9B%E5%BB%BA%E5%8A%9F%E8%83%BD%E5%8F%97%E6%8E%A7%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">8-10：业务落地：创建功能受控指令</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-11%EF%BC%9A%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">8-11：总结</span></a></li></ol></li></ol>","author":{"name":"西非","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个跑路的设计师","socials":{"github":"https://github.com/xuhui-web","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/a18482157085","juejin":"https://juejin.cn/user/1535369026995422","customs":{}}},"mapped":true,"prev_post":{"title":"09动态表格渲染方案之文章排名业务实现","uid":"003ef1fc8e383b34a44488d3579cdaee","slug":"vue3.2后台管理系统/09动态表格渲染方案之文章排名业务实现","date":"2022-08-22T19:02:44.000Z","updated":"2022-08-23T02:05:17.886Z","comments":true,"path":"api/articles/vue3.2后台管理系统/09动态表格渲染方案之文章排名业务实现.json","keywords":null,"cover":"/img/SplitShire-21-5282-1024x683.jpg","text":"第九章：动态表格渲染方案之文章排名业务实现9-01：开篇对于 文章排名 而言，核心的内容是围绕着表格处理来进行的。对应的核心业务主要有两个： 文章排名切换 动态表格渲染 这两个核心业务配合着其他的一些辅助功能： 文章排名页面展示 文章详情页面展示 共同组成了咱们这一大章的内容 9...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[{"name":"vue3.2后台管理系统","slug":"vue3-2后台管理系统","count":13,"path":"api/categories/vue3-2后台管理系统.json"}],"tags":[{"name":"后台","slug":"后台","count":12,"path":"api/tags/后台.json"}],"author":{"name":"西非","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个跑路的设计师","socials":{"github":"https://github.com/xuhui-web","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/a18482157085","juejin":"https://juejin.cn/user/1535369026995422","customs":{}}}},"next_post":{"title":"07用户权限处理","uid":"569348560a15d3e35abb58031a3aedf4","slug":"vue3.2后台管理系统/07用户权限处理","date":"2022-08-22T17:02:44.000Z","updated":"2022-08-23T02:02:47.063Z","comments":true,"path":"api/articles/vue3.2后台管理系统/07用户权限处理.json","keywords":null,"cover":"/img/photo-1511287381215-8c58b84f8896.jpg","text":"第七章：用户权限处理7-01：开篇在处理完成了 个人中心之后， 那么接下来我们就需要来处理 用户 相关的模块了 整个用户相关的模块分为三部分： 员工管理 角色列表 权限列表 这三部分的内容我们会分成两个大章来进行处理。 那么这一大章我们要来处理的就是 员工管理 模块的内容，整个 ...","link":"","photos":[],"count_time":{"symbolsCount":"37k","symbolsTime":"33 mins."},"categories":[{"name":"vue3.2后台管理系统","slug":"vue3-2后台管理系统","count":13,"path":"api/categories/vue3-2后台管理系统.json"}],"tags":[{"name":"后台","slug":"后台","count":12,"path":"api/tags/后台.json"}],"author":{"name":"西非","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个跑路的设计师","socials":{"github":"https://github.com/xuhui-web","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/a18482157085","juejin":"https://juejin.cn/user/1535369026995422","customs":{}}}}}